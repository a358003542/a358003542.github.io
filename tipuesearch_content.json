{
    "pages":[
        {
            "title":"页面未找到... 万泽的博客\r\n",
            "text":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n页面未找到... 万泽的博客\r\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigation\n\n\n\n\n网站首页\n\n\n\n\n\n\n搜索\n\n\n\n所有文章\n文章分类\n文章标签\n\n关于本网站\n\n\n\n\n\n\n\n\n\n\n页面不存在!\n\n\n\n\n不好意思，您试图查看的页面不存在。可能该页面并不存在或者已经不存在了或者已经被移动了。\n你可以试着下面的搜索栏来查找该文章看看。\n\n\n\n\n搜索\n\n\n\n\n\n\n\n\n\n\n\n\n\nPowered by Pelican. Theme: Elegant by Talha Mansoor and updated by wanze\n\n\n\n\n\n\n\n\n",
            "tags":"",
            "url":"https://a358003542.github.io/404.html"
        },
        {
            "title":"atom",
            "text":"前言   javascript 开发 推荐 atom 编辑器 。   配置 都   File   - >   Settings   找到 。   配置 packages themes 菜单 ， 搜索 相关 包和 主题 安装 。   apm 命令   atom 编辑器 自带 apm 命令 ， 打开 终端 输入 执行 安装 包的 动作 。   platformio - ide - terminal   官网 ：   platformio - ide - terminal   。 一个 打开 powershell 终端 插件 ， 很 实用 。   atom - beautify   官网 ：   atom - beautify   。 一个 自动 格式化 美化 文档 插件 。 安装   Ctrl + Alt + b   ， 定制 请 参见 官方 文档 。",
            "tags":"editor",
            "url":"articles/atom-editor.html"
        },
        {
            "title":"游戏分类",
            "text":"前言   游戏 分类 一个 统一 标准 ， 游戏 分类 很 模棱两可 ， 就算 分类 上 模棱两可 游戏 ， 合适 标注 ， 选择 游戏 很大 参考 意义 。   本文 相关 词汇 含义 定义 ：   大型   指 游戏 体量 大   小   指 游戏 体量 很小   在线   游戏 在线 游玩   多人 在线   游戏 多人 在线 游玩   战术   指 一场 上的 安排   战略   一场 更 长时间 几场 安排 ， 横跨 ， 会 增加 资源 因素 上的 。   策略   活动 长时间 策略 规划 ， 战略 区别 战略 更 关注 ， 策略 则不 局限 ， 会 包括 活动 。   冒险   指 游戏 鲜明 线性 冒险 故事 特性   角色 扮演   游戏 弱化 线性 故事 ， 更 开放 地图 要素 增强 玩家 沉浸 感   动作 对战   指 游戏 更 动作 对战   卡 牌对 战   指 游戏 卡 牌对 战   射击 对战   指 游戏 射击 对战   休闲 竞技   游戏 不 很 特性 ， 更 偏向 休闲 竞技   回合   游戏 回合 制的 ， 卡 牌对 战 回合 。   即时   游戏 即时   休闲 益智 小 游戏   宝石 迷阵   植物 大战 僵尸   合金 弹头 系列   冒险 游戏   游戏 性的 角度 出发 类 游戏 解密 动作 都 会带 一点 都 游戏 最 ， 游戏 最 更 多的 去 讲述 一个 故事 。   命运 石之 门   底特律 变人   去 月球   奇异 人生   动作 对战 冒险 游戏   最终 幻想 7 重 制版   战神 4   古墓 丽影 系列   火炬 光 2   蝙蝠 侠 系列   雷曼 传奇   卡 牌对 战 冒险 游戏   巫师 王权 陨落   卡牌 游戏   杀戮 尖塔   即时 战略 游戏   魔兽 争霸 3   帝国 时代 2   星际 争霸 2   回合 冒险 游戏   光之 子   在线 动作 对战 游戏   怪物 猎人 世界   星际 战甲   在线 射击 对战 游戏   求生 路 系列   多人 在线 休闲 竞技 游戏   糖豆 人 ： 终极 淘汰赛   多人 在线 动作 对战 游戏   Dota2   英雄 联盟   风暴 英雄   SMITE   多人 在线 卡 牌对 战 游戏   炉石 传说   巫师 昆特 牌   随从 大师   多人 在线 射击 对战 游戏   CSGO   堡垒 夜   守望 先锋   穿越 火线   方舟 生存 进化   大型 角色 扮演 游戏   巫师 3   神界 原罪 2   刺客 信条 2   刺客 信条 奥德赛   GTV5   射击 对战 冒险 游戏   生化 奇兵 无限   质量 效应 2   质量 效应 3   无 主之 2   光环   生化 奇兵 系列   地铁 系列   战术 游戏   晶体管       breach   战略 游戏   战争   群星   格斗 游戏   侍 魂   街霸   拳皇   火影 忍者 疾风 传   模拟 游戏     hunter :   call       wild   Farm   Simulator   城市 天际 线   坎 巴拉 太空 计划   策略 游戏   文明 5   冰汽 时代   RIMWORLD   文明 6   角色 扮演 游戏   区别 大型 角色 扮演 游戏 在于 一类 游戏 体量 偏 轻 。   星露 谷物 语   巫师 1   解谜 战 冒险 游戏   瘟疫 传说 无罪   解密 游戏   The   Bridge   传送 门 2   BABA   IS   YOU   塔 罗斯 法则   游戏   游戏 实在 不好 分类 只好 归于 类 。",
            "tags":"game",
            "url":"articles/game-classification.html"
        },
        {
            "title":"html5学习之cookbook",
            "text":"表单 提交 按钮 点击 提交   参考   网页 第一 小节   ， 解决 方案 很 简单 ， 。 单 页面 表单 ， 提交 成功 切换 网页 去了 ， 很 好地 。 情况 下 ， 解决 方案 会 令人 不 太 满意 ， 提交 按钮 提交 显示 按钮 处于 禁用 状态 。",
            "tags":"html5_tutorial",
            "url":"articles/html5-cookbook.html"
        },
        {
            "title":"javascript语言学习进阶",
            "text":"前言   本文 笔者 学习 javascript 语言 知识 基础 上 学习 整理 。   setInterval   启动 一个 计时器 ， 第二个 参数 时间 间隔 ， 时间 间隔 将会 执行 目标 函数 ， 默认 单位 ms 。   JavaScript 对象 转成 JSON 字符串   所示 ， 演示 利用   JSON . parse   来将 JSON 字符串 转成 JavaScript 对象 。   参考 资料   Javascript 权威 指南   David   Flanagan 著 .   mozilla   docs   javascript 教程     donot     jquery",
            "tags":"javascript",
            "url":"articles/javascript-language-learning-advanced.html"
        },
        {
            "title":"node学习笔记",
            "text":"何为 node   javascript 前端 脚本 语言 浏览器 负责 翻译 执行 ， 也就是说 javascript 运行 依赖 浏览器 。 node 一个 javascript 运行 时 ， 是你 javascript 脚本 类似 于在 浏览器 上在 node 上 运行 。 事实上 node 组件 结构 来说 类似 chrome 浏览器 ， 基于 chrome V8   javascript 引擎 ， 移 网页 显示 相关 webkit 引擎 。   官网 node 定义 ：   一个 搭建 Chrome   JavaScript 运行 时上 平台 ， 用于 构建 高速 、 伸缩 网络 程序 。 Node . js 采用 事件 驱动 、 非 阻塞 I / O 模型 ， 使 轻 量又 高效 ， 构建 运行 分布式 设备 上的 数据 密集型 实时 程序 完美 选择 。   V8 引擎 性能 很 高 ， javascript 会被 编译 成本 机器 码 。 node javascript 很 高效 。 V8 引擎 网页 上的 javascript 脚本 上 事件 驱动 ， 非 阻塞 IO ， 到了 node 服务器 事件 驱动 ， 非 阻塞 IO 编程 。   node npm   所说 ， node 一个 平台 ， node 常 称作 node . js ， node 在作 平台 内置 很多 官方 js 模块 。 比如说 随便 网上 找了 一个 最 简单 nodejs 入门 样例 web   server 程序 ：   最 语句   require ( ' http ' )   引入 node . js 官方 内置 js 模块 http 。   有了 官方 模块 第三方 模块 模块 管理 工具 。 安装 好 node node 命令 之外 npm 命令 ， 最新 node 还 提供 npx 命令 。   说 npx 命令 ， 本地 安装 一个 npm 包 ， 该包 提供 一个 命令 ， 希望 调用 命令 ， 做法 修改   package . json     scripts   字段 ：     npm   start   效果 。 调用   electron   命令 。   往下 说 ， 提到   package . json   npm 用于 包 管理 很 一个 配置 信息 文件 。 手工 创建 一个 ，   npm   init   命令 生成 一个 。   想要 新建 模块 根 目录 下 运行   npm   init   ， 程序 会 交互 问 ， 创建   package . json   文件 。   配置 npm 国内 源   免得 包 下载 动作 太 慢了 ， 先讲 。   配置 提到 yarn 。   npm   npm   install   module _   安装 模块   npm   uninstall   module _   移除 模块   npm   list   列出 安装 模块   npm   update   module _   更新 模块     - g   选项 来说 本次 操作 针对 全局 npm 库 ， ， 是不 推荐 做 。   npm   install   命令 还   i     add   两个 别名 ， install 提供 安装 选项 ：   默认   save - prod     - P   ， 常规 依赖 包 信息 会 放在   dependencies   字 段下 。 项目 相关 包 放在 。   save - dev     - D   ， 开发 包 信息 会 放在   devDependencies   。 开发 调试 封装 打包 相关 包 信息 推荐 放在 ， electron 官方 会 提示 放在   devDependencies   。   save - optional     - O   ， 选的 包 信息 ：   optionalDependencies   。   包 信息 版本 符号 ， 含义 ：   符号   &# 94 ;   版本 都   符号   ~   小 版本 内的 升级   yarn   很多 人都 推荐 yarn npm ， yarn 基于 npm 包的 ， npm 很多 优点 ， 并发 网络 请求 ， 依赖 版本 优化 。   yarn windows 下也 提供 安装 包 ， 去   官网   上 下载 即可 。   yarn   yarn   init     npm   init   ， 初始化 一个 新 项目 ， 项目   package . json   文件 ，   yarn   install   。   yarn   add     npm   install   ， yarn   add   不 加上 选项 安装 dependencies ，     dev   npm   save - dev   ，   optional   npm   save - optional   。 yarn 还 多了 一个   peer   选项 ， 控制 字 段是   peerDependencies   ， 一种 依赖 ， 同伴 依赖 ， 发布 包的 。   yarn   upgrade   升级 包   yarn   remove   移除 包   yarn   install   安装 项目 依赖   假设 定义 npm   start 命令 ，   yarn   start 调用 。   模块 简介   谈了 模块 东西 ， 小节 进一步 介绍 node 模块 。   新建 一个 文件夹 mymodule ， 新建 一个   index . js   文件 。   index . js   文件 定义 一个 简单 函数 ：   导出 函数   外面 新建 一个   test _ mymodule . js   mymoudle 模块 ：   补充   简单 模块 创建 例子 中 默认   index . js   入口 新建   package . json   文件 设置   main   字段 属性 指定 入口 js 文件 。   模块 很 大型 ，   exports .   写法 不 太 合适 ， 设置   module . exports   对象 改进 。   发行 npm 包     npmjs .   上 申请 用户名 ：   adduser 过了 ：   ：   默认 发送 公开 模块 ， npm 付费 用户 发布 私有 模块 ：   \" private \" :   false   。   参考 资料   官方 文档 不 赘述 。   node . js 实战   图灵 设计 丛书   Node . js     action   阮 一峰 npm 文章   理解 exports 篇 文章   npx 教程",
            "tags":"javascript",
            "url":"articles/node-learning-notes.html"
        },
        {
            "title":"pycharm",
            "text":"前言   本文 列出 pycharm 过程 中 值得一提 小 技巧 。   上传 文件 服务器   原理 利用 sftp 上传 ， pycharm 大 环境 下 ， 确实 很 。 功能 只 pycharm 专业 版下 才 。   服务器 上 频繁 测试 工作 ， 有不 git 频繁 commit 情况 ， 先 测试 好 ， git 推送 。   设置 环境 远程 python 解释器   ：   ， 利用 pycharm 新建 一个 本地 虚拟 环境 ， pipenv 建立 环境 ， pycharm 会 自动 找到 ， 利用 python 虚拟 环境 ， 要讲 ， 还 设置 解释器 环境 远程 服务器 python 环境 ， 开发 调试 接近 程序 运行 时的 环境 。   ：   terminal 打开 一个 连接 远程 服务器 ssh 终端 ， 加上 设置 好 文件 upload 功能 ， 基本上 不 一个 额外 ssh 终端 连接 程序 。   讨论 都 基于 ssh 连接 ， ：   设置 好 ssh   server   连接 方式 。   正则表达式 替换   下 路径 替换 ， 点的 做 正则表达式 替换 ， 正则表达式 都很 熟悉 ， 不 多说 ， group 替换 ， 。   原 表达式   ( )   包围 想要 设定 group ， 表达式 引用 group （ 1 数 ） ，   \\ 1   \\ 2   ...   替换 表达式 引用 group 依次   $ 1   $ 2   ...   更 内容 请 参看 官方 文档     。",
            "tags":"editor",
            "url":"articles/pycharm-editor.html"
        },
        {
            "title":"python语言学习之cookbook",
            "text":"前言   本文 列出 笔者 学习 实践 python 中 接触 到的 小 技巧 ， 小 知识点 ， 汇总 整理 。   核心 内置   利用 int 函数 进位 转换   int 函数 用于 强制 类型 转换 ， 一个 类 数值 字符串 integer ， 函数 还 隐藏 一个 强大 功能 ， 第二个 可选 参数 ， 进位 制 。   效果 一个 十六 进制 字符 十六 进制 输出 一个 十进制 数值 。 需求 地方 别用 eval 。   assert 语句   assert 语句 简单 理解   assert   True   ， 刷 ，   assert   False   将抛 出   AssertionError   。   assert 语句 实际上 一个 语句 ， 程序员 编码 一种 防御型 编码 风格 ， 编码 规范 ， 重要性 更 高一 等级 编码 风格 ， 一种 思维 方式 。   防御型 编码 风格 ， 简言之 编码 ， 即将 面对 数据 类型 预期 。 比如说   _   函数 一个 判断 输入 整数 是否是 偶数 函数 ， 预期 输入 数值 一个 整数 ， 加上   assert   isinstance ( x ,   int )   ， 防御 输入 x 参数 类型 。 程序 运行 过程 中抛 出了 地方 assert 异常 ， 函数 实际上 在说 ， ， 是你 参数 出 ， 调用 方法 出了 。   防御型 编码 风格 一种 去 耦合 思维 ， 它和 编写 函数 去 耦合 思维 ， 防御型 编码 风格 当成 某种 规范 ， 当作 某种 额外 约束 工作 ， 编写 函数 思维 方式 。 去 观察 防御型 编码 风格 初学者 ， 会 发现 函数 分离 工作 做 得很 不好 ， 大段 代码 ， 参数 全局 变量 局部变量 都 乱七八糟 ， 代码 文件 混乱 不堪 。 还 会 嬉笑 道 ， 不 防御型 编码 ， ， 学过 。   assert 语句 相关 条件 判断 等抛 异常 语句 片段 都 防御型 编码 风格 ， assert 语句 ， 抛 出 异常 。 实际上 assert 语句 是在 抛 异常 ， assert 语句 抛 异常 语句 一个 很大 ：   assert 语句 设置 python 编译器 全局 跳 ， 下 。 要做 校验 ， 异常 语句 。   一般来说 项目 早期 写上 很多 assert 语句 ， 时间 充裕 很多 assert 语句 是要 替换 为抛 异常 语句 。   locals globals   python   locals ( )   返回 函数 内的 局部变量 字典 值 ，   globals ( )   返回 模块 文件 全局 变量 。   locals   只读 ，   globals ( )   ， 利用   globals ( )   脚本 文件 玩出 新 花样 。       运算 优先级   推荐 括号 清晰 表达 ， 优先级 。 再看 例子 :   例子 很 好地 优先级 顺序 ，   优先级 要高   。   关键词   python 语言 关键词 函数 ， 源码 很 简单 ， 列 ， 看 :   语言 表述 :   ， 都是 True ， 返回 True ， 返回 False   ， 一个 True 返回 True ， 返回 False 。   三元 运算 符   类似 结构 :   函数 入口 参数 默认 值的 情况 会 用到 ， 函数 参数 写着   loop = None   ， 一行 形式 更 简洁 。 不 函数 定义 采用 默认 值 两种 情况 ， 一是 默认 值并 不 默认 值 ， 默认 None ； 一种 情况 默认 值是 函数 运算 。   属性 管理 函数   hasattr ， setattr ， getattr ， delattr ， 函数 都 python 中 对象 属性 管理 函数 ， 其都 内置 函数 。   hasattr ( object ,   ) 检测 对象 有没有 属性 。 调用 getattr 方法 ， 稍 作 封装 。   setattr ( object ,   ,   ) 用于 设置 对象 属性 值 ，   setattr ( x , a , 3 )     x . a   =   3   语法 。   getattr ( object ,   [ ,   default ] ) 用于 取 对象 属性 值 ，   object .   语法 。   delattr ( object , ) 用于 删除 对象 属性 ，   del   object .   语法 。   __ __     __ file __   脚本 引入 是指 import 语句 一个 脚本 引入 进去 ， 脚本 执行 是指   python   test . py   形式 执行 py 脚本 。   两种 形式 很 区别 ， 慢慢 谈论 :   __ __   区别 。 很 熟悉 。 脚本 是被 引入 ，   __ __   值是 引入 脚本 文件名 ， 引入   test . py   ， 脚本 引入 ， test . py 文件 来说 ， 其内   __ __   值   test   ，   模块 名   ； 脚本 执行 ， 则该   __ __     __ main __   。   __ file __   区别 。 脚本 是被 执行 ， 假设 脚本 文件   . py   ， 执行 脚本 中 ，   __ file __   值是   . py   ，   文件名   。 是被 引用 ， 引入 脚本 来说 ，   __ file __   值是 引入 脚本 系统 来说   完整 文件名   ，   / home / wanze / 桌面 / . py   。   __ missing __   方法   字典 字典 子类 ， 定义   __ missing __   方法 回避 找 不到 键值 抛 出的   KeyError   ， 参考   网页   。 所示 :   找 不到 key ， 该类 会 自动 赋值 一个 新的   dict ( ) key 值 。 希望   type ( ) ( )   ， 风格 json 兼容性 不 太 好 ， 推荐 都用 dict 类 。   python 中类 继承 顺序   python 中 类的 搜索 顺序 是从 左 右的 ， ：   D 属性 是先 A 找 ， 再 B 找 。 类的 继承 概念 上 来说 ， A 类和 B 类 之间 层次 关系 ， 顺序 随便 都没 ， B 类是 更 底层 Base 类 ， 其是 放在 最 右边 。 Mixin 类中 写法 是要 示的 ：   字符串 大小   读者 实验 python 中 字符串 之间 大小 ：   特性 很 有用 ， 大小 ？ python 官方 文档 描述 ， 采用 词典 编纂 顺序 。 描述 信息 ：   序列 之间 大小 ， 两个 序列 第一个 元素 ， ， 下 一个 ， 一个 序列 穷尽 。 两个 序列 类型 都是 ， 过程 。 两个 序列 ， 一个 序列 一个 序列 子 序列 ， 短的 序列 长的 序列 要小 。 到每 一个 元素 大小 ， ASCII 顺序 。   中文 大小 ？   读者 会 想到 ， python 中 字符串 都 默认 unicode 编码 （ utf - 8 ） ， 中文 大小 ， 事实 确实 ：   感兴趣 读者 打开 字符 映射 表看 ， ' 张 ' unicode 编号 U + 5F20 ， 输入 0x5f20 ， 返回 正是 24352 。 输入 hex ( 24352 ) ， 返回 ' 0x5f20 ' 。   ord chr 函数   ord 函数 接受   一个 字符 ， 返回 unicode 编码 ， 十进制 。 chr 函数 ord 函数 反向 ， 输入 24352 十进制 uniocde ， 返回 字符 。   ， python3 字符串 大小 ， 基于 utf - 8 编码 。   字符串   format 函数   format 函数 或者说 字符串 format 方法 ， 很 简单 ， 高级 需求 ， 渐渐 收集 。   更 python 中 format 函数 信息 请 参考   pyformat . info   。   等宽 数字   目标 数字 宽度 两位 ， 左边 填充 0   ，   >   左边 填充 ，   0 >   左边 填充 0 ，   >   右边 填充 。   花 括号   花 括号 特殊字符 ， 显示 花 括号 ， 输入 两次 ：   f - string   python3.6 进来 特性 。 情况 ：   python 新的 format 字符串   等价   一个 变量 还好 ， 多个 变量 f - string 写法 好处 就很 ， 环境 下你 定义 变量 名是 ， 只能 一句 话来 形容 ， 太 好 用了 ， 用上 会停 不 。   字典   理解 字典 寻址   python 字典 key 判断 机制 ，   值     hash   值   才   key 。   key key 就不 做 改变 ， 值是 取 最新 。 正是 ， 字典 更新 语句 写法 可行 ：   最快 字典 更新 方式 。   文件   读取 文件 推荐 方式   文件 对象 本身 是可 迭代 ， 简单 迭代 文件 对象 文件 一行行 内容 操作 。 ：   代码 就将 打印 文件 ， end = \" 取消   \\ n   ， 行   \\ n   。   代码 稍 作 修改 一行 加上   > > >   符号 。   ？ 输出 终端 ， 文件 去 ， 行 ， 加上 file 参数 。 代码 ：   python 列表 解析 （ 迭代 ） 效率 是很 高的 ， 多用 列表 解析 模式 。   文件 对象 一个 readlines 方法 ， 一次性 文件 行 字符串 装入 一个 列表 中 。 再对 列表 解析 操作 文件 内容 做出 修改 。 不 推荐 readlines 方法 ， 文件 装入 内存 方法 内存 爆炸 风险 ， 迭代 版本 更好 一点 。   模块   获取 模块 对象   所示 ， 获取 模块 内的 变量 。   字符串 获取 模块 对象   检查 变量 模块 对象   参考   网页   有用 内置 模块   迭代 对象 flatten 操作   利用 abc 模块 抽象 基类   abc 模块 抽象 基类 ， 类似 java 中 抽象类 概念 。   所示 ：   抽象类 实例 化 ， 实例 化将 会报 错 。 继承 于它 类 ， 上 定义 抽象 方法 ， 继承 类 定义 好 方法 ， 会报 错 。   抽象类 定义 抽象 方法 动作 方法 。   抽象类 还 定义 抽象 属性 。   logging 中 pprint   参考   网页   。   logging 输出 希望 调用 pprint 输出 打印 美观 些 ， 调用 pformat 函数 效果 ：   利用 ast 模块 literal _ evel 函数 来更 eval   literal _ eval   函数 一个 有用 函数 ， 用于 短小 python 字符串 转化 成 python   object 。 所示 :   支持 python   object :   strings ,   bytes ,   numbers ,   tuples ,   lists ,   dicts ,   sets ,   booleans ,     None .   字符串   \\ \" 1 \\ \"   \\ \" 3.14 \\ \"   \\ \" [ 1 , 2 , 3 ] \\ \"   转化 integer   float   list 小菜 碟 。 建立 异常 捕捉 ， 转化 失败 ， 原样 返回 字符串 即可 。   利用 itertools 模块 product 函数 遍历 组合   product 函数   itertools   模块 ， 官方 文档 product ( A ,   B ) 返回 值 等价 ( ( x , y )     x     A     y     B ) ， 组合 情况 （ 类似 笛卡尔 积的 概念 ） :   单一 迭代 加上   repeat   参数 会 生成 很 有意思 :   看作 :   利用 collections 模块 deque 数据结构   小节 参考   网页   。   想 读者 接触 queue 结构 了吧 ， queue 结构 一端 进 data ， 一端 出 data ， 先进 先 出的 数据流 。 deque 结构 两端 都 进 两端 都 出 ， 看上 古怪 ， 只 一端 ， 好像 一个 堆栈 结构 ， 先进 后出 ； 一端 进 ， 一端 出 ， 好像 一个 queue 结构 。 优势 ？ deque 结构 优势 ， 原因 :   两端 插入 元素 删除 元素 时间 复杂度 O ( 1 ) ， 一个 常数 级 ， 列表 开头 插入 删除 元素 时间 复杂度 O ( N ) ， 一个 类似 列表 数据 存储 结构 ， 数据结构 中 ， 开头 几个 元素 末尾 几个 元素 都 ， 访问 ， deque 结构 。   网页 介绍 一个 函数 ， 用来 返回 一个 文件 几行 :   其是 利用 deque 一个 size 定长的 概念 ， 输入 队列 deque 时较 老的 元素 会被 丢弃 。 不 太 做法 效率 ， 写法 很 优雅 。   查找 多个 最小 元素 情况   想要 获知 数据 一个 最大值 一个 最小 值 ，   max     min   方法 。 讨论 情况 想要 获知 数据 多个 最大值 多个 最小 值 。 想到 先对 数据 排序 ， 切片 操作 。 参考 资料 2 第一章 第四节 讨论 方法 实际上 利用 最小 堆 结构 堆 排序 提出 最小 几个 元素 。   大体 过程 :   利用 collections 模块 Orderdict 类   字典 排序 需求 ， 有也 输出 再 排序 ， OrderedDict 字典 存储 开销 大了 一倍 ， 不用 不用 。 情况 下 ， 类 确实 带来 便利 。 第一次 情况 大体 是在 bilibili api 对接 ， 计算 密钥 参数 排序 urlencode 字符串 再 基于 字符串 计算 。   大体 情况 下 ， 字典 值 变量 顺序 输出 ， OrderedDict 很 便利 。 顺序 插入 顺序 来的 ， 要做 字典 排序 工作 ， 看作 一个 自动 某种 操作 便捷 对象 。   Counter 类   Counter 类是 真 有用 ， 还 好用 。 例子 来自 参考 资料 2 ， 不 多说 ， 代码 大体 :   Counter   对象 字典 子类 ， 字典 方法 它都 ， 不 赘述 。   update   方法 理解 为同 key 之间 加法 ，     subtract   方法 看作 key 之间 减法 。 还 做 :   加减 运算 提及   update   方法   subtract   方法 区别 ， 加法 大体 类似 ， 减法 将会 自动 去掉 计数 小于 等于 零的 项 ，   subtract   方法 。   数据结构 最为 数值 统计 频数 ， 调用   _ common ( n )   方法 ， n 排行榜 前 n 名 。   利用 collections 模块 namedtuple   collections 模块 namedtuple 函数 将会 一个 名字 数组 类 （ 有名 数组 ） ， 类 新建 类似 实例 。 ：   构建 一个 dataclass 类   python3.7 新 dataclass 类是 一个 很 有用 特性 ， 代码 中的 函数 之间 传输 特定 数据 ， 构建 一个 dataclass 类 ：   大致 效果 等于 ：   编写 dataclass 类 是让 项目 代码 数据 定义 清晰 化 。   configparse 特殊字符   configparse 特殊字符 会报 错 ， 参考     ， 推荐   RawConfigParser   ， 解决问题 。   利用 collections 模块 ChainMap 定义 搜索 过程   多个 字典 组合 一个 map 字典 ， 想到 一个 配置 字典 流 ， 利用 ChainMap 定义 搜索 路 径流 ， 先 搜索 到的 配置 优先 取用 。   typing . NamedTuple   类 添加 python3.6 ，   collections . namedtuple   类似 。   不 赞同 达恩 · 巴 德尔 观点 — — 推荐 typing . NamedTuple   ， namedtuple 优势 区分 字典 ， 两个 ： ， key 变 ； 二 ， 轻量级 。 情况 下 namedtuple 优于 字典 。 采用 类的 写法 ， 换了 一个 情景 ， 情境 下 ， NamedTuple dict 都不 太 合适 ， 而类 第一 公民 。   queue . PriorityQueue   queue . PriorityQueue   内部 基于 heapq 堆 排序 ， 额外 做 ， 保证 操作 线程 。 一般来说 一个 优先级 队列 ， 推荐   PriorityQueue ：   queue . Queue   线程 先进 先出 【 队列 操作 】 数据结构 。   queue . LifoQueue   线程 后进 先出 【 栈 操作 】 数据结构 。   multiprocessing . Queue   跨 进程 先进 先出 队列 数据结构 ：   有用 第三方 模块   获取 一个月   要说 利用 python datetime timedelta   days   加减 操作 很 好地 支持 跨 月 :   获知 月份 30 31 ， 利用 replace 一个月 。 利用   calendar     monthrange   函数 。 参考   网页   。   附录   列出 技巧 。   对象 动态 加载 一个 方法   参考   网页   。   原理 很 简单 ， 构建 一个 函数 对象 ， 对象 赋值 对象 。 函数 对象 接受 参数 ， 类的 方法 。   types . MethodType 用来 构建 一个 类的 方法 ， 第一个 参数 函数 对象 ， 第二个 参数 类或 实例 。   例子 优化 形式 :   addMethod 作用 于本 类的 ， 选择 作用 于本 实例 :   函数 只 加在 实例 ， 用处 不 太 大 。",
            "tags":"python_language",
            "url":"articles/python-cookbook.html"
        },
        {
            "title":"react学习笔记",
            "text":"前言   react 初学者 实在 不 建议 过早 涉及   create - react - app   引入 工具 链 ， 推荐 先在 html 上用 ， react 用的 感觉 时间 再 慢慢 优化 工具 链 。   react html 一个 简单 javascript 库来 ， 创建 html 组件 ， 更 DOM 操作 ， 实际上 react 很 好学 。   入门 例子   react html 上的 利用 一个 简单 入门 例子 所示 ， babel 库很 有用 ， 推荐 入手 加上 ， 老 旧的 浏览器 上也 编写 最新 es6 代码 ， 提供 jsx 支持 。 jsx 一种 javascript html 混合 模板 语言 ， 再 讨论 。   采用 es6 类的 写法 ， 继承 React . Component ， 简单 来说 定义 一个 dom 操作 组件 ，   App   。 该类 一个   render   方法 ，   render   方法 返回 html 标签 写法 提到 jsx 写法 ， render 方法 返回 React 元素 。   一句 是在 html container 渲染 React 元素 。   JSX 简介   JSX 初 看起来 一种 html ， 其内 更 接近 javascript 。 类似 jinja2 模板 引擎 ， 调用 javascript 代码 。   javascript 函数 属性 点 引用 等都 执行 。   JSX 还 支持 React 元素 标签 写入 进来 ， ：   Welcome 一个 react 组件 ， 其也 写入 JSX 。   JSX 中原 html 属性 名字 class 写为   className   。   一个 实时 更新 时钟 例子   例子 介绍 react 很多 核心 概念 ， 特别 ， 继 入门 例子 第二个 教学 例子 是很 合适 。   class 组件   ES6 class 定义 一个 react 里的 组件 。   constructor 构造 函数 必 接受 一个 props 参数 ， 组件 跟着 属性 值将 传递 进来 。 简单 情况 利用 javascript 函数 创建 一个 函数 组件 。   例子 创建 一个 class 组件 。   函数 组件   函数 区别 接受 第一个 参数 必 props 参数 。   JAX 中 react 会把 小写 字母 开头 标签 视作 html 原生 标签 ， 而将 大写字母 开头 视作 react 组件 。   组件 state   组件 state 一个 javascript 对象 ， 存储 值 ， 值 组件 状态 量 。 state 值在 react 中 会有 用途 。 调用 组件   setState   方法 修改 【 只能 setState 方法 才会 】 state 值 ， 组件 是会 渲染 。   componentDidMount   方法 动作 会在 组件 渲染 DOM 再 执行 。   例子 中做 开启 一个 计时器 动作 。   componentWillUnmount   方法 动作 会在 组件 即将 卸载 执行 。   例子 中做 是将 目标 计时器 移除 。   AJAX 请求   fetch 方法 请求 即可 ， 请求 动作 挂在   componentDidMount   方法 。 获取 数据   setState   方法 数据 更新 到本 组件 状态 信息 中 去 。   参考 资料   react 官方 教程 资料   electron - react - boilerplate 项目   - started - - react",
            "tags":"html5",
            "url":"articles/react-learning-notes.html"
        },
        {
            "title":"sql数据库学习之cookbook",
            "text":"前言   列出 日常 操作 案例 ， 参考 学习 ， 触类旁通 学习 下 SQL 高级 知识 。   条件 删除 表格 重复 行   句 话的 删除 news 表格 中 url 重复 行 ， 删除 id 小的 行 （ T1 . id <   T2 . id ）   delete 语句 说 简单 点 子句 表格 ， 类似 select ； 说 点 是本 表格 ， 连接 - join 。   join 简单 理解   ( a , b )   *   ( a ,   b )   = >   a   a   ,   a   b   ,   b   a   ,   b   b   SQL 表格 笛卡尔 乘积 组合 再 基于 给定 条件 过滤 。   delete   ...     ...   参考   postgresql 文档   表格 名字 - join ， 而本 表格 表格   join 组合 过滤 过滤 ， 举个 例子 会 清晰 一点 ：   id   url   1   a   2   b   3   a   - join 后 组合 ：   再 过滤 ， url 行     id 小 一点   T1     1   a   一行 ， 执行 delete 操作 删掉 。   - join 情况 重复 行的 过滤 ，   T1 . id   < =   T2 . id   会将 表格 删掉 。   表格 字 段值 更新 表格   参考 postgresql 官方 文档 ， update ... ...   类似   select   _ list   table ， 是本 表格     join 。     join update 操作 引用 表格 值的 。   快速 检查 一行   参考   网页   ， 所示 ：   值得一提的是 ， python SQL 数据库 通用 DB2 接口 ， pymysql psycopg2 查询 python bool 对象 ， True False ， exists 函数 。",
            "tags":"SQL",
            "url":"articles/sql-database-cookbook.html"
        },
        {
            "title":"texmaker",
            "text":"texmaker 是我 很 喜爱 编写 tex 文档 时 编辑器 ， 配置 都是 直观 易用 ， 本文 列出 读者 不 小 技巧 。   善用 向导 菜单   向导 名字 误导 ， 人 向导 功能 。 向导 菜单 功能 都很 有用 ， 提供 对话框 选项 功能 快速 生成 tex 代码 片段 ， 表格 向导 一个 快速 生成 表格 tex 代码 工具 ， 很 好用 。   定义 快速 输入 片段   定义 菜单 定义 标签 ， 选择 编辑 定义 标签 ， LaTex 内容 输入 tex 代码 片段 ， 一个 表达 ：   % Verbatim   将会 展开 ：     •   符号 ， 占位 符 ， 代码 片段 输出 文档 中的 光标 将会 。 不用   % Verbatim   表达 写上 tex 代码 片段 效果 都是 。   •   符号 写作   @   。   定义 标签 快捷 键   Shift + F1   。   左边 面板 栏自 定义 ， 定义 任意 数量 代码 片段 ， 写法 讨论 类似 ， 快捷 键 ， 支持 一种 风格 快捷 输入 ， 写上 ：   按键 写上   framed   ， 则你 文档 中 输入   : framed   ， 下 方向 键   - >   ， 代码 片段 就会 自动 展开 ， 很 。",
            "tags":"editor",
            "url":"articles/texmaker-editor.html"
        },
        {
            "title":"visual_studio",
            "text":"前言   本文 列出 visual _ studio 过程 中 值得一提 小 技巧 。   文档 格式化   visual   studio   是有 文档 格式化 功能 ， 藏得 深 。 选择   工具 - > 选项 - > 环境 - > 键盘   ， 搜索 关键词   格式   ， 相关 ：   编辑 . 设置 文档 格式   ， 默认 快捷 键是   Ctrl + k   Ctrl + d   ， 文档 自动 格式化 。   编辑 . 设置 选定 内容 格式 ， 默认 快捷 键是   Ctrl + k   Ctrl + f   ， 选中 内容 自动 格式化 。   解决 方案 多个 项目   一个 解决 方案 下 一个 项目 内 C 语言 编码 是只 一个   main   函数 ， 多个   main   函数 ， 解决 方案 下再 新建 一个 项目 。   多个 项目 之间 启动 调试 切换 选择 项目 ， 右键 选择   设为 启动 项目   。",
            "tags":"editor",
            "url":"articles/visual-studio-editor.html"
        },
        {
            "title":"nltk学习笔记",
            "text":"前言   nltk 一个 很 有用 自然语言 研究 学习 支持 性 python 模块 。   安装   nltk python 模块 安装 好说 ， 还 安装   nltk _ data   ， 运行 ：   即可 ， 手工 配置 。 搜索 路径 配置 ：   内容   nltk _ data   github 项目 中 找到 。 内容 packages ， corpora 内容 是不 zip 解压 ， 先 解压 再 放好 位置 。   语 料库 管理   nltk 语 料库 管理 重点 ， 提供 语 料库 接口 值得 学习 ， 比如说 ：   gutenberg 利用   PlaintextCorpusReader   类 。   利用 类来 加载 txt 文本 ， 中文 定义 Tokenizer 类 。 一个 简单 类 所示 ：   tokenize 方法 ， 切分 字符串 返回 列表 。   中文 分句 一个 简单 利用 正则表达式 切分 ：   combine _ odd _ 定义 一个 方法 ， 列表 奇偶 元素 相加 ， 讨论 重点 ， 略过 。   定义   load _ corpus   加载 txt 语料 ：   root 指向 语 料库的 文件夹 即可 ， 放着 txt 文本 。   利用 nltk Text 类来 加载 语料 分析 。   上 官方 教材 叙述 。   语 料库 接口   下调 用语 料库的 原始 文本 ， 利用 设置 word _ tokenizer 分词 后的 词语 列表 ， 利用 设置 _ tokenizer 分句 句子 列表 。   Text 接口   concordance   索引 词   similar   词 环境 来找 词   common _ contexts   两个 词 之间 词 环境   generater   上下文 随机 生成 文本 。   collocations   原 nltk Text 类 方法 针对 英文 ， 写 一个 ChineseText 类 继承 重载 方法 ：   修改 是原 过滤器 过滤 词语 长度 ， 不 适合 中文 。 停 用词 换成 中文 停 用词 词库 。 增加 一个 空白 字符 去除 动作 。   评估 二元 语法 组 得分 用的   bigram _ measures . likelihood _ ratio   算法 。 兴趣 研究 ， 暂时 略过 。   FreqDist   很 有用 一个 类 ， 继承 Counter 类 ， 用于 记数 一个 字典 。 统计 老子 最 常用 词语 。   空 字符 过滤 停 用词 过滤 。   bigrams   自然语言 研究 中的 n 元 语法 模型 中的 二元 语法 ：   ConditionalFreqDist   其是 一个 字典 套 字典 结构 ， 第一个 字典 key 条件 ， 再 引用 条件   cfd [ condition ]   返回 一个 FreqDist 对象 。 更 具体来说 用来 存储 条件 下的 FreqDist 分布 。   标注   str2tuple   POS （ part     speech ） 标注 标注 都 采用   word / tag   格式 ， 利用   str2tuple   函数 拆分 。   通用 POS 标注 集   Tag   Meaning   English   Examples   ADJ   adjective   ,   good ,   high ,   special ,   big ,   local   ADP   adposition   ,   ,   ,   ,   ,   ,     ADV   adverb   ,   ,   ,   early ,     CONJ   conjunction   ,   ,   ,   ,   ,     DET   determiner ,   article   ,   a ,   ,   ,   ,   ,     NOUN   noun   year ,   home ,   costs ,   time ,   Africa   NUM   numeral   twenty - ,   fourth ,   1991 ,   14 : 24   PRT   particle   ,   ,   ,     ,   ,   ,     PRON   pronoun   ,   ,   ,   ,   ,   I ,     VERB   verb   ,   ,   told ,   ,   playing ,     .   punctuation   marks   .   ,   ;   !   X     ersatz ,   esprit ,   dunno ,   gr8 ,   univeristy   Index 类   Index 类是 一个 默认 列表 defaultdict 类 ， 用来 构建 多值 字典 。",
            "tags":"nlp",
            "url":"articles/nltk-learning-notes.html"
        },
        {
            "title":"2020随笔",
            "text":"11 - 3   人 子当 内修 己身 ， 天人感应 ， 细察 万物 。 则可 听 天言 。   10 - 27   东西 都有 成住 坏 空的 规律 ， 东西 败坏 之时 修修补补 用的 。 社会 经济 角度 出发 ， GDP 角度 出发 ， 是对 人类 社会 来说 最 省钱 方式 。 省钱 意味着 提高 社会 总 财富 积累 ， 流动 GDP 。 人类 社会 要有 医院 ， 老东西 不 修不 补 来的 余钱 生产 新的 东西 ？   早晚 刷牙 ， 牙疼 真 要命 。   熬夜 ， 熬夜 会让 身体 气血 ， 免疫力 低下 ， 疾病 就会 到来 。   10 - 5   合乎 天道 君王 ， 自知 国家 财力 有限 ， 国家 财力 内 ， 学校 只 分为 两类 ， 一类 二类 。 一类 面向 学术 ， 二类 面向 专职 。 各类 学校 师资 物资 都是 平均 分配 ， 年内 教师 轮流 学校 教授 ， 学校 物资 招生数 平均 分配 。   智慧 君王 ， 深知 大禹治水 在于 疏 不 在于 堵 道理 ， 治下 ， 网络 自由 。   开放 君王 ， 管理 下 看不到 门前 威严 吓人 狮子 ， 门厅 大开 服务 机构 。   合乎 人 道的 君王 ， 富人 会交 更 多的 税收 ， 遗产 税也 顺利 执行 。   天命 归的 君王 ， 治下 ， 将会 一个 人才辈出 时代 ， 众星 拱 月 ， 何其 盛 。   10 - 3   是受 人 鄙视 看不起 应急 情绪 动力 ， 不 。 上天 。   8 - 23   不必 忧愁 ， 孤独 自有 上天 护佑 。   8 - 4   头条 上 写了 一篇 周易 预测 文章 ， 头条 上被 封禁 。 一脸 共 国舔 狗的 样子 ， 而今 美国 封禁 ， 都在 骂 软弱 。 要说 句 公道话 ， 报应 封的 好 。 头条 这家 公司 不仅仅 涉及 国家 ， 内部 审查 人权 自由 践踏 舆论 民情 控制 是每 一个 民主 国家 都要 引以为戒 。   中国 精英 词今 时已 熟知 ， 何者 才 称得上 中国 精英 。 精英 一词 绝不 是指 此人 技术 技艺 上 某种 境界 ， 指 政府 不错 企业 管理层 。 精英 孟子 口中 劳心 。 劳心 者治 人 ， 精英 人 管理 人 ， 人是 连动 脑子 。 管理 一个 技艺 优秀 领导力 决策 能力 民众 信服 能力 ， 今日 中国 精英 词更 多的 一个 标签 ， 一个 任职 上的 。 今日 中国 精英 说白了 封建 帝制 劳心 。   总 人 希望 创造 新的 词汇 主义 掩盖 几千年 历史 真相 ， 精英 ， 贵族 ， 说 都 扯淡 ， 倒不如 鲁迅 说的 实在 ， 吃 人的 吃的 ； 劳心 的和 劳力 ； 治人的 治的 。   人 掩盖 事实 ， 过往 思想家 描述 事实 ， 天道 运行 有常 不 在意 ， 少许 贤人 善 善恶 恶 天命 佑之 ， 要说 ， 要说 。   阶层 好坏 定义 都 脱离 不了 时代 ， 精英 ， 贵族 ， 劳心 ， 治人者 。 时代 历史 格调 定 ， 顶层 阶级 性质 定 。 君子 善 善恶 恶 是因为 天道 善心 ， 能得 天佑 ， 能保 半身 周全 。 没 修 为的 半个 圣人 曾国藩 ， 屠夫 。   8 - 2   天道 无 亲 ， 常与 善人 ， 常罚 恶人 。   周易 预测 知天命 ， 天道 有常 然 天命 无常 ， 人 子 善恶 念皆 改 命 。 易者 不可不 牢记 心 ！   王阳明 ： \" 人 得好 善如 好好 色 ， 恶恶 恶 恶臭 ， 便是 圣人 。 \"   善 善恶 恶 ， 更 多的 道理 ， 看 。   文天祥 从容就义 贞德 ， 贞德 简言之 人的 正气 。 天地人 以人 为重 ， 然 态 。 形式 下 ， 天地 太和 气不 调 ， 人 坚守 正气 不 吉利 。 贞 值得 夸奖 人的 美德 ， 不合 天道 ， 此亦 非 善也 。   王阳明 ： 交朋友 ， 谦下 受益 ； 攀比 争上 ， 受损 。   善去 恶 格物   — —   中国 科学 在于 人心 善不 立恶 不 。   几千年 人类 历史 ， 还 古罗马 一位 哲学家 言 ， 太阳 底下 没 新鲜事 。 主义 理论 ， 都 新鲜事 ， 老 腔老 调看 世界 ， 看的 一本 透彻 。   7 - 31   天 言为 尊 ， 己言 为重 ， 人 言为 轻 。   7 - 30   8 小时 工作制 内在 逻辑 人 分配 生存 时间 不 超过 分配 生活 时间 。 减去 8 小时 睡眠 剩下 16 小时 除以 2 ， 8 小时 工作制 一个 死 命令 ， 定 一个 底线 ， 不 再 超过 。 工作 时间 8 小时 区间 。 凡 违反 8 小时 工作制 企业 ， 单位 国家 ， 实际上 都 暗含 人的 不 尊重 ， 人 何以 为人 不 尊重 ， 人 不仅仅 生存 ， 人是 一个 生活 动物 。 正是 暗含 ， 潜 规则 ， 见 光的 肮脏 不足为怪 ， 理解 。   马克思 八 小时 工作制 工人阶级 解放 一个 必要条件 ， \" 条件 ， 进一步 谋求 改善 工人 状况 解放 工人 尝试 ， 都将 失败 。 \"   1866 年 第一国际 日内瓦 代表大会 马克思 建议 《 缩短 工作日 决议 。   1889 年 7 月 14 日 第二国际 第一次 大会 上 ， 法国 代表 拉文 提议 ： 1886 年 5 月 1 日 美国 工人 八 小时 工作制 斗争 日 ， 定为 国际 无产阶级 节日 。   996 多么 倒行逆施 ， 8 小时 工作制 解放 黑奴 宣言 基本上 时期 ， 文明 社会 角落 容忍 黑奴 ， 还 企业 ， 资本家 公然 宣称 996 福报 。 996 多么 倒行逆施 。 地球 上有 很多 国家 ， 国家 很多 节日 ， 一个 节日 国家 都 ， 五一 劳动节 ， 五一 劳动节 最 斗争 根源 八 小时 工作制 。 还 解放 黑奴 争论不休 ， 8 小时 工作制 基本上 一个 共识 ， 宣称 996 福报 ， 下 历史 ， 人 言论 历史 上是 定位 。   7 - 26   人类 社会 来说 金钱 好比 血液 ， 资本 逐 利则 血液 流动 推动力 。 大众 好比 细胞 ， 工作 血液 流动 中分 一杯 羹 养活 。 科技 创新 种种 最终 都将 细化 落地 为某 一项 生意 ， 这项 生意 中 资本 赚取 更 多的 利润 ， 称之为 生产力 提升 ， 称之为 社会 ， 资本家 财富 积累 ， 统计 GDP 数值 就会 增加 ， 宣称 社会 经济 增长 。   资本主义 经济社会 运作 一个 大的 前提 ， 要有 赚钱 生意 ， 一门 生意 来说 吸收 资本 能力 有限 ， 好比 人体 器官 ， 只 血液 ， 多了 塞 不下 。 资本主义 经济社会 发展 后期 赚钱 生意 都被 挖掘 开发 完 ， 都 处于 一种 饱和 状态 。 情况 下 ， 社会 会 资金 ， 称之为 血管 血液 ， 资金 到处 都找 不到 赚钱 生意 ， 只好 停滞 ， 社会 财富 增长 速度 没 快了 ， 快 停滞 ， 称之为 经济 停滞 。   谈论 当今 世界 经济 会 提到 科技 趋于 平缓 ， 环境 ， 能源 ， 石油 再生 资源 。 实际上 就算 再 只 会 经济 衰退 ， 经济 停滞 。 末世 很多 赚钱 好 生意 ， 社会 生产力 越来越 低下 ， 社会 钱 整体 变得 不 值钱 。 经济 衰退 看做 身体 血液 里 营养 水平 过低 ， 经济 停滞 看做 身体 血液 阻塞 停滞 流动 。   经济 停滞 社会 谈论 经济危机 ， 河里 倾倒 牛奶 ， 大面积 失业 现象 。 就算 是最 经济危机 下 ， 社会 足够 生产 造血 能力 ， 血液 不 流动 经济 系统 陷入 崩溃 。   社会 意义 上 来说 还 经济 衰退期 ， 很多 都 夸大其词 局部 小 。 真的 如同 预想 全球 环境 恶化 石油 资源 调节 缺失 ， 全球 经济 衰退 ， 基本上 是谁 拯救 不了 。   经济 停滞 社会 经济学 提出 很多 方法 ， 说 弄 经济 手段 都弄 ， 很 告诉 ， 世界 最 违背 规律 易 ， 变化 。 指望 一个 经济社会 永远 增长 不 现实 ， 如同 植物 生长 成熟 ， 一个 社会 经济 最终 会 走向 成熟 ， 一个 成熟 经济社会 ， 面对 经济 停滞 ， 社会 资金 血液 停滞 ， 不 流动 。   人对 社会 财富 积累 批判 ， 批判 是有 道理 ， 批判 提出 解决 方案 更 多的 试着 延长 经济社会 到达 成熟 态的 时间 ， 解决 方案 ， 相关 很多 措施 值得 去 实施 执行 。 建议 基本上 都 公认 政治 正确 ， 还 大面积 推广 实施 。 ：   财产 遗产 税   经济社会 通货膨胀率 稀释 富人 财富 积累   富人 承担 更 多的 社会 税收   7 - 24   王朝 都 走入 兴衰 更替 规律 是因为 其内 价值观 崩坏 ， 一个 设计 制度 本质 一种 价值观 ， 制度 下 人员 义务 责任 界定 。 价值观 初是 信仰 ， 后是 遮羞布 ， 遮羞布 ， 为政 者也 懒得 谈论 ， 谈论 流于形式 ， 为证 朝者 违反 条 价值观 ， 那条 价值观 就会 ， 长此以往 ， 王朝 衰亡 加速 通道 。   7 - 21   不 热爱 东西 ， 东西 。 不 热爱 份 工作 ， 份 工作 。   7 - 19   外人 看 外表 ， 容貌 易老 内心 。   6 - 26   羡慕 生活 ， 基于 生活 现状 预测 未来 更好 ， 事实上 ， 怀疑 真的 有谁 预测 未来 。 焦虑 情绪 很 糟糕 ， 焦虑 情绪 下 预测 到的 未来 很 糟糕 。 羡慕 生活 本质 免于 焦虑 情绪 ， 未来 ， 预测 在乎 。 免于 焦虑 情绪 ， 君王 乞丐 生活 看 不 出 区别 。   5 - 20   \" 无巧不成书 。 \" 常见 俗语 里有 大 智慧 ， 值得 反复 思考 。   \" 先写 ， 再写 好 。 \"   学习 别人 写得 要素 ， 要素 组合 ， 称之为 美的 组合 术 。   5 - 1   人再 孤独 ， 都 一个 朋友 ， 朋友 。   4 - 28   当多 谈论 些 天人感应 ， 少谈 些 周易 预测 。 周易 预测 是术 ， 术 自得其乐 授之 ， 天人感应 才是 周易 预测 ， 天人感应 就算 术也 无 咎矣 ， 失了 而独 谈论 术 ， 危险 。   4 - 12   人 子的 生活 本身 一种 创造 ， 天人合一 ， 如同 上天 创造 生活 。   4 - 7   心即 是理 ， 心 私欲 阻隔 ， 便是 天理 。 — — 王阳明   【 批判 参考 】   终极 — — 到你 造物主 — — ， 去 创造 。 去 创造 ， 才能 经验 到你 造物主 。 — — 《 神 对话 【 批判 参考 】   4 - 6   小说家 来说 一个 追求 作品 都 一个 世界 一个 世界观 中 。   【 银河 帝国 前 两部 观感 】   去掉 标签 崇拜 因素 ， 单从 作品 本身 角度 来说 ， 阅读 体验 来说 故事 太 过于 碎片 化 ， 情节 对话 推动 ， 文学 角度 来说 作者 文学 功力 还 很 稚嫩 。 长篇 还 没 看 ， 也许 会 改观 ， 时间 ， 读 过的 两部 来说 ， 只能 说打 70 分 ， 读 。   说到 基地 心理 史学 推演 是种 宿命论 ， 科幻 作品 本质 上仍 文学 作品 ， 科幻 因素 表现 文学 作品 主题 加上 去的 ， 说 科幻 科幻 ， 主题 无关 科幻 甜点 ， 加多了 反而 会 坏了 菜的 味道 ， 加 少量 调剂 入 不了 读者 内心 。 浸透 读者 内心 久久 忘怀 科幻 创新 是和 文学 作品 主题 相互 相 成的 。   4 - 5   对比 国外 新闻 网站 ， 大 纪元 网站 有失 偏颇 ， 明眼人 一眼 就看 ， 网站 不 做 过多 讨论 。 美国之音 网站 新闻 大概 有失 偏颇 ， 有失 偏颇 更 多的 是因为 站在 美国 立场 上 ， 有失 偏颇 国内 新闻 网站 有失 偏颇 是站在 国内 立场 上是 等同 ， 接受 。 BBC 新闻 华尔街日报 阅读 发现 两个 网站 新闻 站在 美国 立场 上 站在 英国 立场 上很 那种 文章 ， 两个 网站 国内 网络 监察 封杀 国内 网络 监察 更 多的 针对 内容 中共 控制 。 网站 自我 内容 审查 ， facebook youtube 内部 内容 审查 ， 不 接受 中共 控制 ， 其也 中共 网络 监察 封杀 。 类比 梵蒂冈 基督教 不 接受 中共 教 区长 任命 指派 ， 基督教 是被 中共 打压 状态 ， 中共 控制 东西 本性 都是 不好 。   凡事 皆 可不 。   4 - 4   大部分 人 来说 ， 逝者 点上 一支 蜡烛 作出 形式 仪式 都是 ， 生活 中 多行 善 对人 少做 恶 则是 极其 困难 。 想 上天 肯定 愚蠢 仪式 形式 欺骗 ， 善恶 赏罚 高明 糊弄 。 世界 愚蠢 邪恶 从来 都 改变 ， 突发 事件 ， 人的 愚蠢 邪恶 ， 影响 。 少谈 点这 类 废话 ， 冷冷地 看着 微笑 好 。   4 - 2   人 身上 某种 神性 ， 神性 来自 宇宙 本身 ， 人 归根结底 宇宙 一部分 ， 神性 人和 宇宙 某种 律动 需求 。 中国 人更 熟悉 词汇 那种 天人合一 精神 需求 。   机器学习 算法 都 给定 一个 标签 ， 就算 将来 高级 机器人 智能 算法 ， 给定 机器人 一个 目的 。 机器人 动物 某种 目的 效益 等就 解释 ， 设计 多种 机器 智能 类似 动物 。 人和 机器 智能 区别 在于 人能 创造 ， 创造 局限 数据 层面 层面 创造 ， 将来 几千年 后的 机器 智能 算法 模拟 。 最 核心 区别 ， 人 创造 意义 ， 机器 智能 困难 ， 未来 几万年 更 远 未来 ， 机器 智能 创造 意义 ， 请让 人类 公民 身份 ， 人的 智能 无 区别 ， ， 神性了 ， 宇宙 上 天大 计划 一部分 。   正是 人的 智能 创造 意义 ， 更 具体来说 ， 目的 追寻 ， 目的 本身 意味着 意义 ， 基于 天人合一 内在 精神 需求 ， 宇宙 发展 角度 出发 ， 某种 美学 角度 出发 ， 更 底层 不 谈及 不 自觉 大脑 活动 ， 创造 活动 ， 最小 理念 模版 ， 起源 原型 ， 变种 原型 再 加工 再 创造 ， 内在 精神 需求 — — 是在 看起来 最 现实主义 人 身上 不 例外 — — 都 人 谈及 神性 。   4 - 1   故事 故事 实在 是有 道理 ， 历史 故事 科幻 小说 ， 剖开 本质 ， 会 发现 过往 诸多 事才 事的 内核 。 小说 故事 相 梦 来说 更 清晰 连贯 ， 本质 都是 ， 过往 诸多 事 要素 再 整理 再 创造 。 西 莫夫 《 银河 帝国 书的 心理 史学 历史 标的 ， 脱离 不了 现有 历史 发展 模式 。 第一篇 有太 苏格拉底 论辩 痕迹 ， 后续 发展 类比 基督教 黑暗 中世纪 历史 。   人的 创造 活动 要素 都 先起 始于 一个 现实 中 原型 ， 再 修改 加工 ， 解构 重组 。 后续 工作 ， 最 起源 原型 变种 类似 进化 树 ， 变异 创造 活动 作者 世界观 架构 中都 变种 作者 创造 世界 中 融洽 。   谈及 现实 原型 更 确切 表述 起源 原型 ， 就最 原型 人的 创造 。 不 变种 创造 多出 某种 现实性 。 现实 评判 约束 人的 创造 活动 是不 理解 人的 创造 活动 ， 现实 转眼 逝的 特性 显得 很 之外 ， 理解 现实 本身 是要 人的 创造 能力 上的 。   起源 原型 很多 便利 ： 更 易于 别人 接受 ， 创造 消耗 精力 较少 基本上 外在 世界 现有 原型 中 抽取 而成 ， 外在 世界 本身 一个 融洽 体系 ， 起源 原型 内部 组件 融洽 。   起源 原型 再 创造 变种 原型 一个 很 消耗 精力 活动 ， 做 不好 会不 别人 接受 ， 内部 组件 很 难 融洽 协调 。 创造 一个 成功 变种 原型 会是 一件 很 事 ， 不 避讳 词 ， 创造 正是 人之 人的 之处 。   一个 世界 设计 显露 出 世界 运动 目的 方向 ， 世界 意义 启迪 。 深信 现有 世界 某种 purpose 。   3 - 30   阅读 西 莫夫 《 银河 帝国 ， 提到 多个 行星 会 自转 速率 ， 而也 日夜 颠倒 ， 一律 采用 银河 标准 时间 。 同意 多个 行星 间将 会 采用 某种 银河 标准 时间 ， 具体来说 地球 纪年 法将 会是 全 地球 文明 圈 通用 ， 不 会 日夜 颠倒 ， 天的 概念 会 遵从 当地 标准 ，   多个 行星 中 会 采用 历法   。   3 - 23   人 寻求 快乐 本性 ， 这本 好说 。 智慧 则是 去 追求 ， 追求 说的 更 直白 一点 追求 无 痛苦 。   生活 道路 ， 保证 某种 光荣 结局 ， 由此 出发 ， 深刻 轻浮 ， 方向 ， 都是 人 。   人为 过往 纠结 都是 愚蠢 ， 智慧 思绪 只 在于 未来 无 痛苦 ， 快乐 痛苦 都 ， 为你 负 全责 ， 能再 提出 半点 责难 。 说到 处境 ， 清晰 审慎 现有 ， 坦然 接受 加诸 身的 运命 ， 例外 。   温故而知新 ， 为师 。 — — 孔子 谈 学习   3 - 18   谈论 自由 ， 更 多的 源于 不 自由 ； 谈论 自由 意志 ， 更 多的 源于 不得不 遵从 意志 。 言语 命令 ； 欲念 本能 ， 称得上 自由 意志 。   上天 无所不知 无所不能 ， 是好 坏 ， 容忍 得了 人的 无边 自由 意志 ， 如果说 上天 容许 得了 少许 人的 自由 意志 ， 无关紧要 。 智者 努力 聆听 上天 言语 遵从 上天 意志 ， 无非 自保 求 多福 。 善恶 也许 只 人的 念 之间 ， 都逃 上天 眼睛 管理 。   言语 分为 三种 ： 天言 ， 己言 ， 人言 。 人言 讨论 某种 现象 ， 参考 ， 放在 身上 出错 ； 己言 个体 人 知识 能力 局限性 ， 己言也 带有 很大 局限性 ； 唯有 天言 ， 无所不知 上天 言语 ， 值得 去 努力 聆听 遵从 。   3 - 17   规划 时间 ， 过好 精神 生活 。   3 - 16   一个 人 只能 活在 意识 之中 。 — — 叔本 华   发生 事情 都 发生 意识 。 — — 叔本 华   — — 古希腊 铭言   闲暇 时光 人生 精华 。 — — 叔本 华   人的 幸福 在于 无拘无束 施展 人的 才能 。 — — 亚里士多德   离开 世界 ， 世界 照样 愚蠢 邪恶 ， 刚 来到 世界 发现 两样 。 — — 伏尔泰   3 - 15   冥想 散步 有益 活动 ， 记得 常做 。   3 - 2   看待 别人 ， 看待 ； 而在 看待 上 ， 事实 ， 持有 何种 观点 。 荣誉 成就 事实 有助于 自我 良善 观点 ， 荣誉 成就 事实 都 不值 一文 。   接下来 要做 何种 事情 。   2 - 13   摘自 【 叔本 华 - 人生 智慧 】   \" 菲利斯丁 \" 性格 特征 枯燥无味 气质 滞 钝 ， 活像 动物 。 感官 乐趣 耗竭 ， 东西 刺激 、 使 喜欢 ， 社交 生活 瞬间 一种 负担 ， 玩 牌也 提 不 兴趣 。 ， 虚荣 留给 快感 ， 自以为是 享受 快乐 ， 财富 、 地位 、 影响 权力 上比 优越 ， 常替 权势 人 奔走 ， 自觉 沐浴 光耀 扬扬 自得 ， 英国人 称的 势利 鬼 ， 可悲 ！   ， \" 菲利斯丁 \" 本质 推出 ， \" \" ， 肉体 ， 才智 ， 寻找 活动 。 绝不 会 朋友 具备 才能 ； 后者 使 自卑感 一份 不 愿 、 深深 嫉妒 ， 碰上 才能 人 ， 只 会 厌恶 ， 痛恨 。 心中 才智 嫉妒 会转 成 秘密 怨恨 。 仍 为此 改变 价值 观念 ， 符合 才智 士的 标准 ， 依然 喜欢 地位 、 财富 、 权力 影响力 ， 希望 样样 都 擅长 ， 眼中 ， 世界 上 利益 。   所提 种种 乃是 知识 欲的 。 菲利斯丁 苦恼 ， 在于 缺乏 理念 ， ， 逃避 \" 厌倦 \" ， 需 现实 弥补 空虚 心灵 。 ， 现实 令人 失望 充满 危险 ， 丧失 现实 兴趣 ， 疲惫 就会 乘虚而入 。 理念 世界 无限 平静 世界 ， 远离 世间 忧患 烦扰 。   2 - 3   猎 魔人 小说 湖中 女士 ： 本来 想打 三星 ， 系列 终 章虽 打了 四星 。 如果说 火之 洗礼 90 分 ， 雨燕 塔是 88 分 ， 湖中 女士 评分 80 分 。 姑且 不 说 做梦 桥段 有凑 字数 嫌疑 ， 就说 说 作最 核心 东西 ， 不快 失望 ， 火之 洗礼 感受 到了 神 作的 气息 ， 本作 只 感受 地摊 爽文的 气息 。 通向 心目 中的 大 结局 ， 作者 希望 矫揉造作 ， 而在 过程 中 ， 很多 桥段 设计 粗陋 低劣 ， 背后 明眼人 一眼 中就 作者 欲念 人 不快 偏见 喜好 ， 对比 米 尔瓦 安古 兰 作者 设计 桥段 待遇 ， 只好 抱歉 问候 作者 一句 ， 喜欢 十几岁 少女 。   2 - 1   生活 一个 鼓吹 成功 时代 ， 大 成功 大 计划 聒噪 琐 粹的 日常 新闻 鲜明 对比 。 想 至少 人 ， 批评 三分钟 热度 ， 包括 自我 评判 ， 时 疏忽 潜意识 自我 投射 ， 。   宇宙 中对 长远 计划 不 感兴趣   。 就让 定下 下个 三分钟 计划 ， 倾注 热情 ， 脑海 里的 超过 三分钟 计划 都 通通 见鬼 去吧 ， 成功 都 见鬼 去吧 ， 都滚 世界 末日 去吧 。 【 三分钟 一个 代指 ， 代指 短的 一个 兴趣 使然 时间段 】   自由 ， 时时 提醒 一点 好不 忘了 自我 本性 。 自由 更 深切 含义 凡事 皆 可不 。   猎 魔人 系列 小说 特色 是你 看不到 一个 好人 ， 是希 里 客观 角度 出发 杀生 太多 ， 正 猎 魔人 慢慢 走 希 里 主线 ， 小说 横捭阖 ， 少了 杰洛特 线的 那种 思辨 纠葛 ， 小说 性 提升 ， 文学性 慢慢 减 分了 。 杰洛特 是我 第一 男 主角 ， 句 话 ： 一个 人类 。 一个 英雄 式的 主角 冷冷地 看着 乱世 ， 更 多的 关切 是我 报酬 ， 心愿 I       choose     。 猎 魔人 小说 两部 故事 推向 结局 ， 文学性 却是 杰洛特 几部 ， 打动 心 ， 心中 留下 文学 形象 杰洛特 几部   1 - 25   头脑 中 有至 高的 道理 ， 却 一句 话都 说 不 。   长远 计划 有限 时光 无限 时空 都是 无 意义 ， 时光 有限 ， 长远 计划 太 过于 遥远 ； 时空 无限 ， 渺小 计划 。 眼中 当下 计划 ， 投入 精力 去 。 遗忘 ， ， 都在 无时无刻 不地 透漏 计划 。   1 - 14   有一 说 ， 编程 是有 一种 乐趣 ， 年龄 见鬼 去吧 ， 万物 易变 万物 皆 死的 世界 ， 乐趣 永存 。   1 - 10   不 不 未来 ； 不 眼目 中 、 口舌 中 ， 不 想象 中 。 ， 。   1 - 4   爱 ！   1 - 1   昙花一现 外在 现实 世界 来说 ， 非做 事 ， 几件 最 该做 事情 。",
            "tags":"essay",
            "url":"articles/2020-essay.html"
        },
        {
            "title":"机器学习学习笔记一",
            "text":"理解 神经网络   学习 深度学习 不 神经 生物学 ， 传统 机器学习 算法 不 面面俱到 ， 神经网络 概念 矩阵 ， 升级 ， 张量 运算 。   来看 Keras 30s 上手 例子 ：   建立 一个 模型 ， 最 常用 模型   Sequential   顺序 模型 。 是最 常用 模型 。   神经网络 发展 大脑 无 太多 关系 ， 早期 发展 吸收 灵感 ， 推荐 神经网络 分层 学习 层级 学习 。   看   layer   层的 ， 深度学习 模型 层的 堆叠 。   Dense   常说 全 连接 层 。 全 连接 层 大概 ：   全 连接 层的   层的 节点 都和 后 一层 节点 相连 。   Dense units 参数 是本 层 节点 数的 ， 其也 一个 ， 层的 输出 维度 数 。   一层 神经网络 发生   output   =   relu ( dot ( W ,   input )   +   b )   数学 运算 。     relu     Dense   指定   activation   激活 函数 。 去想 神经网络 一套 不 有助于 理解 ， 反倒 数学 思维 来更 理解 。 一层 神经网络 一层 数学 运算 层 ， 一个 数据 集 某种 线性 变换 ， 输出 一个 数据 集 。 如同   弗朗索瓦 · 肖 奈所 描述 ：   一张 纸被 揉的 皱巴巴 ， 一系列 步骤 几何 变换 ， 一步 都 简单 几何 变换 ， 最终 展平 动作 ， 张 纸 写 着的 字 。 深度学习 模型 解开 高纬 数据 流形 数学 机器 。   弗朗索瓦 · 肖 奈的 一个 很 好 ， 很 形象 。 深度学习 网络 看做 多级 信息 蒸馏 操作 ， 信息 穿越 过滤器 ， 纯度 越来越 高 （ 越来越 大 ） 。   公式 中   W   是每 一层 权重 ， 深度学习 训练 过程 找到 更好 权重 参数 ， 深度学习 神经网络 更好 。   训练 过程   x _ train   数据 ，   y _ train   标签 数据 ，   epoch   迭代 次数 ， 训练 数据 重复 训练 次数 。 batch _ size   训练 所含 样本 数 ， 参考   网页   ， 样本 训练 完 开销 太大 ， 而每 训练 就算 损失 函数 震荡 大 ， 通用 做法 ：   mini - batch   gradient   decent   ， 小 批量 数据 梯度 下降 。 batch _ size   训练 含的 样本 数 ， 1 epoch 训练 数据 都 训练 完 训练 次数 是总 样本 数 除以 batch _ size 。   模型 compile 指定 损失 函数 loss ， 损失 函数 用来 衡量 模型 预测 值和 真实 目标值 之间 距离 ， 简单 来说 损失 函数 模型 打分 ， 评价 模型 效果 好坏 。   打分 对模型 权重 参数 微调 反向 传播 算法 。   反向 传播 算法   反向 传播 算法 （ BP 算法   backpropagation ） 。 BP 算法 先将 输入 示例 提供 输入 层 神经元 ， 信号 向前 传递 ， 输出 层 ； 计算 输出 层的 误差 ， 再将 误差 逆向 传播 直 隐含 层 。 隐含 层 神经元 误差 来对 连接 权重 阈值 调整 过程 。 改 迭代 过程 循环 ， 条件 后 停止 。   反向 传播 算法 调节 优化 函数 或者说 优化 器   optimizer 。   理解 张量   标量   向量   矩阵   都 接触 了的 ， 张量 则是 更 多的 维度 数据结构 。 再 谈到 张量 发现 图形 几何 上的 理解 东西 丢掉 ， 简单 张量 理解 多个 维度 数据结构 。 python 程序 中就 张量 看做 numpy 模块 中的 ndarray 对象 。   张量 shape   看下 矩阵 情况 ：   ( 1 , 3 ）   一个 行 矢量 ，     :   [ 1 , 2 , 3 ]   ( 3 , 1 )   一个 列 矢量 ，   ：   $ $   \\ begin { bmatrix }   1 \\ \\   2 \\ \\   3   \\ end { bmatrix }   $ $   ( 2 , 3 )   两行 三列   小 维度 情况 带上 几何 思维 ， 张量 比如说   shape   ( 3 , 3 , 2 , 3 )   ， 理解 张量 数据 四个 维度 ， 第一个 维度 数据 容量 3 ， 第二个 维度 数据 容量 3 。   ndarray 对象 索引 语法   ndarray [ x ,   y   ,   z ]   ， 一个 维度 支持   ndarray [ x1 : x2 ,   :   ,   : ]   start : end   语法 。 维度 理解 ， 第一个 维度 选择   x1 : x2   之间 ， 第二个 维度 选择 ， 第三个 维度 选择 张量 数据 。 谈及 张量 ， 空间 关系 很 紧密 数据结构 ， 发现 脱离 几何 思维 ， 单纯 讨论 维度 会更 些 。   张量 dtype   numpy   ndarray 对象 ， 一个   dtype 参数   。 目标 张量 数据结构 包含 数据 类型 。 张量 都 包含 数值 型 数据 ， 会有 char 型 张量 ， 字符串 型 张量 。 单个 字符 ， 处于 字符 编码 ， 就算 是纯 英文 单个 字符 ， 通用 做法 建立 字典 ， 转成 数值 型 张量 ， 估计 计算 速度 一个 点吧 。   样本 维度   深度学习 领域 ， 第一个 维度 用作 样本 维度 ， MNIST 例子 中 shape   ( 60000 , 28 , 28 ) ， 第一个 维度 60000 样本 。   说到 batch _ size   训练 含的 样本 数 ， 训练 模型 送入 batch 数据 ：   利用 tensorflow 一个 单层 神经网络   本文 先用 tensorflow 单层 神经网络 mnist ， keras 来写 一个 两层 神经网络 解决 mnist 。 试着 keras 编写 一个 简单 深度学习 模型 ， 多层 神经网络 解决 mnist 。   本文 代码 参考 keras examples 代码 库 ， 本文 输入 数据 预处理 统一 化 过程 。   数据 预处理   利用 keras 下载 mnist 相关 数据 预处理 操作 。   train _ images   shape 第一 维度 60000 ， 6 万个 图片 ， 标签 第一 维度 6 万与 。   第一步 第二 维 第三 维 数据 合并 一维 。   第二步 转换 ndarray dtype 数据 类型 。   第三部 是将 数据 0 - 255   归一 化为   0 -   1   。   类似 test _ images ， 略过 。   标签 数据 - hot 编码 ：   - hot 编码 解释 略过 ， 地方 会 讨论 。   感知 器   感知 器 一层 或者说 单层 神经网络 。 感知 器 类似 逻辑 回归 模型 ， 只能 做 线性 分类 。   单层 神经网络 编写 Keras 简单 ， tensorflow 写 代码 。 推荐 tensorflow 来写 一个 简单 单层 神经网络 。 Keras 基于 tensorflow 更 高层 模块 ， 理解 Keras 做 工作 很 ， 理解 单层 神经网络 数学 运算 。   输入 参数 x 第二 维度 784 权重 矩阵 第一 维度 784 ， 神经网络 权重 矩阵 W shape ( 前 一层 节点 数 ,   后 一层 节点 数 )   。 输入 参数 矩阵 x 权重 矩阵 W 矩阵 乘法 【 张量 点积 ， np . dot 运算 】 第二 维度 等于 权重 矩阵 第二 维度 矩阵 。 输出 值 数据 送入   y _ logits 。   tf . matmul   矩阵 乘法 运算 。     tf . nn . softmax   激活 函数 ， softmax 激活 函数 讨论 略过 。   交叉熵   tensorflow 提供 交叉熵 计算 函数 ， 先 用更 原始 计算 公式 来看 （ 参考   篇 文章   ） ：   大体 过程 所示 ：   $ $   -   \\ sum   ( 1 , 0 , 0 )   *   log ( ( 0.5 , 0.4 , 0.1 ) )   =   - ( 1 * log0.5   +   0 * log0.4   +   0 * log0.1 )   =   0.301   $ $   交叉熵 越大 预测 值越 偏离 真实 值 ， 交叉熵 越小 预测 值越 接近 真实 值 。   tensorflow 自带 交叉熵 方法   推荐 tensorflow 自带 softmax + 交叉熵 方法 计算 交叉熵 ， 参考   篇 文章   ， 说是 计算 会更 稳定 些 。   代码 整理 ：   好了 ， 例子 收尾 阶段 ：   tf . argmax   函数 请看 例子 。 不 感兴趣 略过 ， 作用 标签 解释 ， 重点 。     tf . argmax   第二个 参数 1 ， 返回 一行 数值 index 索引 值 。   tf . argmax ( y _ pred ,   1 )   返回 索引 值在 例中 简单 ， 预测 数字 值 。   tf . reduce _   维度 元素 相加 求 平均值   例子 调用 tensorflow 作业 流程 ， 启动 运算 数据流 。 评估 测试 数据 精度 。 重点 。 单层 神经网络 来说 mnist 例子 很 难 超过 90% 。   利用 keras 一个 多层 感知 器   多层 感知 器 实际上 两层 全 连接 神经网络 。 理论 上 两层 神经网络 无限 逼近 任意 连续 函数 。 Keras 一个 多层 感知 器 。   试着 单层 神经网络 Keras 写 一遍 ， 数据 过程 ， 都 。   数据   建模   大概 差不多 。 例子 运行 几次 epoch ， 单层 神经网络 再 优化 只能 92% 。   建模 过程 稍微 加 一行 ， 构建 一个 多层 感知 器 。 多层 神经网络 激活 函数 选 relu 会 更好 。 加了 一层 ， 输出 节点 数为 10 神经网络 。   精度 97% 。   Keras 代码 库 examples 解决 mnist 多层 感知 器 ， 讨论 代码 稍微 调整 下 ， 建模 过程 ：   区别 加了 一层 神经网络 。   examples 还 新 Dropout 层 ， 一种 拟合 技术 ， 加上 会 ：   区别 不 大 ， 至少 mnist 来说 提升 是又 新 一层 神经网络 ， Dropout 层没 区别 。   利用 keras 一个 多层 神经网络   卷积 神经网络 相关 讨论 补上 ， 来看 下 Keras 代码 库 examples 介绍 CNN ， 深度学习 神经网络 解决 mnist 效果 。 理解 。   涉及 backend 图形 维度 选择 ， 。   数据 预处理 。   例子 跑 慢了 。 Dropout 不算 一层 ， Flatten 估计 不算 一层 ， 例子 大概 5 层 。   例子 报道 说 epochs = 12 精度 99% 。   公平 见 ， 多层 感知 器和 CNN 神经网络 两个 例子 都 epochs = 12 再 跑 对比 。   多层 感知 器 ：   跑 5 次 区别 。   CNN 看了 PC   CPU 基本上 跑 满了 ， GPU 没 ， tensorflow 换成 tensorflow - gpu   【 PS ： pip 安装 tensorflow 了的 ， 再 安装 tensorflow - gpu 即可 ， tensorflow 包 删的 。 】 再看 下 。 发现 显卡 写着 Intel   UHD ， NAVID 才能 开启 gpu ， 算了 。   CNN 神经网络 ：   精度 提升 到了 99% ， CNN 训练 几次 后续 效果 还 提升 ， 小看 1% 提升 ！   保存 模型   训练 费时 ， 保存 训练 模型 ？ keras 文档 FAQ ， 算是 很 经典 一个 。   保存 数据 ：   模型 结构 ， 创造 模型   模型 训练 权重 数据   训练 损失 优化 器 配置   优化 器 状态 ， 上 训练   下次 模型 所示 ：   机器学习 通用 工作 流程   定义 ， 收集 数据 集   输入 数据 ？ 预测 ？   面对 类型 ？ 是二 分类 分类 。   选择 衡量 成功 指标   模型 优化 ， 业务 目标 相关 。   评估 方法   留出 验证集   数据 量 很大 采用   操作 训练 数据 一部分 训练集 ， 剩下 来的 一部分 验证集 ， 训练集 训练 ， 验证集 评估 模型 好坏 。 模型 参数 调节 好 训练 好 ， 记得 训练集 从头 训练 ， 测试集 数据 测试 下 模型 效果 。   K 折 交叉 验证   重复 K 折 验证   数据   数据 张 量化   神经网络 输入 输出 目标 都 浮点 数 张量 （ 情况 下 整数 张量 ） 。 面对 声音 ， 文本 ， 图像 视频 ， 都 先将 转换 张量 。   数据 标准化   数据 标准化 情况 ：   图像 0 - 255 数据 整除 缩减   0 - 1   数据 区间   多个 特征 数据 ， 推荐 提及 z - score 标准化   缺失 值   神经网络 来说 ， 缺失 值 设置   0   。   特征 工程   自然语言 ， 自然语言 学到 知识 ， 选择 二元 模型 输入 数据 再 。   特征 工程 用更 少的 资源 更 优雅 解决问题   特征 用更 少的 数据 解决问题   开发 基准 更好 模型   简单 来说 先 随便 开发 一个 小 模型 ， 太高 ， 至少 要比 随机 乱猜 准确率 高点 模型 。   模型 规模 ， 开发 拟合 模型   ：   添加 更 多的 层   一层 变得 更 大   训练 更 次数   始终 监控 训练 损失 验证 损失 ， 发现 模型 训练 次数 增加 验证 数据 上 性能 下降 ， 拟合 。   模型 正则 化与 调节 超 参数   一步 是最 费 时间 ： 调节 模型 ， 训练 ， 验证 ， 再 调节 模型 ...   。 尝试 手段   添加 Dropout 层   Dropout 层是 深度学习 父 Hinton 学生 首次 提出 来的 ， 原理 很 简单 ： 一层 dropout 层在 训练 会 随机 舍弃 输出 特征 （ 值 变为 0 ） 。 dropout 比率 是被 设为 0 特征 所占 比例 ， 设 0.2 ~ 0.5 之间 。   添加 Dropout 层是 最 最 常用 正则 化 方法 — — 正则 化指 降低 拟合 。   尝试 增加 减少 层   实践 中 会 选择 少的 层和 节点 数 ， 增加 ， 增加 验证 损失 影响 变得 很小 。   尝试 L1   L2 正则 化   L1 正则 化和 L2 正则 化都 权重 正则 化 ， 一种 降低 拟合 方法 ， 强制 模型 权重 只能 取较 小的 值 。   尝试 超 参数   层的 单元 个数 ， 优化 器的 学习 率等 。   附录   relu 激活 函数   relu 激活 函数 数学 运算 公式 很 简单 ， ：   运算 z 张量 relu 运算 ， 元素 ， 元素 值 大于 0 则为 原 元素 值 ， 0 。   广播 ( broadcasting )   广播 一种 操作 ， shape 小的 张量 shape 较大 张量 点对 点 运算 时 ， shape 小的 张量 广播 操作 ， 使 运算 上 shape 兼容 。   广播 操作 规则 ：   shape 小的 张量 添加 新的 维度 两个 张量 维度 数   shape 小的 张量 新的 维度 中的 数据 重复 ， 相当于 原 维度 数据 ， ：   y [ 1 , j ]   =   y [ 2 , j ]   =   y [ 3 , j ]   = ...   y [ j ]   张量 点积   矩阵 乘法 张量 点积 学过 线性 代数 概念 很 ， 到更 高的 维度 张量 点积 情况 。 张量 点积 shape 变化 弄 ， 会 有用 ， 张量 运算 交给 函数 去做 。   $ $   x   \\ cdot   y   =   z   $ $   x   shape   ( a ,   b )   y   shape   ( b , c )   输出   z   shape ( a ,   c )   高维 情况 ：   ( a ,   b ,   c   , d )   ·   ( d , )   - >   ( a , b , c )   ( a ,   b ,   c   , d )   ·   ( d ,   e )   - >   ( a , b , c ,   e )   张量 变形   ndarray 调用 reshape 方法 张量 变形 操作 ， 变形 后 元素 总 个数 ， 维度 容量 乘积 数 。   张量 导数   张量 导数 梯度 。   随机 梯度 下降 ( SGD )   小 批量 SGD 过程 ：   抽取 训练 样本 x 目标 y 数据 批量   x 上 运行 网络 ， 预测 值 y _ pred   计算 网络 批 数据 上的 损失 ， 用于 衡量 y _ pred y 之间 距离   计算 损失 网络 参数 梯度   参数 梯度 反 方向 一点   W   - =   step   *   gradient   ， 使 批 数据 上的 损失 减小 一点 。 step 步长 学习 率 。   实践 中的 优化 器 optimizer 都 采用 随机 梯度 下降 ， 优化 ， SGD 变体 ： 带动 量的 SGD ， Adagrad ， RMSProp 。   均值 移除   更 喜欢 称之为 z - score 缩放 ， 学习 统计学 z - score 标准分 含义 ， 大体 缩放 操作 在做 些 事情 。 简单 来说 讲 张量 数据 特征 维度 ， 均值 都为 0 ， 标准 差都 1 。   sklearn 提供   StandardScaler   ， 利用 fit tranform 操作 即可 ， 还 利用 缩放器 反向 回 滚   inverse _ transform   。   minmax 缩放   控制 张量 数据 最小 值和 最大值 。   sklearn 提供   MinMaxScaler   缩放器 类 ， 类似 fit tranform 操作 ， 利用 缩放器 回 滚 操作 。   归一 化   sklearn 提供 normalize 函数 支持 张量 数据 归一 化 操作 ， 一个 不 可逆 操作 。 特征 维度 数据 绝对值 之和 1 。   二 值化   给定 一个 阈值 ， 张量 数据 0   1   值 。 估计 神经网络 中 有用 。   onehot 编码   onehot 编码 算是 神经网络 入门 知识 ， 简单 来说   数值 字符   编码 空间 扩展   0   1   数值 特征 向量 。   sklearn 提供   OneHotEncoder   相关 操作 。   比如说   性别 特征 列有 值   male   female   两个 值   一列 两个 bit 位   。   数字 列有   1   5   10   三个 值   特征 列 三个 bit 位   。   例子 一共   5   bit 位 。   例子 中   1   0     female   0   0   1     10   。   label 编码   label 编码 含义 是很 简单 ， 给定 一个 字典 值 ， 字典 单词 赋值 0 , 2 , 3 ... 张量 数据 数值 型了 。   sklearn 提供   LabelEncoder   相关 操作 。   计算 误差   平均 误差 MAE   数据 集 数据 点的 误差 平均值   均方 误差 MSE   数据 集 数据 点的 误差 平方 平均值   均 方根 误差 RMSE   均方 误差 开 个根 号 ， 更好 描述 模型 误差   中位数 误差   数据 集 数据 点的 误差 中位数   解释 方差 分   分数 用来 衡量 模型 数据 集 波动 解释 能力   R 方 得分   R2   score   用来 衡量 模型 未知 样本 预测 效果 。   参考 资料   机器学习 实战   Peter   Harrington   著   李锐   李鹏 等译   机器学习 实 战线 上 教程   python 深度学习   弗朗索瓦 · 肖 奈   deep   learning   中文版   机器学习   周 志华 著   文章 介绍 神经网络 写的 很 好   篇 文章 不错   python 机器学习 经典 案例   Prateek   Joshi   著   陶 俊杰   陈 小莉 译",
            "tags":"machine-learning",
            "url":"articles/machine-learning-notes-one.html"
        },
        {
            "title":"numpy模块",
            "text":"前言   本文 numpy 模块 函数 细节 不 做 过多 ， 请 参看 文档 。 本文 是就 numpy 核心 概念 理清 。   numpy 模块 最 核心 概念   ndarray 对象 ， 请 参看     ， 疑问 ， numpy array 函数 ndarray 对象 区别 ， 答案 ： 推荐   numpy . array   创建   ndarray 对象 ，   zeros   ， empty 函数 ， 都是 很 接口 去 创建 一个   numpy . ndarray   对象 ，   numpy . ndarray   创建 一个 ndarray 对象 ，   numpy 模块 开发人员 推荐 风格 。   numpy   ndarray 对象 python 列表 区别   numpy   ndarray 内部 item 固定 内存 size ， 改变 size 将会 创建 一个 ndarray 。   numpy   ndarray 内部 item data   type ， 固定 内存 size 。   numpy ndarray 有助于 大型 数据 高级 数学 运算 操作 ， python 序列 执行 会更 有效率 。   很多 科学 数学计算 python 模块 都是 基于 numpy ndarray ， 支持 python 序列 类型 输入 ， 都 numpy array 再 相关 计算 ， 输出 numpy ndarray 对象 。   ndarray 对象   numpy 模块 中很 核心 一个 概念 ndarray 对象 。 ndarray 对象 numpy 官方 手册 绘图 一个 数据结构 ：   ndarray 一个头 header 控制 接下来 存储 数据 类型 ( dtype ) ， 存储 数据 都是 数据 类型 ， 一个 不同于 列表 限定 条件 ， 约定 大大提高 数据处理 效率 。   利用 array 函数 简单 一个 列表 ndarray 对象 ：   例子 中 ， 一个 ndarray 对象 都有 一个 属性 (   dtype   ) ， 存储 讲的 ndarray 对象 一连串 数据 数据 类型 ， 数据 类型 \" int32 \" 。   dtype   基本上 讨论 numpy 资料 都 会把 清单 列 ， 列 。   bool _ :   True     False   int _ :   相当于 C 语言 long ， int32 int64 。 整数 型 其内 细分 :   intc :   等于 C 语言 int ， int32 int64   intp :   整数 用于 索引 ， C 语言 ssize _ t ， int32 int64 。   int8 :   Byte （ - 128   ~   127 ）   int16 :   Integer （ - 32769   ~   32767 ）   int32 :   Integer   int64 :   Integer   uint8 :   Unsigned   Integer （ 0   ~   255 ）   uint16 :   Unsigned   Integer （ 0   ~   65535 ）   uint32 :   Unsigned   Integer   uint64 :   Unsigned   Integer   float _ :   float64 。 浮点 型 细分 :   float16 :   半 精度 浮点 型   float32 :   单 精度 浮点 型   float64 :   双 精度 浮点 型   complex _ :   complex128 。   复数 型 细分 :   complex64 :   复数 型 ， 32 位 浮点 型   complex128 :   复数 形 ， 64 位 浮点 型   声明 :   ， dtype 指定 int ，   np . int _   类似   float     np . float _   ;   bool     np . bool _   ;   complex     np . complex _   。   ndarray dtype 变换   还 调用 ndarray   astype   方法 。 方法   非 破坏 型   方法 ， 例子 所示 ：   dtype 对象 从属 关系     np . issubdtype   函数 判断 ndarray dtype 对象 整 型的 子集 。   shape 属性   ， 一个 ndarray 对象 都有   shape   属性 ， 用于 控制 跟着 数据 维度 。 请看 例子 ：   shape   属性 用来 控制 数据 维度 理解 ， 一个 数字 一维 ， 二个 数字 二维 几行 几列 （ 数学 中 常见 概念 矩阵 ） ， 三个 数字 三维 。 修改 ndarray 对象 shape 属性 影响 程序 对象 数据 理解 ， 更 常用 是用   reshape   方法 ， 不 原地 修改 ndarray 对象 shape ， 返回 一个 修改 shape 属性 新的 ndarray 对象 。   reshape   ndarray 调用 reshape 改变 ndarray shape 属性 ， 不 原地 修改 ndarray 对象 shape ， 返回 一个 修改 shape 属性 新的 ndarray 对象 。   只 指定 一个 维度 ， 一个 维度 填 上   - 1   ， 改 维度 shape 将会 自动 计算 。     4 * 5 矩阵 ， reshape   ( - 1 , 4 )   ， 矩阵 row = 5 。   创建 一个 ndarray 对象   python 数据结构 中 创建   接触 过的   np . array   函数 ， 用来 接受 一个 python   list     tuple   ， 返回 一个 ndarray 对象 。   生成 一系列 随机数   例子 中 ：   填充 一个 2 行 3 列的 随机数 ， randn n normal ， 正态分布 。   arrange 函数   arange ( start , end , step )   参数 类似 range 函数 。 生成 一个 数据 递增 （ 减 ） ndarray 对象 ：   其是 一维 ， reshape 操作 生成 二维 ndarray 对象 ， 接受   dtype   对象 控制 dtype 属性 。   linspace 函数   linspace 函数 看作   arange 函数 补充 ， arange 函数 指定 start stop ， 数值 是不 包含 ， 生成 item 不易 知的 ， linspace 接受 三个 参数 :   start   end   number   ， start end 是在 ndarray 中 包含 ， number 给定 生成 item 。   结束 元素 包不 包含 倒 很 ， 关键 情况 下你 控制 生成 item ，   linspace   函数 。   zeros 函数   zeros 函数 用于 快速 创建 一个 ndarray 对象 ， 其内 数据 都 填充   0 .   ， 默认 dtype   float64   。 接受 一个 参数 简单 看作 shape 属性 参数 ， 所示 ：   函数   函数 类似 zeros 函数 ， 填充 数据 1 。 就不 做 例子 演示 。   empty 函数   empty 函数 谈论   zeros     函数 类似 ， item 都是 原 内存 随机 数值 ， 不 做 修改 。   索引 值   ndarray 值的 索引 操作 python 中 列表 索引 值的 操作 ， 方括号 语法 索引   [ index ]   :   还 语法 :   描述 索引 值 语法 修改 ndarray 对象 元素 值 。 numpy 还 提供 一种 语法 ：   [ a , b ]   ， ndarray 对象 其和   [ a ] [ b ]   。 矩阵   不   支持   [ a ] [ b ]   索引 语法 ， 而只 支持   [ a , b ]   语法 ， 推荐 矩阵 都 用带 逗号 索引 方法 ， 矩阵 a 行 b 列 。   索引 多个 值或 说 view   ndarray 对象 有在 谈及 索引 规则 下   [ start : end : step ]   :   支持 索引 多个 值 ， 说 切片 ，   view   视图 。 python list 索引 多个 值 ， 切片 ， 等于 制造 一个 新的 列表 ， :   调用   lst [ 0 : 2 ]   时 ， python 程序 制造 一个 新的 子 列表 ， 赋值 x ， 看 ndarray 对象 :   ndarray 对象 索引 多个 值 称之为   视图   原因 ， 返回 指向 原处 片段 ！   索引 多个 值的 视图 赋值 操作 ， 元素 都 赋值 值 :   多维 切片     [ start : end : step ]   语法 第一个 维度 上的 切片 ， numpy 支持 语法 ， 灵活 地在 多个 维度 切片   [ d1 ,   d2 ,   d3 ]   ， d1 第一个 维度 上的 索引 值 ， 维度 都 进一步   [ start : end : step ]   进一步 切片 操作 。   看 一个 例子 ， 含义 第一 维度 元素 ， 第二 维度 选择 索引 值 0 ， 第三 维度 元素 。   copy 方法   希望 原 python 那种 索引 多个 值的 效果 而不 影响 原 ndarray 对象 ， 调用 ndarrary 对象   copy   方法 :   布尔 值 索引   布尔 值 索引 基于   ndarray 对象 布尔 值 判断 操作 ，   = =   >   <   ， 输出 一个 原 维度 bool 值 ndarray 对象 。 ndarray 对象 送入 array 索引 输入 框中 ， 其将 返回 bool 值为 True 值 。   布尔 值 索引 返回   视图   ， 对齐 操作 改变 原 ndarray 对象 。   还   &    |  组合 逻辑 ，         。   一大 用法 利用 item 属性 映射 关系 ， 利用 属性 过滤 data :   索引 一行 ， 其行 ' a ' 值 。   运算   两个 ndarray 对象 之间 数学 运算 ， 两个 ndarray 维度 ， 称之为   vectorization   ， 矢量 化 操作 。 大致   加减乘除 幂   操作 都是   元素 元素 加减乘除 幂 操作   :   两个 ndarray 对象 维度 （ 多维 情况 不 讨论 了吧 ） ，   列维 数目 ， ， 不 推荐 。 列维 数目 ， 则会抛 出   ValueError   。   z 重复 x 一行 。   ndarray 对象 上的 方法   flatten 方法   flatten ， 拉平 。 flatten ndarray 对象 （ 包括 矩阵 ） 一个 方法 ， 可将 变为 一维 形式 ，   非 破坏 型   方法 。   flatten 方法 归到 矩阵 是因为 多维 数组 维度 所含 元素 数目 （ 要有 类似 矩阵 空间 矩形 排布 感 ） 才有 意义 。 矩阵 返回 是行 矢量 形式 。   sort 方法   sort 方法 作用 多维 ， 一维 更 显的 意义 些 ， 其是 一个   破坏 型   方法 。   所示 ， 看 ， 一行 变动 ， 只 行内 一维 情况 下 排序 。   方法   计算 给定 维度 下 元素 值的 均值 。   难点 在于 理解 维度 扩展 概念 ， 矩阵 ， 竖 列是 axis = 0 ， 横向 行是 axis = 1 。   numpy . ( axis = 0 )   理解 竖 向列 计算 均值 ， 更好 理解 是行 记录 ， 列 特征 ， 第一 维度 样本 维 ， 第二 维度 特征 维 ， axis = 0 ， 官方 文档 axis 解释 维度 轴 计算 ， axis = 0 选择 实际上 样本 维 ， 样本 维 特征 计算 一个 均值 。   std 方法   计算 给定 维度 下 元素 值的 标准 差 ， 类似 方法 。   通用 函数   讲的 通用 函数 ， 大多 numpy 自带 ， 接受 参数 ndarray 对象 ， 改变 目标 ndarray 对象 shape （ 会 稍微 做 改变 ） ， 元素 函数 操作 。   sqrt 函数   开个 平方根   exp 函数   算个 指数函数   \\ ( e &# 94 ; { x } \\ )   maximum 函数   点对 点 返回 最大值   【 会 自动 广播 操作 】   abs 函数   unique 函数   返回 给定 数据 集的 唯一 元素 集合 。 ndarray 多维 对象 ， 将会 flatten 再 找出 唯一 值 。   tile 函数   输入 一个 array ， reps 维度 重复 数据 ：   argsort 函数   ndarray 对象 调用 argsort 函数 返回 一个 大小 排序 索引 值 ：   含义 排序 后 第一个 值是   x [ 1 ]   ， 以此类推 。   np . argpartition 函数   arg 开头 返回 索引 值 。   默认 调用 类似 快速 排序 中的 选择 一个点 ， 左边 都是 值小的 点 ， 右边 都是 值大的 点 。 情况 下 ， 指向 topk ， 调用 函数 ， 排序 操作 完 ， 会很 高效 。   例子 ， 输出 分区 点是   2   ， 2 内容 中 最小 两个 。 2 数字 5 ， 两个   1   4 ， 剩下 9   8   7   6   都是 5 大的 。 大概 样子 。   np . allclose   类似 isclose ， 返回 True False   np . isclose   点对 点的 两个 ndarray 值 ， rtol 容忍 度 ， atol 容忍 度 ， 一种 近似 数值 相近 判断 操作 。   np . logical _   点对 点的 逻辑 操作 。   np .   轴 数值 执行 操作 。   ndarray 对象 转置   调用 ndarray 对象   T   属性 ， 更 接近 矩阵 中的 转 置 操作 （ 一维 ndarray 改变 ） 。 提及   data [ : : - 1 ]   ， 行 翻转 ， 一维 倒是 array 都 翻转 。   广播 ( broadcasting )   广播 一种 操作 ， shape 小的 张量 shape 较大 张量 点对 点 运算 时 ， shape 小的 张量 广播 操作 ， 使 运算 上 shape 兼容 。   广播 操作 规则 ：   shape 小的 张量 添加 新的 维度 两个 张量 维度 数   shape 小的 张量 新的 维度 中的 数据 重复 ， 相当于 原 维度 数据 ， ：   y [ 1 , j ]   =   y [ 2 , j ]   =   y [ 3 , j ]   = ...   y [ j ]   矩阵 对象   矩阵 对象 ndarray 对象 子类 ， 也就是说 ndarray 对象 属性 方法 它都 。 行 矢量 列 矢量 矩阵 中的 情况 。 矩阵 概念 数学 运算 中 较为 ， 概念 ， 转 置啊 ， 点乘 ， 矩阵 数学 运算 相关 ， ndarray 对象 做 ， 推荐 矩阵 （ matrix ） 对象 再 ， 理清 概念 。   matrix 函数   numpy matrix 函数 创建 一个 矩阵 对象 :   矩阵 转置   transpose   方法 ， 矩阵 转置 。 只 返回 ，   非 破坏 型   方法 。   行 矢量 列 矢量   行 矢量 列 矢量 矩阵 情况 ， matrix 函数 创建 。 行 矢量 转置 列 矢量 请 看 写法 。   矩阵 点乘   学过 线性 代数 印 最深 矩阵 怪异 乘法 运算 。 有了 numpy 模块 支持 ，   *   执行 两个 矩阵 乘法 ，   np . dot   函数 。",
            "tags":"algorithm",
            "url":"articles/numpy-module.html"
        },
        {
            "title":"今后三十年世界经济占",
            "text":"是日 ， 世界 经济 三十年 占上 卦 ， 以解 心中 困惑 。     讼卦变 爻 23456   。   卦辞 说 ： 诚信 ， 内心 恐惧 ， 中 吉 ， 终凶 。 利见 大人 ， 不利 涉 大川 。   三十年 世界 经济 一个 关键词 争讼 争端 。 商人 们是 诚信 ， 内心 充满 恐惧 。   彖 说 ： 讼 卦 乾卦 为刚 ， 为坎 卦为 险 。 遇险 刚健 ， 讼卦了 。 讼 ， 孚 ， 窒 惕 ， 中 吉 ， 是因为 刚健 三 爻 来到 坎 险之 地而 居 九二 之中 缘故 。 终凶 ， 争讼之 事 成功 。 利见 大人 ， 是因为 崇尚 九五 中正 德 。 不利 涉 大川 ， 是因为 入于 坎 险的 深渊 之地 。   象辞 说 ： 坎 卦上 天下 为水 ， 天从 东向西 ， 水从 西向东 流 ， 天水 相背 行 ， 讼卦的 卦 象了 。 君子 观此 卦 象而   作事 须谋 始   。   2020 - 2025 年 ， 爻 唯一 爻 ， 段时间 世界 经济 运势 。 二十五年 爻 爻 皆 变 ， 此亦 稀有 。 天道 运行 有常 ， 人 子 善恶 念皆 改 命 ， 上天 以变 爻 示人 ， 世界 运行 劝 人 向善 本义 。   爻辞 白话 ： 不 纠缠 于争 讼之 事 ， 小人 言论 ， 终吉 。 不 永所 事 ， 此争 讼之 事并 不 长久 。 小小的 责难 言 ， 辩解 能将 是非曲直 说 明白 。   段时间 世界 经济 争讼 争端 频出 ， 小人 指责 言论 多有 ， 争讼 争端 不 长久 ， 辩解 沟通 交流 说 明白 。 段时间 卦象 来看 入于 坎 险 之中 ， 世界 经济 整体 形势 一个 坎 险的 艰难 境地 。   2025 - 2030 年   变 爻 指 特别 应对 局面 。 爻辞 白话 ： 胜讼 ， 回来 后又 马上 逃亡 。 所在 村 邑下 三 百户 ， 牵连 灾祸 。 不 克讼 ， 是故 回来 后又 马上 逃窜 中 。 以九 二 之下 有权有势 人 争讼 ， 灾祸 找的 。 爻 商人 克冲 权贵 流亡 国之 象 。   段时间 世界 经济 争讼 争端 频出 ， 一方 一个 更 权势 人 争讼 ， 败诉 。 败诉 弱势 方 国家 阵营 老百姓 还好 牵连 灾祸 。 段时间 卦象 来看 入于 坎 险 之中 ， 世界 经济 整体 形势 一个 坎 险的 艰难 境地 。   2030 - 2035 年   爻辞 白话 ： 享用 旧有 德业 ， 贞厉 ， 守 正道 危险 ， 最终 会 吉祥 。 会随 君王 作事 ， 功名 成就 。 食旧 德 ， 六三 柔顺 顺从 刚健 三 爻 ， 收获 吉祥 。   段时间 世界 经济 吃 老本 ， 坚守 正道 很 危险 ， 世界 经济 整体 运势 正气 不 兴 ， 最终 会 吉祥 ， 最终 吉祥 ， 顺从 十五年 刚健 行的 计划 ， 计划 调整 世界 经济 。 段时间 世界 经济 处在 坎 险之 。   2035 - 2040 年   爻辞 白话 ： 胜讼 ， 复归 命运 状态 ， 改变 后 ， 固守 安贞 而得 吉祥 。 \" 复即 命 ， 渝 ， 安贞 \" ， 损失 。   段时间 世界 经济 整体 一个 刚健 行的 阶段 ， 正 慢慢 走出 坎 险之 。 一个 复归 二字 。 固守 安贞 ， 随便 到处 乱跑 ， 安于 现状 即可 吉祥 。   2040 - 2045 年   爻辞 白话 ： 争讼之 事 大 吉祥 。 讼元 吉 ， 是因为 九五 中正 德 。   段时间 世界 经济 最 关键 地方 在于 坚守 九五 中正 德 ， 则大 吉祥 。 利见 大人 ， 利于 见 世界 各国 大 领导人 。   2045 - 2050 年   爻辞 白话 ： 会 君王 赐赏 官服 大带 ， 之内 却 褫夺 。 争讼而 赏赐 ， 没什么 值得 尊敬 。   段时间 世界 经济 讼卦之 末尾 ， 商人 争讼 ， 会 领导人 嘉奖 ， 一会 翻脸 。 世界 经济 整体 氛围 不再 鼓励 争讼 争端 ， 就算 争讼 赏赐 ， 没什么 好 夸耀 。",
            "tags":"divine",
            "url":"articles/jin-hou-san-shi-nian-shi-jie-jing-ji-zhan.html"
        },
        {
            "title":"自然语言处理入门",
            "text":"简介   自然语言 领域 ：   机器 翻译   自动 文摘   信息检索   文档 分类   问答 系统   信息 过滤 ， 信息 抽取   文字 编辑 自动 校对   作文 自动 评分   语音 识别   语音 合成 ， text     speech   信息熵   信息熵 是个 人 难懂 概念 ， 是当 很多 领域 都 接触 信息熵 概念 ， 会 发现 没 理解 信息熵 概念 。 自然语言 领域 ， 信息熵 多的 ， 自然 信息 传输 领域 很多 ， 信息熵 概念 基本上 信息论 基石 。   说 ， 先 死记硬背 ， 信息熵 定义 ， 一个 事物 一个 东西 ， 一个 系统 中 几率 p ， 东西 系统 中的 信息熵 ：   $ $   H   =   -   p   log _ 2 { p }   $ $   最 简单 抛 硬币 ， 正面 来说 几率 1 / 2 ， 抛 硬币 正面 信息熵   0.5 ， 反面 信息熵 0.5   1   。 信息熵 单位 bit ， 信息熵 服从 加性 （ 总 系统 信息熵 子系统 信息熵 加和 ） ， 抛 一枚 硬币 ， 正面 反面 信息熵 总和   1   bit 。 信息论 角度 来说 一个 字节 描述 抛 一枚 硬币 信息量 。 信息论 专注 信息 传输 领域 。   一个 ， 摘自 宗 庆成 统计 自然语言 第二 版例 2 - 3 ：   假设 a , b , c , d , e , f   6 字符 概率   1 / 8   1 / 4   1 / 8   1 / 4   1 / 8   1 / 8   ， 传输 一个 字符 信息熵 ？   传输 一个 字符   a   b   c   d   e   f 只 有这 六种 情况 ， 信息熵 ：   H   =   - [ 1 / 8log1 / 8   +   1 / 4log1 / 4   +   1 / 8log1 / 8   +   1 / 4log1 / 4   +   1 / 8log1 / 8   +   1 / 8log1 / 8 ]   =   2.5   bit   传输 六个 字母 2.5 bit ， 则给 三个 bit 位就 够用 ， 设计 一种 信息 编码 规则 即可 ， 设计 编码 规则 还要 具体情况 概率 ， 细节 不 讨论 。 信息熵 干 用的 。   一个 事件 会 发生 ， 信息熵 等于 0 ， 一个 事件 发生 概率 0 ， 信息熵 等于 0 。 信息熵 0 事件 发送 为你 带来 额外 信息 。 以抛 硬币 描述 一个 事件 ， 则你 硬币 一无所知 ， 信息熵 = 1 信息熵 ， 一半 一半 0.5 情况 。   薛定谔 猫在 一半 生 一半 死的 情况 下 打开 黑 盒子 ， 流 信息熵 ， 或者说 流 信息量 是最 多的 。   信息 增益   信息 增益 决策 树 算法 分类 特征 选择 中很 ， 暂时 先 简单 理解 引入 特征 分类 信息熵 增量 很大 ， 获取 特征 系统 程度 影响 ， 简单 来说 特征 好啊 ， 引入 收获 更 多的 信息 。   联合 熵 条件 熵   是从 概率分布 联合 概率 条件 概率 推出 来的 概念 。 联合 概率 两个 事件 概率 ； 条件 概率 已知 Y 发生 ， X 事件 发生 概率 。   $ $   H ( X , Y )   =   -   \\ sum _ { x   \\ epsilon   X }   \\ sum _ { y   \\ epsilon   Y }   p ( x , y ) log ( p ( x , y ) )   $ $   XY 联合 熵 描述 一对 随机 变量 平均 信息量 。   熵 连锁 规则 ：   $ $   H ( X _ 1 , X _ 2   ... )   =   H ( X _ 1 )   +   H ( X _ 2 | X _ 1 )   +   H ( X _ 3 |  X _ 1 ,   X _ 2 )   $ $   多个 事件 信息熵 等于 第一个 事件 信息熵 加上 第一个 事件 第二个 事件 再 信息熵 ， 以此类推 。   互 信息   互 信息 用来 衡量 两个 事件 相关 度的 。 互 信息 定义 ：   $ $   I ( X ; Y )   =   H ( X )   -   H ( X | Y )   $ $   分 号 ， 逗号 ， 两个 事件 ， | 则是 Y 求 X 条件 概率 。   含义 X Y 互 信息 Y 事件 X 事件 发生 信息熵 减少 量 。 假设 不 Y 事件 X 事件 信息量 = 2 ， Y X 事件 再 发生 信息量 = 1 ， X Y 互 信息量 = 1 。   假设 XY 不相干 ， XY 互 信息量 = 0 ； 假设 Y 事件 发生 X 事件 必 发生 ， XY 互 信息量 = X 信息熵 。   熵 链式 规则 ：   $ $   I ( X ; Y )   =   H ( X )   -   H ( X | Y )   =   H ( X )   +   H ( Y )   -   H ( X , Y )   $ $   熵 交叉熵   熵 称为 交叉熵 【 熵 交叉熵 两个 概念 ， 数学 美 上的 说法 存疑 。 】 ， 机器学习 核对 学习 算法 误差 接触 ， 熵 用来 两个 取值 正数 函数 相似性 。   两个 函数 ， 熵 0   熵 越 大 ， 两个 函数 差异 越大 ， 熵 越 小 ， 两个 函数 差异 越小 。   ， 熵 用来 衡量 两个 概率分布 函数 差异性   互 信息 两个 事件 联合 分布 独立 分布 熵 ， 两个 事件 越 接近 独立 分布 ， 相关性 越小 ， 熵 越 小 ， 则互 信息 越小 ； 两个 事件 越不 接近 独立 分布 ， 相关性 越大 ， 熵 越 大 ， 则互 信息 越大 。   统计 语言 模型   S   一连串 顺序 排列 词语 ， S 文本 中 可能性 ， P ( S )   ，   利用 条件 概率 ：   $ $   P ( S )   =   P ( word1 ) P ( word2 | word1 ) P ( word3 | word1word2 ) ... P ( wordn | word1word2word3 ... wordn - 1 )   $ $   马尔科夫 假设   一连串 事件 序列 状态 发生 概率 只 依赖 于它 前 几个 状态 ， 事件 序列 马尔科夫 链 。   只 依赖 于它 前 一个 词 ， 模型 称为 二元 模型 ， 一阶 马尔科夫 链 ， 记作   bigram   依赖 于它 前 两个 词 ， 模型 称为 三元 模型 ， 二阶 马尔科夫 链 ， 记作   trigram   二元 模型 例子 ， 计算 一句 话 概率 ：   $ $   P ( S )   =   P ( word1 ) P ( word2 | word1 ) P ( word3 | word2 ) ... P ( wordn | wordn - 1 )   $ $   \\ ( P ( w _ i | w _ { i - 1 } ) \\ )   一个 词 下 一个 词 条件 概率 ， 利用 条件 概率 ：   $ $   P ( w _ i | w _ { i - 1 } )   =   P ( w _ iw _ { i - 1 } ) / P ( w _ { i - 1 } )   $ $   令 句 首 标记   < BOS >   令 句末 标记   < EOS >   。     \\ ( P ( w _ iw _ { i - 1 } ) \\ )   概率 两个 词在 文本 中所 占 频率 ， 等于   目标 两个 词 序列 记数 / 总 文本 记数     \\ ( P ( w _ { i - 1 } ) \\ )   是前 一个 词 次数 / 总 文本 数 ， ：   $ $   P ( w _ i | w _ { i - 1 } )   =   两个 词 序列 计数 / 前 一个 词的 计数   $ $   请 参看 宗 庆 成的 自然语言 第二 版 P85 例子 详细 理解 计算 一个 句子 概率 计算 方法 。   大数 定理   试验 条件 下 ， 重复 试验 ， 随机 事件 频率 近似 于它 概率 。   高阶 语言 模型   简单 二元 模型 只 假设 一个 词只 词 相关 ， 假设 N - 1 个词和 词 相关 ， 模型 称为 N 元 模型 。   古德 - 图灵 估计   统计 一个 句子 概率 计算 方法 ， 序列 语 料库 （ 统计 文本 ） 中 ， 次数 极少 。 句子 概率 计算 都 估算 为零 不 合适 。 古德 - 图灵 估计 解决 。   事件 ， 发生 概率 零 ， 概率 总量 中 分配 一个 很小 比例 给予 事件 。   计算 公式 ：   $ $   N   =   \\ sum _ 1 &# 94 ; { \\ infty } r   N _ r   $ $   公式 含义 很 ， 1 次 （ r = 1 ） 词有 （   \\ ( N _ r \\ )   ） ， 逐个 相加 总 词数 。 写成 形式 会 简单 ：   $ $   N   =   1N _ 1   +   2N _ 2   +   3N _ 3   ...   $ $   古德 - 图灵 估计 假设 r 次 （ 要到 小的 才 会上 估计 ） 规律 （ 次数 低 ， 0 次是 未知 ） ：   $ $   r &# 94 ; *   N _ r   =   ( r + 1 ) N _ { r + 1 }   $ $   公式 看起来 很 突兀 ， 理解 ：   $ $   N   =   2N _ 2   +   3N _ 3   +   4N _ 4   ...   $ $   次数 很少 词 次数 乘以 词的 次数 大体 次数 加一 ， 上一 次数 情况 估计 。 次数 很少 ， 公式 加到 无穷大 ， 估计 损失 极小 。     \\ ( r &# 94 ; * \\ )   次的 词 ， 概率 ：   $ $   P _ r   =   \\ frac { r &# 94 ; * } { N }   $ $   估计 方法 ， 还 剩下 一个   \\ ( 1N _ 1 \\ )   ， 未知 事件 ， 未知 事件 概率 估计 ：   $ $   P _ 0   =   \\ frac { N _ 1 } { N }   $ $   未知 事件 概率 等于 1 次的 词的 计数 除以 总 词数 。   中文 分词   自然语言 相关 ， 自然语言 研究 上下文 相关 特性 建立 数学 模型 ， 数学 模型 常说 统计 语言 模型 （ Statistical   Language   Model ） 。   贾里 尼克 ：   一个 句子 ， 就看 可能性 大小 。   有个 穷举 分词 方法 ： 一个 动态规划 ， 利用 维特 算法 （ Viterbi ） 解决 。   讨论 ， 基于 统计 词典 ， 一个 可能性 句子 分词 方法 ， 兼顾 准确性 性能 最佳 方案 ， 后续 很多 方法 都 站在 肩膀 上 ， 试着 更好 解决 词典 完善 命名 实体 识别 。   隐 马尔科夫 模型   广义 通信 模型   人与 人 之间 语言 ， 形式 信息 交流 ， 都 看做 一种 广义 上的 通信 模型 ， 一个 信号 编码 序列 某种 信息 载体 信道 中 发送 ， 接受者 接受 ， 转 码的 过程 。   找到 观测 信号 o1   o2   o3 ...   条件 概率 状态 信号   s1   s2   s3 ...   。 【 公式 argmax 一种 操作 ， 找到 表达式 最大值 】   $ $   s _ 1 ,   s _ 2 ,   s _ 3 ,   \\ dots   =   \\ underset {   s _ 1 , s _ 2 , s3 , \\ dots } { \\ arg \\ max }   P ( s _ 1 , s _ 2 , s _ 3 , \\ dots  |  o _ 1 , o _ 2 , o _ 3 , \\ dots )   $ $   条件 概率 ：   $ $   s _ 1 ,   s _ 2 ,   s _ 3 ,   \\ dots   =   \\ underset {   s _ 1 , s _ 2 , s3 , \\ dots } { \\ arg \\ max }   \\ frac { P ( s _ 1 , s _ 2 , s _ 3 , \\ dots )   \\ cdot   P (   o _ 1 , o _ 2 , o _ 3 , \\ dots  | s _ 1 , s _ 2 , s _ 3 , \\ dots ) } { P ( o _ 1 , o _ 2 , o _ 3 , \\ dots ) }   $ $   最大值 ， 观测 信号 发射 概率 忽略 ：   $ $   s _ 1 ,   s _ 2 ,   s _ 3 ,   \\ dots   =   \\ underset {   s _ 1 , s _ 2 , s3 , \\ dots } { \\ arg \\ max }   P ( s _ 1 , s _ 2 , s _ 3 , \\ dots )   \\ cdot   P (   o _ 1 , o _ 2 , o _ 3 , \\ dots  | s _ 1 , s _ 2 , s _ 3 , \\ dots )   $ $   s1 , s2 >   o1 , o2   条件 概率 状态 信息 s1 ... 传输 后 接受者 接受 o1 ... 概率 。   s1 , s2 ... 发送 端 随机 过程 概率 。   计算 过程 利用 隐 马尔科夫 模型 计算 。   马尔科夫 模型   马尔科夫 模型 ， 简单 易懂 。 随机 过程 ， 假设 研究 一个 系统 ， 系统 随机 吐出 信号 ， s1   s2   ...   系统 某种 激活 状态 。 随机 过程 生成 图形 描述 ：   例子 来自 宗 庆成 统计 自然语言 第二 版 P109 。   一段 文字 中 名词 、 动词 、 形容词 概率 三个 状态 马尔科夫 模型 描述 ， 状态 转移 矩阵 所示 【 矩阵 头从 左 右和 上 到下 依次   名词 ， 动词 ， 形容词 。 】 ：   $ $   \\ begin { bmatrix } 0.3   &   0.5   &   0.2   \\ \\   0.5   &   0.3   &   0.2   \\ \\   0.4   &   0.2   &   0.4 \\ end { bmatrix }   $ $   假设 观察 序列   名   动   形   名   ， 序列 概率 ：   $ $   P ( 名 ) * P ( 动 | 名 ) * P ( 形 | 动 ) * P ( 名 | 形 )   =   0.5 * 0.2 * 0.4   =   0.04   $ $   马尔科夫 模型 其内 暗含 假定 ：   其内 随机 过程 马尔科夫 链 过程 ， 状态 只 受前 一个 状态 影响 。   隐 马尔科夫 模型   隐 马尔科夫 模型 讨论 上 ， 引入 东西 ， 观察 系统 s1   s2   状态 ， 只能 观察 系统 抛 信号   o1   o2 ... ， 就和 讨论 广义 通信 模型 接近 ， 正 隐 马尔科夫 模型 很 通用 ， 条件 机场 模型 是站在 隐 马尔科夫 模型 基础 上的 ， 隐 马可 夫 模型 其内 思想 内核 触及 广义 通信 模型 内核 ， 广义 通信 模型 用来 看待 信息 传输 ， 包括 自然语言 ， 人的 沟通 交流 看做 一种 信息 传输 过程 （ 想象 ， 人和 机器 语言 某种 人机交互 ， 符合 广义 通信 模型 ） 。   而隐 马尔科夫 模型 说 观察 到的   o1   o2   ...   是和 系统 状态   s1   s2 相关 ， 自然 。 隐 马尔科夫 模型 马尔科夫 链 过程 简单 模型 做 假定 ：   o1 只和 s1 相关 ， o2 只和 s2 相关 。   隐 马尔可 夫 模型 大方向 是没 ， 引入 马尔科夫 链对 状态 相关性 做了 太 多的 简化 ， 条件 机场 模型 会 进一步 完善 。   讨论 马尔科夫 模型 引入   状态 转移 矩阵   ， 系统 启动 还 一个 起始 状态 ， 隐 马尔可 夫 模型 讨论 引入   混淆 矩阵   概念 。 混淆 矩阵 描述 隐 状态 s 输出 信号 o 之间 概率 关系 。   观察 序列 生成 模型   jieba 分词 HMM 模型 数据 统计 ， 用到 前向 - 后向 算法 。 BMES 四个 隐藏 状态 ：   B   标注 字的 位置 一个 词   M   标注 字的 位置 一个 词的   E   标注 字的 位置 一个 词的 结束   S   标注 字是 单独 成词   先把 训练 文本 整成 输入 序列 ：   整成 二元 组 ：   二元 组 统计 分析 ， 第一个 为因 ， 第二个 为果 。   状态 转移 矩阵 分析 第一 BMES 第二 果 BMES 条件 概率 。 比如说   P ( E | B )   =   P ( BE ) /   P ( B )   =   C ( BE ) / C ( B )   ， 统计 BE 序列 次数 除以 第一 B 次数 。   发射 矩阵 分析 第一 BMES 第二 果 字符 条件 概率 。   更 读者 请 参见 编写   fenci 项目 hmm 文件夹 下的 train _ hmm . py 脚本   。   维特 算法   条件 机场   条件 机场 算是 中的 一个 算法 ， 基于 HMM 隐 马尔可 夫 模型 。   参考 资料   数学 美   第二 版   吴军 著   统计 自然语言   第二 版   宗成 庆   52nlp 上 hmm 教程   脚注   请 读者 参看   知   maxdeath 讨论 。   ↩",
            "tags":"nlp",
            "url":"articles/zi-ran-yu-yan-chu-li-ru-men.html"
        },
        {
            "title":"centos7系统学习",
            "text":"安装 系统   centos7 安装 难点 硬盘 分区 上 ， 加上 最新 uefi 启动 方式 ， 新的 讨论 。   记得 早起 折腾 ubuntu 系统 时 ， 一个 影响 linux 系统 安装 预先 分出 一个 swap 分区 ， 内存 两倍 ， 还 不 太 懂 ， 《 鸟哥的 私房 菜 里的 描述 ，   服务器 内存 都 十几 G - 64G 内存 ， 公式 来了 — — 分出 3 - 4Gswap 分区 。   硬件 linux 下的 名字   下 ， 参考   鸟哥的 私房 菜 第二章   ，   硬盘 USB 模拟 硬盘   ：   / dev / sd [ a - p ]   CDROM DVDROM   :   / dev / scd [ 0 - 1 ]   ,   / dev / cdrom （ cdrom ）   ,   / dev / sr [ 0 - 1 ]   打印机   ：   / dev / lp [ 0 - 2 ]   ,   / dev / usb / lp [ 0 - 15 ]   鼠标   ：   / dev / input / mouse [ 0 - 15 ]   ,   / dev / mouse   ( 鼠标 )   分区 推荐   鸟哥的 私房 菜 推荐 ， 随便 玩玩 ， 工作 服务器 ， 推荐 多分 几个 区 ：   / boot   /   / home   / var   swap   firewall - cmd   防火墙 策略 管理 命令 ：   firewall - cmd   ，     list -   列出 开启 端口号 情况 ，   add - port   开放 端口号 ， ：   更 细节 请 参看   篇 文章   ， 常用 用法 简要 。   NOTICE :   提及 操作 不 加   permanent   参数 临时 ， 重启 firewalld 服务 就会 配置 丢失 。   systemd   systemd linux 初始化 系统 渐趋 主流 ， 比原 upstart 有更 快的 启动 速度 。 尽可能 启动 更 少的 进程 尽可能 更 进程 并行 启动 。 提高 并发 启动 加速 系统 启动 ， systemd 脚本 编写 人员 系统 启动 单元 服务 之间 依赖 关系 有很 。   systemd 参考 手册 推荐   金步国 翻译 systemd 中文 手册   。   systemd 服务   systemctl   命令 管理 ， 实际上 systemd ， 取代 inid pid 1 进程 ， 很多 进程 都是 启动 ， 还 systemctl 重启 电脑 ， systemd 服务 多么 底层 ：   systemctl   reboot   systemctl   poweroff   system systemd 服务 脚本 放在   / usr / lib / systemd / system   ， 用户 systemd 服务 脚本 放在   / usr / lib / systemd / user   。 放在   / / systemd / system     / / systemd / user   。   也就是说 linux 系统 初始化 进程 systemd ， 后续 基本上 服务 进程 都是 systemd 管理 ， 系统资源 systemd 都 单元 Unit 。 一种 分为 12 种 单元 ：   Service   最 常用 单元 类型 ， 一个 后台 服务 进程 。   Target     [ Target ]   配置 选项 ， 作用 依赖 汇成 一组 单元 ， 一组 单元 取 一个 名字 ， 组 单元 启动 单元 依赖 关系 。   Device   硬件 设备   Mount   文件系统 挂载 点   Automount   自动 挂载 点 ， 自动 挂载 点被 访问 时 ， systemd 执行 定义 挂载   Path   文件 路径   Scope   systemd 启动 外部 进程   Slice   进程 组   Snapshot   systemd 快照   Socket   套 接字   Swap   swap 文件   Timer   定时器     systemctl   list - units   列出 系统 运行 unit 。   列出 一个 systemd 服务 脚本 例子 ，   Unit     Install   配置 节都 ， 服务 脚本 特有   Service   配置 节 。   配置 文件 放在   / usr / lib / systemd / system   ， 希望 配置 单元 开机 启动 ， 运行   systemctl   enable   . service   来让 配置 单元 激活 开机 启动 ， 其将 创建 一个 符号 链接   / / systemd / system   。 撤销 开机 启动   systemctl   disable   . service   。   Unit 配置 节   Unit   -   Description   描述 文字   Unit   -   Documentation   单元 文档   Unit   -   Requires   设置 单元 依赖 关系 。 列出 单元 启动 失败 ， After 中也 列出 单元 ， 则本 单元 启动 。 依赖 单元 显式 停止 ， 单元 会 停止 。   Unit   -   Wants   设置 单元 依赖 关系 ， 相当于 Requires 弱化 版本 ， 依赖 单元 尽可能 启动 ， 单元 不 启动 不 影响 单元 启动 。   Unit   -   After   强制 单元 顺序 ， 是指 单元 强制 列表 中的 单元 。   Unit   -   Before   强制 单元 顺序 ， 是指 单元 强制 列表 中的 单元 ， 两个 单元 都要 启动 时 ， 单元 会 延迟 单元 启动 完毕 再 启动 。   Install   配置 节   systemctl   enable disable 才 Install 配置 节 ， 常 选项 ：   相当于 multi - user . target 配置 上 加上   Wants = 单元   ， multi - user . target 启动 单元 启动 ， 默认 linux 启动 单元 default . target ， default . target multi - user . target 。   Install   -   WantedBy   Service 配置 节   Service   -   Type   启动 类型 ， simple ：   默认 值 ， 启动 服务 ；   forking ： fork 方式 启动 进程 ； oneshot ： 一次性 进程 ； dbus ： dbus 启动 ； notify ： 服务 启动 完毕 ， 通知 systemd ， 向下 执行 。   Service   -   PIDFile   pid 文件 路径   Service   -   ExecStartPre   启动 前 动作   Service   -   ExecStart   启动 动作   Service   -   ExecReload   reload 动作   Service   -   ExecStop   停止 动作   Service   -   PrivateTmp   临时 空间   Service   -   ExecStartPost   启动 后 动作   system 常规 启动 流程   Mount 单元   请 参考   金步国的 systemd . mount   中文 手册   中的 相关 讨论 。   Timer 单元   Timer 单元 针对 服务 进程 配置 定时 很 ， 大体 crontab 类似 功能   服务 文件 修改   推荐 配置 文件 外移 ， 服务 文件 设置 好 没 修改 ， 服务 文件 修改 ：   日志 管理   systemd 统一 管理 日志 ， 可用   jourlnalctl   命令 查看 。 点名 要看 服务 Unit ：   启动 服务   启动 服务 重启 服务 暂停 服务 想 都很 熟悉 了吧 ：   centos7 配置 dns   发现 centos7 配置 dns 重启   network   服务 配置 就会 丢失 ，   main 加上   重启   再 如同 修改   / / resolv . conf   。   配置 语言   查看 操作系统 语言     列出 可用 语言     修改 操作系统 语言   参考 资料   鸟哥的 私房 菜   systemd 入门 教程 命令   systemd 详解   浅 析   Linux   初始化   init   系统 - systemd",
            "tags":"linux",
            "url":"articles/centos7.html"
        },
        {
            "title":"blender入门操作学习",
            "text":"前言   本文 基于 blender 版本   2.8   。   视图 导航   blender 下   .   聚焦 选中 物体 。   视图 导航 缩放 则是   鼠标 滚轮   。   视图 正面 平移 blender   Shift + 鼠标 中 键   。   blender 视图 旋转   鼠标 中 键   。   blender 小 数字 键在 视图 导航 上都 有是 特别 用途 ， 说 到的   .   聚焦 选中 物体 ，   0   相机 视图 ，   5   透视 视图 正交 视图 切换 ， 数字 都有 用途 ， 视图 调整 ， 不 一一 介绍 ， 读者 熟悉 即可 。 下   `   获取 视图 导航 pie 面板 。   选择 操作   默认 左 键 点击 物体 选择 物体 ， 点到 空白 位置 则是 去 选择 。 多选 按住 shift 点击 物体 。   下   A   选择 ， 下   Alt + A   是去 选择 。   下   B   矩形 选择 ， 鼠标 左 键 ， 执行 矩形 选择 ， 下 鼠标 中 键 ， 执行 去 选择 操作 。 选择 完 鼠标 右键 退出 选择 模式 。   下   C   圆圈 选择 ， 鼠标 左 键 ， 执行 圆圈 选择 ， 下 鼠标 中 键 ， 执行 去 选择 操作 。 选择 完 鼠标 右键 退出 选择 模式 。   旋转 缩放 操作   选择 物体 ， 下   G   随意 物体 模式 ， 物体 会 鼠标 随意 ， 下   G   ， 下   X   ， 则将 X 轴 ， 轴 类似 。 过程 中按 下 鼠标 右键 ， 取消 ， 点击 鼠标 左 键则 确认 。   下   G     Shift + z   则将 z 轴 锁定 模式 ， z 轴 随意 ， 将在 一个 垂直 z 轴的 平面 。   下   G   点击 鼠标 中 键 ， 则将 三 轴 吸附 模式 ， 要看 鼠标 方向 。   下   R   随意 旋转 模式 ， 下   R   ， 再 下   X   则将 X 轴 旋转 ， 类似 操作 讨论 ， 不 赘述 。   下   S   物体 比例 整体 缩放 ， 下   S   ， 再 下   X   物体 X 轴缩 放 。 下   Shift + z   则会 z 面缩 放 。   物体 内部 Local 坐标系   讨论 X 轴 全局 XYZ 轴 ， 选择 物体 Local 坐标系 ， 很多 坐标系 选择 。   物体 游标 面板   下   Shift + S   打开 物体 游 标的 快捷 pie 面板 ， 选择 游标 选中 项 ， 游标 世界 原点 物体 到游 标 位置 。   下   shift   点击 鼠标 右键 ， 则将 会 设置 游标 此处 。 添加 物体 会在 游 标之 处 添加 。   旋转 缩放 点   默认 边界 框 中心点 ， 设置 3d 游标 ， 3d 游 标点 旋转 动作 。   操作   左 工具 面板 右 属性 面板   blender   下   T   打开 左 面板 ， 下   N   打开 右 面板 。   快捷 复制 物体   下   Shift + D   快捷 复制 物体 ， 点击 鼠标 右 键的 取消 过程 ， 物体 复制 。   快捷 添加 物体   下   Shift + A   打开 快捷 添加 物体 菜单 。   删除 对象   说的 对象 物体 ， 删除 动作 很 很多 地方 都是 通用 。 下   X     Delete   ， 推荐   X   ， 情景 下有 更 选项 。   操作 面板 最大化   blender 操作 面板 下   Ctrl + space   最大化 效果 。   打开 物体 渲染 方式 面板   选择 物体 下   z   打开 物体 多种 渲染 方式 面板 ， 有线 框 、 实体 、 渲染 材质 预览 。 线框 查看 模式 很 选择 实体 下 难以 选择 物体 。   添加 物体 后 额外 参数 修改   添加 物体 额外 参数 修改 ， 很 关键 参数 尽可能 模型 尺寸 接近 真实世界 尺寸 。 建模 网格 不 太细 ， 表面 细分 修饰 （ subsuface   modifier ） 。   collections   collection blender 用来 管理 对象 类似 文件夹 概念 ， blender 默认 collection 场景 集合 。   选中 物体 下   M   物体 新的 collection ， 大纲 面板 创建 collection 。   公用 物体 相关 collection 外围 。   大纲 删除 collection 删除 物体 。   collections 勾 选或 去 勾 选会 影响 视图 操作 渲染 画面 ， 眼睛 图标 打开 关闭 则只 影响 视图 操作 ， 不 影响 渲染 画面 。   modeling 工作 空间   最 Layout 工作 空间 ，   Tab   切换 物体   物体 模式     编辑 模式   。 modeling 工作 空间   Tab   切换 物体 模式 编辑 模式 。 物体 模式 物体 ， 编辑 模式 则是 只 点和 面 。   modeling 工作 空间 建模 两个 原因 ， 一是 modeling 工作 空间 下 编辑 界面 操作 针对性 优化 ， modeling 工作 空间 选择 添加 ， 选项 网格 体 ； modeling 工作 空间 下 选中 物体 物体 编辑 模式 ， 编辑 模式 下 添加 操作 扩展 物体 都会 一个 物体 ， 离开 编辑 模式 物体 模式 旋转 操作 会 一个 物体 效果 。   物体 模式 下 选择 多个 物体 再 编辑 模式 ， 物体 都是 编辑 ， 物体 之间 顶点 连接 操作 。 物体 模式 下 选择 两个 物体 ，   Ctrl + J   合并 两个 物体 。   编辑 模式 下 谈及 选择 操作 都是 可用 。 编辑 模式 选项 右边 ， 切换 点 选择 模式 ， 选择 模式 面 选择 模式 。 按着   Shift   则是 执行 多选 动作 ， 提到 三种 选择 模式 选的 ， 按着   Shift   多选 。   编辑 模式 下   Alt + 鼠标 左 键   会 执行 loop 选择 ， 大概 水平线 全 选或 垂直线 全选 。 下   Ctrl + I   翻转 选择 。 希望 临时 隐藏 节点 ， 下   H   会 临时 隐藏 选择 节点 ，   下   Alt + H   会 显示 隐藏 节点   。 下   Ctrl + L   会 执行 关联 节点 全 选 动作 。   衰减 编辑   快捷 键   O   启用 衰减 编辑 模式 。 假设 不 启用 衰减 编辑 ， 拖动 节点 ， 节点 会被 拖动 ， 启用 衰减 编辑 模式 ， 则在 内 包含 节点 都将 类似 拖动 ， 拖动 比例 衰减 编辑 模式 选项 而定 。   说的 衰减 编辑 影响   PageUp     PageDown   两个 按键 调节 。   吸附 编辑   节点 ， 希望 节点 吸附 物体 面上 ， 选择 吸附 编辑 吸附 到面 选项 ， 勾 选 项目 中的 独立 元素 ， 衰减 编辑 模式 下 中受 影响 节点 会 吸附 动作 。   表面 细分 修饰 器   表面 细分 修饰 器 用来 进一步 细分 模型 面 。 修饰 器是 临时 ， 回 滚的 ， 是和 网格 节点 上 细分 。   实体 化 修饰 器   加厚 细面   X 射线 透视 视图     Alt + Z   开启 X 射线 透视 视图 ， 视图 下很 选择 覆盖面 节点 。   复制 节点 分离   选中 节点 复制 节点   Shift + D   ， 下 快捷 键   P   来讲 新的 选中 节点 分离 成 一个 新的 物体 。   挤出 区域 （ extrude ）   效果 选择 一个 面 ， 面 挤出 。 挤出 操作 点击 小 图标 ， 则是 面的 垂直线 法线 挤出 ， 点击 白圈 任意 点 任意 方向 拖动 挤出 。 挤出 过程 右键 取消 挤出 面 ， 取消 取消 动作 。   选中 一个 面 ， 下   E   ， 快速 执行 法线 挤出 动作 。 来自 面 上下文 菜单 快捷 键 ， 下   Ctrl + 鼠标 右键   ， 快速 执行 任意 位置 挤出 动作 。   按住 挤出 工具 栏会 弹出 额外 几个 选项 ， 挤出 面是 法线 挤出 ， 很 有用 。   环 切 （ loop   cut ）   环 切会 新 切出 一个 面 。   环 切的 拖动 调整 位置 。 下 快捷 键   Ctrl + R   编辑 模式 下会 自动 环 切 。   倒角 （ bevel ）   快捷 键是   Ctrl + B   ， 倒 角是 物体 顶点 显得 尖 尖的 ， 斜面 。 还 修改 器 添加 倒角 修改 器 。 倒角 修改 器还 修改 材质 参数 ， 限定 方式 额外 参数 （ 编辑 模式 下倒 角 操作 下的 参数 相 ） 。 修改 器的 特性 都是 预览 回 滚的 ， 用倒 角 修改 器也 是是 不错 选择 。   切割 （ knife ）   切割 工具 一把 小刀 物体 模型 上 随意 切割 出 节点 ， 切割 动作 鼠标 点击 ， 下   E   本此 切割 临时 生效 ， 临时 生效 切割 动作 完善 生效 下   Enter   【 spacebar 空格 键也 】 。 鼠标 右 键是 取消 切割 ， 提到   E   临时 本次 切割 ， 还   Enter   下 鼠标 右键 临时 切割 动作 都会 取消 。   切割 一个 选项 切分 ， 切分 相当于 物体 某种 切分 动作 ， 类似 于环 切 。 新增 切分 属性 调节 很 有用 ， 切分 出 理想 平面 距离 。   Shading 工作 空间   Shading 工作 空间 用来 物体 阴影 相关 设计 。   连接 两个 面板 之间 节点 鼠标 左 键 点击 连接 即可 ， 断开 连接 下 Ctrl 选择 节点 即可 。   Sculpting 工作 空间   按键   F   调整 影响 区域 大小 。   雕刻 模式 一般来说 推荐 购买 一个 手绘 板   手绘 板在 设置 上 按键 推荐 换成 鼠标 中 键 ， 按着 浏览 物体 。   自由 线   画 线是 凸起 来的 线 ， 按住   Ctrl   画线 则是 凹 进去 线 。   光滑   区域 光滑   膨胀   区域 膨胀   UV   编辑 工作 空间   灯光   灯光 三点 ：   key   light   主 光源   物体 感觉 到主 光源 来自 ， 物体 主 光源 来自 场景 光源   fill   light   很 弱的 副 光源 ， 正面 打光   rim   light   很 强的 背对 摄像头 光源 。   渲染     渲染 属性   设置 渲染 引擎 ， 默认 eve 渲染 引擎 ， 更好 渲染 引擎 cycles 引擎 ， 开销 会更 大 。   渲染 调配 好 光源 参数 。   下   F12   快捷 键来 渲染 图像 。 下   Ctrl + F12   快捷 键来 渲染 动画 。   Ctrl + Alt + 0   【 数字 0 】   摄像头 到你 观察 位置   输出 图像   输出 图像 设置   输出 属性   设置 。   参考 资料   Blender   Beginner   Tutorial   Series   Blender   Fundamentals   2.8",
            "tags":"blender",
            "url":"articles/blender-first-tutorial.html"
        },
        {
            "title":"CPP语言学习笔记",
            "text":"前言   教程 参考   github 样例 项目   阅读 更 。   本文 假定 读者 学会 C 语言 ， 请先 学习 C 语言 ， 不 冲突 。 读者 参看 笔者 写的   C 语言 学习 笔记 一文   。   CPP 语言 开发 环境   CPP 语言 开发 环境 推荐 visual   studio 。     world   头 文件 扩展 名   cpp 新的 风格 头 文件 扩展 名的 ，   iostream     iostream   ， . h . hpp ，   namespace   std   。 旧的 风格 大体 类似 C 语言 带上   . h   后缀 。   命名 空间   算是 C 语言 很大 一个 不同点 ， 命名 空间 概念 熟悉 编程 人 来说 一个 默认 概念 ， 大体 类似 python 模块 名 ， 编程 语言 类似 概念 。 ：   一个 调用 命名 空间 Microflot 函数 ， 一个 调用 GooGloo 命令 空间 函数 。   world 程序     namespace   std ;   写的 ：   类似 python       import   *   函数 名等 都 导 进来 ， cin ， cout 。 一种 推荐 做法 ：   大体 类似 python       import   cout   ， 导入 函数 名 。   cout 对象   cout 一个 对象 ， 内部 方法 打印 字符串 。   代码 过程 cout 对象 调用 插入 运算 符   < <   ， 执行 操作 字符串 插入 输出 流中 。   std : : endl 一个 C ++ 符号   【 换行符 ？ 】 ， 插入 输出 流将 导致 屏幕 光标 换行 。   ，   cout 打印 int 数值 。   声明 变量   cpp c 语言 区别 cpp 推荐 首次 变量 声明 文件 开头 。   cin   cout 相 C 语言 一套 实在 多了 ， cout 简单 字符串 拼接 操作 。   定义 函数   cpp c 语言 函数 定义 函数 原型 声明 这块 来说 区别 太大 。 熟悉 C 语言 这块 简单 温习 下就 好 。   数据 类型   整型 ： short ， int ， long     long   long   。 说服力 理由 应 int 。   char 类型 ： char 类型 用于 存储 一个 字节 大小 字符 ， 用于 存储 short 更 小的 整型 。   bool 类型 ： true     false   符号 常量 修饰 符 ： const   浮点 数 类型 ： float 、 double 、 long   double 。   1 ． 编写 一个 小 程序 ， 用户 一个 整数 指出 身高 （ 单位 英寸 ） ， 身高 转换 英尺 英寸 【 是取 整部 分为 英尺 余下 英寸 】 。 程序 下划线 字符 指示 输入 位置 。 ， 一个 const 符号 常量 转换 因子 。   inch2foot . cpp   注解 ：   %   取模 运算 ， 整数 之间 除法 取商 运算 。   3 ． 编写 一个 程序 ， 用户 以度 、 分 、 秒的 方式 输入 一个 纬度 ， 度为 单位 显示 纬度 。 1 度为 60 分 ， 1 分 等于 60 秒 ， 请以 符号 常量 方式 值 。 输入 值 ， 应 一个 独立 变量 存储 。 程序 运行 时的 情况 ：   _ degress . cpp   注解 ：   例 演示 const 定义 常数 项的 用法 。   5 ． 编写 一个 程序 ， 用户 输入 全球 人口 美国 人口 （ 国家 人口 ） 。 信息 存储 long   long 变量 中 ， 程序 显示 美国 （ 国家 ） 人口 占 全球 人口 百分比 。 程序 输出 应与 类似 ：   usa _ population . cpp   注解 ：   例 演示 强制 类型 转换 。   7 ． 编写 一个 程序 ， 用户 欧洲 风格 输入 汽车 耗油量 （ 100 公里 消耗 汽油 量 （ 升 ） ） ， 转换 美国 风格 耗油量 — 加仑 英里 。 ， 单位 计量 外 ， 美国 方法 （ 距离 / 燃料 ） 欧洲 方法 （ 燃料 / 距离 ） 。 100 公里 等于 62.14 英里 ， 1 加仑 等于 3.875 升 。 ， 19mpg 合 12.4 l / 100km ， 27mpg 合 8.71 / 100km 。   _ usa _ mpg . cpp   long   totals [ 500 ]   =   { 0 } ;   / / 初始化 一个 500 元素 数组 ， 索引 0 元素 设值 0 ， 元素 自动 设值 0 。   ：   long   totals [ 500 ]   =   { }   ;   / /   元素 都 自动 设值 0 。   字符串 类型 ， C 意义 上 来说 字符串 类型 ， C 语言 风格 字符串 略过 讨论 ， C ++ 添加 string 类 ， 包含 头 文件 string ， string 类了 。   熟悉 C 语言 风格 字符串 一个 区别 ， 初始化 字符串 变量 ， 不 操作 数组 长度 东西 ， 改进 ！   C 语言 风格 字符串 不 一个 字符串 值 赋值 一个 字符串 ， string 类 做 ：   还 加法 字符串 拼接 ， 终于 ， 类似 python 字符串 操作 C 语言 还要 人 头疼 好久 终于 顺畅 。   请求 行 输入 历史 原因   cin . getline ( charstr ,   max _ size )   更 接近 C 语言 中 熟知 那种 概念 ， 友元 函数   getline ( cin ,   string )   反而 更 接近 C ++ 风格 ， cin C ++ 概念 ， 会 预期 cin 类 方法 会 对接 string 接口 ， 历史 兼容 原因 ， 没什么 特别 理由 要弄 反 常规 。   C ++ 结构 东西 来说 C 语言 讨论 太大 区别 ， C ++ 结构 体 string 类 成员 对象 。 特别 C 语言 字符串 数组 实际上 字符串 内存 存储单元 ， 字符串 不定 长 ， 字符串 数组 存放 指针 ， 结构 数组 ， C 语言 结构 体是 ， 看做 一个 内存 存储单元 ， 结构 数组 一个 一个 结构 体而 指向 结构 体的 指针 。 结构 体 数组 引用 语句   struct _ array [ 0 ] .   。   C ++ Union enum 枚举 C 语言 讨论 太大 区别 。   C ++ 指针 相关 内存 管理 malloc C 语言 讨论 太大 区别 ， C ++ 编程 程度 上 弱化 指针 概念 ， 很多 地方 C ++ 编程 不 指针 ， 内存 管理 不 推荐 malloc 函数 推荐 delete 运算 符 。   C ++ 类型 结构 声明 一个 内存 块 ， 给定 指针 名来 指向 ， 引用 它和 。   东西 只能 指针 ， 参考 资料 1 说 东西 更 确切 来说 数据 对象 ， 变量 数据 对象 。 说 ， 指 内存 里的 东西 。   delete 运算 符 只能 用于 讨论 指针 。 所示 ：   创建 数组 结构 有所不同 ， 数组 例 ， 常规 声明 数组 静态 联编 （ static   binding ） ， 即在 编译 阶段 为该 数组 申请 分配 好 内存 ； 创建 数组 只 运行 阶段 才 创建 ， 运行 阶段 没 数组 创建 ， 称为 动态 联编 （ dynamic   binding ） 。 数组 动态 数组 。   例子 演示 动态 数组 ， 运行 时 用户 指定 数组 大小 ， 运行 时 给定 值 ：   动态 数组   delete   运算 符 语句 加上   [ ]   。   指针 C 语言 东西 ， 回顾 提醒 ，   arr [ 1 ]     * ( arr + 1 )   一个 ，   arr [ 0 ]     * arr   一个 。   指针 数组 这块 东西 很多 ， 都是 C 语言 知识点 ， 略过 讨论 ， 读者 自觉 这块 欠缺 ， 请在 C 语言 教材 补习 。   一个 动态 字符串 ， 或者说 动态 字符 数组 ， 。 string 类 内部 做的 ， 没 去 重复 造 轮子 ， string 类 。   结构 参照 讨论 ， 类似 动态 结构 。 动态 结构 倒 说 结构 定义 动态 ， 结构 体的 定义 要做 。   C 语言 存储 类型 自动 存储 静态 存储 ， 简单 来说 自动 存储 变量 存活 程序 自动 管理 ， 静态 存储 变量 程序 运行 期都 存活 。 一块 C ++ C 语言 ， C ++ 讨论 运算 符 提出 一个 新的 存储 类型 ， 动态 存储 。 delete 运算 符 管理 内存 池和 静态 变量 自动 变量 内存 池是 分开 ， 自由 存储 空间 堆 。 动态 存储 变量 delete ， 内存 泄漏 ， 内存 泄露 程序 内存 没法 用了 ， 点本 程序 运行 内存 耗尽 ， 内存 程序 崩溃 。 参考 资料 说 泄漏 导致 操作系统 程序 崩溃 。   类似 string 类 ， C ++ vector 类来 动态 数组 ， 类似 string 类的 讨论 ， 利用 delete 某种 动态 数组 效果 ， 重复 造 轮子 ， 请用 vector 类 ， vector 类 内部 做的 。 动态 数组 例子 写成 vector 版本 ：   vector 类 很多 用法 ， 重点 。 vector 初始化 不 指定 长度 参数 ， push _ back 方法 新增 元素 。   vector 类 动态 数组 ， 效率 低 ， C ++ 一个 新的 类 array 类 ， 内部 存储 数组 存储 风格 ， 效率 等价 ， 是类 ， 多了 便捷 操作 方法 。 方法 时间 再 慢慢 。   编写 一个 C ++ 程序 ， 下述 输出 示例 示的 请求 显示 信息 ：   ， 程序 接受 名字 包含 多个 单词 。 ， 程序 向下 调整 成绩 ， 即向 下调 一个 字母 。   xiti _ c4 _ 1 . cpp   注解 ：   字符 cout ， 类型 int 型了 ， 希望 输出 字符   cout .   。   编写 一个 程序 ， 用户 输入 名 ， 输入 姓 ； 程序 一个 逗号 空格 姓和 名 组合 ， 存储 显示 组合 。 请 char 数组 头 文件 cstring 中的 函数 。 程序 运行 时的 情形 ：   xiti _ c4 _ 3 . cpp   注解 ：   例 下 C 风格 字符 数组 用法 。   结构 CandyBar 包含 3 成员 。 第一个 成员 存储 糖块 品牌 ； 第二个 成员 存储 糖块 重量 （ 小数 ） ； 第三个 成员 存储 糖块 卡路里 含量 （ 整数 ） 。 请 编写 一个 程序 ， 声明 结构 ， 创建 一个 名为 snack CandyBar 变量 ， 并将 成员 初始化 \" Mocha   Munch \" 、 2.3 350 。 初始化 应在 声明 snack 时 。 ， 程序 显示 snack 变量 内容 。   xiti _ c4 _ 5 . cpp   注解 ：   例 演示 结构 体的 用法 。   结构 CandyBar 包含 3 成员 ， 讨论 。 请 编写 一个 程序 ， 创建 一个 包含 3 元素 CandyBar 数组 【 动态 分配 数组 ， 声明 一个 包含 3 元素 CandyBar 数组 】 ， 初始化 为所 选择 值 ， 显示 结构 内容 。   xiti _ c4 _ 6 . cpp   注解 ：   例 演示 一个 结构 体 。   William   Wingate 比萨饼 分析 服务 。 披 萨饼 ， 都 记录 信息 ：   披 萨饼 公司 名称 ， 多个 单词 。   披 萨 饼的 直径 。   披 萨 饼的 重量 。   请 设计 一个 存储 信息 结构 【 请 来为 结构 分配 内存 ， 请 vector 动态 数组 】 ， 编写 一个 结构 变量 程序 。 程序 请求 用户 输入 信息 ， 显示 信息 。 请 cin （ 方法 ） cout 。   xiti _ c4 _ 7 . cpp   注解 ：   例 演示 vector 用法 。   程序 逻辑   这块 C ++ C 语言 内容 基本上 没什么 区别 ， 大多 略过 ， 做 习题 算是 学到 东西 再 。   C ++ 语句 多了 一个 新的 形式 ， 下 ：   熟悉 python 语言 高级 语言 迭代 遍历 循环 操作 ， 数组 vector array 。   cin 用法 请看 演示 例子 ， 补充 知识点 ： cin . 获取 字符 返回 仍 cin 对象 ， bool 取值 环境 ， 读取 成功 返回 true ， 读取 失败 返回 fasle 。 读取 失败 包括 常规 EOF 结尾 情况 。   1 ． 编写 一个 用户 输入 两个 整数 程序 。 程序 计算 输出 两个 整数 之间 （ 包括 两个 整数 ） 整数 的和 。 假设 先 输入 小的 整数 。 ， 用户 输入 2 9 ， 程序 指出 2 ～ 9 之间 整数 的和 44 。   xiti _ c5 _ 1 . cpp   注解 ：   例 演示 写 语句 。   3 ． 编写 一个 用户 输入 数字 程序 。 每次 输入 后 ， 程序 都将 报告 为止 ， 输入 累计 。 用户 输入 0 时 ， 程序 结束 。   xiti _ c5 _ 3 . cpp   注解 ：   例 演示 - 语句 。   5 ． 假设 销售 《 C ++   For   Fools 书 。 请 编写 一个 程序 ， 输入 全年 中 月的 销售量 （ 图书 数量 ， 销售额 ） 。 程序 循环 ， 初始化 月份 字符串 char   * 数组 （ string 对象 数组 ） 逐月 提示 ， 输入 数据 储存 一个 int 数组 中 。 ， 程序 计算 数组 中各 元素 总数 ， 报告 一年 销售 情况 。   xiti _ c5 _ 5 . cpp   注解 ：   例 演示 新式 语句 。   6 ． 编程 5 ， 一个 二维 数组 存储 输入 — 3 年中 月的 销售量 。 程序 报告 销售量 三年 总 销售量 。   xiti _ c5 _ 6 . cpp   注解 ：   例 演示 二维 数组 用法 。   10 ． 编写 一个 嵌套 循环 程序 ， 用户 输入 一个 值 ， 指出 显示 行 。 ， 程序 显示 行数的 星号 ， 第一行 包括 一个 星号 ， 第二行 包括 两个 星号 ， 依此类推 。 一行 包含 字符 数 等于 用户 指定 行数 ， 星号 情况 下 ， 星号 加上 句点 。 程序 运行 情况 ：   xiti _ c5 _ 10 . cpp   注解 ：   例 语句 ， 才有 写法 。   例子 中   cin   > >   fish [ i ]   返回 cin 对象 ， bool 值 含义 获取 输入 成功 返回 true ， 获取 输入 失败 返回 false 。   cinfish . cpp   cinfish2 . cpp   例子 类似 一个 用户 交互 请求 输入 数字 例子 ， 是上 一个 用户 输入 有误 退出 ， 一个 用户 输入 有误 程序 会 请求 用户 输入 。 上 一个 例子 演示 不定 数目 输入 情况 ， 一个 演示 用户 输入 有误 情况 。 例子 尽可能 两个 例子 结构 变动 不 大 。   注解 ：   cin . clear ( )   是让 cin 错误 输入 接受 输入 。 语句 清空 缓存 区那 一行 错误 输入 。   例子 演示 写入 文件 ：   outfile . cpp   新建 一个 ofstream 对象 ， open 方法 输出 流和 目标 文件 ， 剩下 来的 动作 cout 区别 ， 记得 文件 输出 流 调用 close 方法 关闭 。   precision 方法   控制 输出 流 浮点 数的 精度   setf ( ios _ base : : showpoint )   显示 浮点 数 小数点 零   1 ． 编写 一个 程序 ， 读取 键盘 输入 ， @ 符号 为止 ， 回 显 输入 （ 数字 除外 ） ， 大写 字符 转换 小写 ， 小写 字符 转换 大写 （ 别忘 cctype 函数 系列 ） 。   xiti _ c6 _ 1 . cpp   3 ． 编写 一个 菜单 驱动程序 雏形 。 程序 显示 一个 提供 4 选项 菜单 — — 选项 一个 字母 标记 。 用户 选项 之外 字母 响应 ， 程序 提示 用户 输入 一个 字母 ， 用户 做 为止 。 ， 程序 一条 switch 语句 ， 用户 选择 执行 一个 简单 操作 。 程序 运行 情况 ：   xiti _ c6 _ 3 . cpp   5 ． Neutronia 王国 ， 货币 单位 tvarp ， 收入 所得税 计算 方式 ：   5000   tvarps ： 不 收税   5001 ～ 15000   tvarps ： 10%   15001 ～ 35000   tvarps ： 15%   35000   tvarps ： 20%   ， 收入 38000   tvarps 时 ， 所得税 5000   0.00   +   10000   0.10   +   20000   0.15   +   3000   0.20 ， 4600   tvarps 。 请 编写 一个 程序 ， 循环 用户 输入 收入 ， 报告 所得税 。 用户 输入 负数 或非 数字 时 ， 循环 结束 。   xiti _ c6 _ 5 . cpp   8 ． 编写 一个 程序 ， 打开 一个 文件 文件 ， 逐个 字符 读取 文件 ， 到达 文件 末尾 ， 指出 文件 中 包含 字符 。   xiti _ c6 _ 8 . cpp   函数   估计 这块 C ++ C 语言 差异 太大 ， 做 习题 下 。   数组 函数 参数   数组 函数 参数 传递 数组 首 地址 ， C ++ 还 数组 内 元素 类型 ， 函数 原型 声明 类似 声明 ：   int   sum _ arr ( int   *   arr ,   int   n )   ，   int   sum _ arr ( int   arr [ ] ,   int   n )   ， 两种 写法 函数 原型 声明 上是 区别 ， 告诉 C ++ 编译器 数组 内的 元素 类型 。 函数 不 修改 数组 内容 ， 声明 加上   const   关键字 。   例子 加深 数组 函数 参数 理解 ：   arrfun . cpp   例子 演示 数组 函数 参数 方法 ， 演示 const ， 还 演示 第二种 数组 函数 参数 写法 ， 请看 sum _ array 函数 ， 接受 数组 首 地址 和末 地址 ，   sum _ array ( properties ,   properties   +   size ) ;   写法 传入 数组 长度 ， 随意 计算 数组 几个 元素 的和 都 。   C 风格 字符串 函数 参数   本质 上 C 风格 字符串 字符 数组 ， 有个   \\ 0   标记 字符串 结尾 。 参考 数组 讨论 。   结构 体 函数 参数   结构 体 简单 ， 基本上 看作 某种 额外 数据 类型 ， 传值 ， 传 指针 ， 结构 体 大 ， 推荐 传 指针 。   C ++ 新增 类的 概念 ， string 类 ， array 类等 ， 函数 参数 大体 参考 结构 体的 ， 看作 某种 额外 数据 类型 。 类的 会有 更 详细 讨论 。   函数 函数 参数   函数 名 函数 地址 ， 函数 名 参数传递 进去 ， 麻烦 函数 指针 类型 声明 上 ：   声明 pf 指针 目标 函数 指针 ， 声明 带上 指向 函数 类型 声明 ， 语句 会很 长 。   利用 typedef 简化 ：   请看 样例 加深 理解 ：   1 ． 编写 一个 程序 ， 用户 输入 两个 数 ， 一个 0 。 两个 数 ， 程序 一个 函数 计算 调和 平均数 ， 返回 main (   ) ， 后者 报告 。 调和 平均数 指的 倒数 平均值 倒数 ， 计算 公式 ：   调和 平均数 = 2.0   *   x   *   y   /   ( x   +   y )   xiti _ c7 _ 1 . cpp   3 ． 一个 结构 声明 ：   a ． 编写 一个 函数 ， 值 传递 box 结构 ， 显示 成员 值 。   b ． 编写 一个 函数 ， 传递 box 结构 地址 ， volume 成员 设置 三维 长度 乘积 。   c ． 编写 一个 两个 函数 简单 程序 。   xiti _ c7 _ 3 . cpp   5 ． 定义 一个 递归函数 ， 接受 一个 整数 参数 ， 返回 参数 阶乘 。 讲 ， 3 阶乘 写作 3 ! ， 等于   3 * 2 !   ， 依此类推 ； 0 ! 定义 1 。 通用 计算 公式 ， n 大于 零 ，   n ! = n * （ n − 1 ） !   。 程序 中对 函数 测试 ， 程序 循环 用户 输入 值 ， 程序 报告 值的 阶 。   xiti _ c7 _ 5 . cpp   9 ． 编写 数组 结构 函数 。 程序 框架 ， 请 提供 描述 函数 ， 程序 。   xiti _ c7 _ 9 . cpp   10 ． 设计 一个 名为 calculate (   ) 函数 ， 接受 两个 double 值和 一个 指向 函数 指针 ， 而被 指向 函数 接受 两个 double 参数 ， 返回 一个 double 值 。 calculate (   ) 函数 类型 double ， 返回 指向 函数 calculate (   ) 两个 double 参数 计算 值 。 ， 假设 add (   ) 函数 定义 ：   下述 代码 中的 函数 调用 导致 calculate (   ) 2.5 10.4 传递 add (   ) 函数 ， 返回 add (   ) 返回 值 （ 12.9 ） ：   请 编写 一个 程序 ， 调用 两个 函数 至少 一个 add (   ) 类似 函数 。 程序 循环 来让 用户 成对 输入 数字 。 数字 ， 程序 都 calculate (   ) 调用 add (   ) 至少 一个 函数 。 读者 爱 冒险 ， 尝试 创建 一个 指针 数组 ， 指针 指向 add (   ) 样式 函数 ， 编写 一个 循环 ， 指针 连续 calculate (   ) 调用 函数 。 提示 ： 声明 指针 数组 方式 ， 包含 三个 指针 ：   采用 数组 初始化 语法 ， 函数 名 地址 初始化 数组 。   xiti _ c7 _ 10 . cpp   函数 补充   接下来 内容 多是 C ++ 特有 内容 。   内联 函数   内联 函数 函数 区别 函数 定义 声明 加上 关键字   inline   ， 上的 区别 函数 编译 代码 函数 一个 跳 转 执行 过程 ， 内联 函数 代码 调用 函数 代码 内联 ， 跳 转 动作 。   内联 函数 比作 C 语言 中的 宏 定义 函数 ， C ++ ：   比作 C 语言 ：   引用 变量   引用 变量 程序员 编程 角度 出发 看作 函数 别名 ， ：   变量 名 a b 指向 都 是同 一块 内存 空间 。   引用 变量 是对 变量 引用 ， 初始化 赋值 。   引用 变量 函数 参数 ， 函数 引用 变量 等于 传递 变量 。 操作 都 等于 原 数据 操作 。   引用 变量 上 看作 取了 赋值 变量 地址 ， 默认 自动 解 引用   *   操作 。 下 即可 ， C ++ 很多 地方 都在 弱化 指针 概念 ， C ++ 程序员 没 C 程序 老一套 思维 ， 都往 指针 上靠 。 数组 只能 指针 ， 结构 体或 类 ， 引用 变量 概念 就用 引用 变量 ， 没 指针 ， 毕竟 指针 很 。   引用 变量 函数 参数 上最 经典 一个 例子 swap 函数 ：   只 简单 传递 变量 名 即可 ：   引用 变量 用于 结构 体和 类 大体 逻辑 参考 讨论 ， 值得一提的是 返回 结构 体和 类 采用 相关 返回 引用 变量 形式 将是 高效 ， 不 传统 返回 值还 额外 拷贝 动作 。   默认 参数   方法 函数 原型 声明 给定 默认 参数 ， 函数 定义 不用 变 。   函数 重载   函数 重载 函数 多态 具体来说 几个 函数 拥有 函数 名 ， 参数 数目 类型 ， C ++ 编译器 会 匹配 合适 函数 。 匹配 过程 中   const   关键字 。 匹配 基于 函数 原型 声明 ， 形参 名字 。 匹配 函数 返回 类型 。   函数 模板   C ++ 函数 模板 运行 一种 泛型的 概念 编写 函数 ：   模板 函数 重载 。 情况 会 稍微 ， C ++ 98 标准 来说 ， 具体化 类型 版本 优先 模板 版本 ：   这块 东西 很多 ， 暂时 略过 ， 时间 下 ， 感觉 东西 就和 运算 符 优先级 ， 实在 不行 加个 括号 ， 实在 不行 改 函数 名 。   1 ． 编写 接受 一个 参数 （ 字符串 地址 ） ， 打印 字符串 函数 。 ， 提供 第二个 参数 （ int 类型 ） ， 且该 参数 不 0 ， 则该 函数 打印 字符串 次数 将为 函数 调用 次数 （ ， 字符串 打印 次数 不 等于 第二个 参数 值 ， 等于 函数 调用 次数 ） 。 ， 一个 可笑 函数 ， 本章 介绍 技术 。 一个 简单 程序 中 函数 ， 演示 函数 工作 。   xiti _ c8 _ 1 . cpp   2 ． CandyBar 结构 包含 3 成员 。 第一个 成员 存储 candy   bar 品牌 名称 ； 第二个 成员 存储 candy   bar 重量 （ 小数 ） ； 第三个 成员 存储 candy   bar 热量 （ 整数 ） 。 请 编写 一个 程序 ， 一个 函数 ， 即将 CandyBar 引用 、 char 指针 、 double int 参数 ， 并用 3 个值 设置 结构 成员 。 3 参数 默认 值 \" Millennium   Munch \" 、 2.85 350 。 ， 程序 还 包含 一个 CandyBar 引用 参数 ， 显示 结构 内容 函数 。 请 尽可能 const 。   xiti _ c8 _ 2 . cpp   指明 要用 char 指针 ， 才 ， string 会 简单 很多 。   5 ． 编写 模板 函数 max5 (   ) ， 一个 包含 5 T 类型 元素 数组 参数 ， 返回 数组 中 元素 （ 长度 固定 ， 循环 中 硬 编码 ， 不必 参数 传递 ） 。 一个 程序 中 函数 ， T 替换 一个 包含 5 int 值的 数组 一个 包含 5 dowble 值的 数组 ， 测试 函数 。   xiti _ c8 _ 5 . cpp   题 很 简单 ， 模板 函数 用法 ， 看 题 。   6 ． 编写 模板 函数 maxn (   ) ， 它将 一个 T 类型 元素 数组 一个 数组 元素 数目 整数 参数 ， 返回 数组 中 元素 。 程序 测试 ， 程序 一个 包含 6 int 元素 数组 一个 包含 4 double 元素 数组 调用 函数 。 程序 还 包含 一个 具体化 ， char 指针 数组 数组 中的 指针 数量 参数 ， 返回 最长 字符串 地址 。 多个 字符串 ， 返回 第一个 字符串 地址 。 5 字符串 指针 数组 测试 具体化 。   xiti _ c8 _ 6 . cpp   函数 模板 显示 具体化 函数 编写 常规 函数 相比 多了   template   < >   东西 ， 原型 声明 上有 顺序 ：   常规 函数   模板 函数   模板 函数 具体化   重载 顺序 C ++ 98 给定 顺序 常规 函数 最 优先 ， 模板 函数 具体化 优先 模板 函数 。   内存 模型 名称 空间   头 文件 常 包含 内容 ：   函数 原型     # define   const 定义 符号 常量   结构 声明   类 声明   模板 声明   内联 函数   文件 编译 相关 知识 C 语言 学习 中 讨论 过了 ， 这块 区别 。   内存 模型   内存 模型 实际上 讨论 C ++ 语言 变量 内存 生存期 。 变量 作用 域和 生存期 两个 ， 访问 一个 变量 变量 ， 变量 是在 生存期 ， 变量 是可 访问 ， 变量 代码 所在 处于 变量 作用 域的 。   C ++ C 语言 变量 作用 域 上 编程 语言 差别 都不 大 ， 会 奇怪 术语 ， 程序员 都懂 ， 简单 C ++ C 语言 理解 为花 括号 分区 块的 块 作用 域 语言 。   C ++ C 语言 高级 编程 语言 多了 一个 变量 内存 生存期 。 高级 编程 语言 变量 生存期 都是 程序 自动 管理 ， C ++ C 语言 自动 存储 变量 。 C 语言 引入   static   关键字 静态 存储 变量 概念 ， 简单 来说 静态 存储 变量 程序 运行 期都 存活 【 再 变量 存活 访问 两回事 ， 一个 文件 声明 全局 静态 变量 文件 是不 访问 ， C 语言 提出 文件 作用 域的 概念 ， 没 再 增加 一个 额外 作用 域的 概念 ， 情况 静态 变量 访问 还 编译器 链接 做 额外 动作 ， 文件 extern 声明 。 原则上 文件 文件 上 定义 变量 ， 静态 变量 自动 变量 都 extern 关键字 声明 变量 ， 说 静态 变量 情况 声明 ， 不了 ， 自动 变量 情况 是你 不 声明 ， 声明 反而 会报 错 。 】 。   C ++ 再 提出 一个 内存 存储 类型 ， 介绍     关键字 讨论 ， 动态 存储 。 delete 运算 符 管理 内存 池和 静态 变量 自动 变量 内存 池是 分开 ， 自由 存储 空间 堆 。   C ++ 还 提出 一种 线程 存储 类型 ，   thread _ local   关键字 引入 进来 ， 本文 会较 少 讨论 。   这块 C 语言 相关 知识 关键字 讨论 真的 学懂 ， 小节 内容 大概 下 即可 。   名称 空间   C ++ 名称 空间 概念 不难 理解 ， 相当于 名称 空间 内的 变量 名字 加上 名称 前缀 。     Jill : : fetch ( )   格式 。       Jill : : fetch ;   ，   fetch     Jill : fetch   。 专业 术语 声明 。     namespace   Jill   写法 早就 过了 ， Jill 名称 空间 下的 变量 名都 引入 进来 。 专业 术语 编译 。   声明 导入 名字 ， 编译 ， 情况 例外 。 要看 编译 ， 情况 ：   编译 引入 引入 局部 名称 空间 ， 说的 再 直白 点 引入 Jill 名称 空间 变量 都在 main 函数 ， main 函数 局部变量 。 main 函数 说 fetch   Jill : : fetch   ， 变量 或者说 名称 空间 fetch 访问 ， 采用 形式 ：   : : fetch   。   推荐 声明 ， 编译 。 名称 空间 大型 项目 管理工作 ， 小 项目 小 程序 编译 没什么 。   命名 空间 嵌套 ：     int   i   引用 完整 表达 ：   abc : : def : : i   。   未 命名 命名 空间 ：   未 命名 命名 空间 外面 全局 变量   : : ice   引用 ， 区别 在于 语句 ， 变量 文件 。   命令 空间 样例 程序 请 参看   test _ namesp . cpp     namesp . h   namesp . cpp 三个 文件 。   1 ． 一个头 文件 ：   setgolf (   ) 重载 ， 第一个 版本 ：   函数 调用 提供 存储 ann 结构 中的 信息 。 第二个 版本 ：   函数 提示 用户 输入 姓名 等级 ， 存储 andy 结构 中 。 函数 （ 不 ） 内部 第一个 版本 。   头 文件 ， 创建 一个多 文件 程序 。 一个 文件名 golf . cpp ， 提供 了与 头 文件 中的 原型 匹配 函数 定义 ； 一个 文件 应 包含 main (   ) ， 演示 原型 化 函数 特性 。 ， 包含 一个 用户 输入 循环 ， 输入 数据 填充 一个 golf 结构 数组 ， 数组 填满 用户 高尔夫 选手 姓名 设置 为空 字符串 时 ， 循环 结束 。 main (   ) 函数 只 头 文件 中 原型 化的 函数 访问 golf 结构 。   golf . h 大体 类似 定义 。   golf . cpp   xiti _ c9 _ 1 . cpp   习题 读者 文件 C ++ 编写 过程 。   4 ． 请 基于 名称 空间 编写 一个 3 文件 程序 ：   第一个 文件 一个头 文件 ， 包含 名称 空间 ； 第二个 文件 一个 源代码 文件 ， 名称 空间 扩展 ， 提供 三个 函数 定义 ； 第三个 文件 声明 两个 Sales 对象 ， setSales (   ) 交互式 版本 一个 结构 提供 值 ， setSales (   ) 非 交互式 版本 一个 结构 提供 值 。 还 showSales (   ) 显示 两个 结构 内容 。   sales . cpp   xiti _ c9 _ 4 . cpp   习题 读者 名称 空间 用法 。   类   C ++ 语言 区别 C 语言 引入 特性 ， 类和 相关 面向对象 编程 概念 。 本文 假定 读者 熟悉 一门 高级 编程 语言 python ， 面向对象 编程 相关 概念 做 过多的 讨论 ， 预先 假定 读者 一块 很 熟悉 。 来看 C ++ 类是 声明 ：   一个 新的 概念   private     public   两个 区块 定义 该类 私有 变量 公有 变量 ， 私有 变量 是不 访问 变量 【 变量 包括 函数 名 】 ， 公有 变量 该类 访问 变量 。 高级 编程 语言 中也 会 类似 概念 ， 语言 强制 ， 编程 规范 提及 。 提醒 读者 私有 变量 出于 ， 很多 数据 仅仅 出于 类和 软件系统 架构 上的 设计 ， 出于 便捷 易用 性也 会 隐藏 数据 而只 提供 接口 外界 。   类的 变量 属性 默认 private ， 编程 不 写 private ， 只 公有 变量 声明 public 即可 。   类 方法 编写 函数 ， 只不过 函数 名字 写成 形式 ：   类 作用 域   类 定义 变量 C ++ 作用 域又 新增 一个 概念 ， 类 作用 域 ， 类的 声明 本身 包含 一个 花 括号 区块 ， 倒 出人意料 之外 。 类 作用 域 看作 一个 花 括号 区块 理解 变量 作用 域 关系 ， 特别 类 作用 域 之内 变量 调用 — — 类的 成员 函数 类 变量 ， C ++ 类的 成员 函数 定义 是在 外面 分开 ， 下 。   构造 函数   创建 Stock 对象 面向对象 编程 说法 创建 Stock 实例 ， 所示 ：   语句 创建 一个 Stock 实例 Sally ， 调用 sally 内的 方法 。   读者 C 语言学   Stock   sally   类似 声明 一个 结构 体 ， 没什么 好 奇怪 ， 熟悉 面向对象 编程 ， 听到 说   Stock   sally   一句 创建 一个 Stock 实例 内心 就会 生出 困惑 。 会想 类 很 ， 实例 化 一个 实例 化 初始 函数 工作 ， 会想   Stock ( )   东西 ， 想的 错 。   C ++ 面向对象 编程 这块 概念 上和 高级 语言 差别 不 大 ， C ++ 类的 实例 化 一个 实例 化 函数 ， C ++ 专业 术语 构造 函数 ， C ++ 类 实例 化都 调用 构造 函数 ， 定义 ， 调用 默认 构造 函数 。     Stock   sally   隐式 调用 默认 构造 函数 ， 等于   Stock   sally   =   Stock ( )   。 构造 函数 定义 ：   C ++ 一种 隐式 调用 构造 函数 形式 ：   等于 ：   析构 函数   析构 函数 简单 来说 对象 即将 过期 时 调用 成员 函数 ， 功能 类比 python 类的   __ del __   方法 。 析构 函数 写法 ：   构造 函数 析构 函数 头 文件 中 声明 下 ：   指针   C ++ 指针 概念 类比 python     ， 参数 C ++ 类 方法 默认 参数传递 进去 ， ， 代表 实例 一个   指针   。 一个 指针 ， 调用 内部 成员   - > a   语法 。   返回   *   人 困惑 ， 请 参看   网页   ， 其和 方法 说 成员 函数 返回 声明 类型 ， 声明   Stock   &     *   是对 实例 引用 ， 一个   引用 变量   ； 返回 对象 一个 复制 。   const 成员 函数   提到 指针 ， 实例 参数 隐含 传递 进去 ， 希望 成员 函数 不 修改 调用 对象 实例 数据 ， 写法 ， 成员 函数 一个 const ， 术语 const 成员 函数 ， const 成员 函数 修改 实例 数据 。   类内 定义 数组 长度 常量 情况   类 定义 一个 数组 ， 长度 一个 常量 ， 写法   错误   【 参考 资料 1 提到 类 定义 常量 都要 enum static   const 形式 存有 疑问 ， 实践 const 设置 常量 数组 情况 。 】 。   是因为 类的 声明 还 描述 类的 形式 ， 还 实例 化 创建 动作 。 创建 动作 要找 MAX 值却 发现 找 不到 。 enum 枚举 ， 枚举 一个 符号 名称 ， 代码 编译 时 自动 替换 数值 。   创建 一个 静态 常量 ：   请 参考   test _ stack . cpp   例子 详细 理解 内容 。   2 ． 一个 简单 类 定义 ：   一个 string 对象 一个 字符 数组 ， 用法 。 请 提供 未 定义 方法 代码 ， 类的 。 再 编写 一个 类的 程序 ， 三种 构造 函数 调用 （ 参数 、 一个 参数 两个 参数 ） 两种 显示 方法 。 一个 构造 函数 方法 例子 ：     Person ( )   {   lname   =   \" \" ;   fname [ 0 ]   =   ' \\ 0 ' ;   } ;   声明 时就 写上 成员 函数 定义 函数 会 自动 内联 函数 。 传统 inline 方法 来写 ：   C ++ 额外 写法 ， 不 语法 糖 性质 东西 介绍 语言 特性 正文 中 引入 ， 时 提到 即可 。   例子 检验 读者 章节 类的 编写 知识 。   person . h   xiti _ c10 _ 2 . cpp   3 ． 重做   xiti _ c9 _ 1   编程 ， 要用 正确 golf 类 声明 替换 代码 。 用带 合适 参数 构造 函数 替换   setgolf （ golf   & ,   const   char   * ,   int ）   ， 提供 初始 值 。 保留   setgolf (   )   交互 版本 ， 要用 构造 函数 （ ， setgolf (   ) 代码 数据 ， 数据 传递 构造 函数 创建 一个 临时 对象 ， 并将 赋 调用 对象 ，   *   ） 。   golf . h 新增 Golf 类的 声明 ：   Golf . cpp 新增 Golf 类的 定义 ：   xiti _ c10 _ 3 . cpp   例也 算是 结构 体和 类 之间 转换 一种 思考 ， 结构 内的 访问 属性 默认 public ， 而类 变量 默认 访问 属性 private 。 C ++ 程序员 类就 会 类 ， 结构 体 某种 纯粹 数据 表达 。   6 ． 一个 类的 声明 ：   请 编写 该类 成员 函数 定义 测试 该类 程序 。   move . cpp 内容 ：   xiti _ c10 _ 6 . cpp   8 ． 简单 列表 描述 成 ：   存储 0 多个 某种 类型 列表 ；   创建 空 列表 ；   可在 列表 中 添加 数据项 ；   列表 为空 ；   列表 为满 ；   访问 列表 中的 一个 数据项 ， 执行 某种 操作 。   ， 列表 确实 很 简单 ， ， 不 插入 删除 数据项 。   请 设计 一个 List 类来 抽象 类型 。 应 提供 头 文件 list . h 文件 list . cpp ， 包含 类 定义 ， 后者 包含 类 方法 。 还 应 创建 一个 简短 程序 类 。   列表 规范 很 简单 ， 旨在 简化 编程 。 选择 数组 链表 列表 ， 公有 接口 不 应 依赖 于所 做 选择 。 也就是说 ， 公有 接口 不 应有 数组 索引 、 节点 指针 。 应 通用 概念 表达 创建 列表 、 列表 中 添加 数据项 操作 。 访问 数据项 执行 操作 ， 应 函数 指针 参数 函数 ：   ， pf 指向 一个 Item 引用 参数 函数 （ 成员 函数 ） ， Item 列表 中 数据项 类型 。 visit (   ) 函数 函数 用于 列表 中的 数据项 。   list . h   内容 ：   list . cpp   xiti _ c10 _ 8 . cpp   例只 一个 简单 列表 ， 函数 参数 算是 一个 温习 。   运算 符 重载   类 运算 符 重载 python 是在 类 定义   __ add __   方法 ， 而在 C ++ 定义   operator +   成员 函数 ， 重载 运算 符 操作 。 这块 细节 时间 再 慢慢 熟悉 ， 本文 接触 运算 符就 提到 相关 知识点 ， 面面俱到 ， 这块 学习 上是 没 面面俱到 。   请看 例子 ：   mytime . h   mytime . cpp   test _ mytime . cpp   例子 演示 重载 目标 MyTime 类的 加法 减法 乘法 ， 时间 刻度 计算 下 即可 。 倒是 代码 中的 一行 ：   困惑 ，   private   理解 偏差 。 类的 成员 函数 ， 调用 私有 变量 ， 同一个 类的 作用 域中 ， 调用 理解 。 新建 一个 MyTime 对象 调用 私有 变量 想到 。 类的 对象 ， 调用 私有 变量 ， 私有 变量 设定 意义 ， 是本 类的 对象 ， 类的 成员 函数 定义 ， 调用 私有 变量 。   友元 函数   例子 中 ， 对象 乘以 1.5 操作 重载   operator *   即可 ，   1.5   *   coding   形式 ， 重载 意义 上的 乘法 ， 重载 乘法 传 该类 对象 私有 变量 是不 访问 ， 友元 函数 ， 声明 形式 ：   实际上 类的 成员 函数 ， 是写 类的 声明 ， 加上   friend   关键字 ， MyTime 类的 访问 权限 成员 函数 。 完整 形式 ：   一个 内联 函数 ， 再 利用 原有   operator *   即可 。   类似 还 重载   < <   运算 符 ， 好让 对象 支持 cout 输出 ：   ：   返回 原   ostream   对象 ， 为的是 支持   cout   < <   a   < <   b   形式 。   下 一个 例子 ， 模拟 物理 上的 矢量 运算 ：   vector . h   vector . cpp   test _ vector . cpp   弧度 换算   \\ ( atan ( 1 )   =   \\ frac { \\ pi } { 4 } \\ )   ， 常见 换算 公式 1 弧度 等于   \\ ( \\ frac { 180 } { \\ pi } \\ )   。   ang 默认 单位 radian   构造 函数 reset 方法 都好 理解 ， 坐标 极坐标 第二个 参数 输入 角度 单位 是度 。   加减 运算 重载 ， 写法 很 优雅 利用 构造 函数 ， 构造 函数 默认 xy 坐标 很 运算 自动 计算 极坐标 相关 数据 。   cout 输出 方法 很 难 理解 ， 倒是     ( v . mode   = =   Vector : : RECT )   {   不 RECT 值得 ， 一个 友元 函数 ， 其和 该类 成员 函数 访问 权限 ， 访问 权限 ， 作用 域 。 是因为 ：   友元 函数 不 类 作用 域中   。 加上   VECTOR 是因为 友元 函数 namespace   VECTOR ， 不   RECT 。   参考 资料 1 随机 漫步 例子 就不 列 ， 讨论 重点 。   类的 类型 转换   类型 数据 转 成本 类   类型 数据 转 成本 类 利用 类的 构造 函数 。 有隐 式 转换 显示 转换 两种 。 不 太 喜欢 类的 类型 隐 式 转换 ， 不 太 推荐 编程 太多 类型 隐式 转换 ， 会让 程序 晦涩 难懂 失控 。 隐式 转换 是如 写法 ：   C ++ 会试 查找 Stonewt 类的 构造 函数 ， 发现 构造 函数 ：   特征 参数 匹配 ， 会试 调用   Stonewt ( 19.6 )   隐式 类型 转换 。 不 太 喜欢 写法 ， 实际上 C ++ 不 推荐 写法 ， 引入   explicit   关键词 ：   构造 函数 引入 explicit 关键词 用于 隐式 类型 转换 ， 类型 转换 ， 采用 形式 ：   写法 更 易懂 。   类转 成 类型 数据   只 讲 显示 类型 转换 情况 ， 本类 编写 类似   operator   int ( )   成员 函数 。   ：     ( int )     形式 返回 目标 类型 数据 。 再 ， 转换 函数 推荐 加上   explicit   关键词 ：   禁用 掉隐 式 转换 ， 推荐 写 代码 时都 写成 显示 转换 形式 ， 代码 更 易懂 。   1 ． 请 参考 randwalk . cpp   代码 ， 修改 ， 使之 一系列 连续 随机 漫步 位置 写入 文件 中 。 位置 ， 用步号 标示 。 ， 程序 初始条件 （ 目标 距离 步长 ） 小结 写入 到该 文件 中 。 文件 内容 类似 ：   randwalk . cpp   xiti _ c11 _ 1 . cpp   习题 重温 了下 ofstream 文件 输出 流的 用法 ， 没 好说 ， 算是 Vector 类的 一个 测试 例子 。   5 ． Stonewt 类 所示 ， 编写 ， 使 一个 状态 成员 ， 成员 控制 对象 应 转换 英石 格式 、 整数 磅 格式 浮点 磅 格式 。 重载 < < 运算 符 ， 替换 show _ stn (   ) show _ lbs (   ) 方法 。 重载 加法 、 减法 乘法 运算 符 ， Stonewt 值 加 、 减 、 运算 。 编写 一个 类 方法 友元的 小 程序 ， 测试 类 。   6 ． 重载 6 关系 运算 符 。 运算 符对 pounds 成员 ， 返回 一个 bool 值 。 编写 一个 程序 ， 声明 一个 包含 6 Stonewt 对象 数组 ， 数组 声明 中 初始化 前 3 对象 。 循环 读取 用于 设置 剩余 3 数组 元素 值 。 报告 最小 元素 、 元素 大于 等于 11 英石 元素 数量 （ 最 简单 方法 创建 一个 Stonewt 对象 ， 并将 初始化 11 英石 ， 对象 ） 。   stonewt . h   stonewt . cpp   利用 cmath round 函数 四 舍五 入的 效果 ， int 取整 截断 。 英石 表达 该类 会 存储 pds _ left 剩余 一点 pound ， 第二个 构造 函数   Stonewt : : Stonewt ( int   stn ,   double   lbs )   输入 英石 还 剩下 磅的 格式 。   stonewt . h   stonewt . cpp   xiti _ c11 _ 5 . cpp   例子 新的 知识点 倒 ， 东西 挺 多的 ， 基本上 是对 章节 大部分 内容 一个 整理 ， 读者 细细 阅读 体会 。   7 ． 复数 两个 ： 实数 虚数 。 复数 一种 书写 方式 ： （ 3.0 ， 4.0 ） ， ， 3.0 实数 ， 4.0 虚数 。 假设 a   =   ( A ,   Bi ) ， c   =   ( C ,   Di ) ， 复数 运算 。   加法 ：   a   +   c   =   ( A + C ,   ( B + D ) i )   。   减法 ：   a   –   c   =   ( A − C ,   ( B − D ) i )   。   乘法 ：   a   *   c   =   ( A * C − B * D ,   ( A * D   +   B * C ) i )   。   乘法 :   x * c   =   ( x   *   C ,   x   * Di )   ， x 实数 。   请 定义 一个 复数 类 ， 程序 正确 。   xiti _ c11 _ 7 . cpp   ， 重载 运算 符 < < > > 。 标准 C ++ 头 文件 complex 提供 示例 更 复数 支持 ， 应将 定义 头 文件 命名 complex0 . h ， 发生 冲突 。 应 尽可能 const 。   程序 运行 情况 。   请 ， 重载 后 ， cin   > > c 提示 用户 输入 实数 虚数 。   complex0 . h   complex0 . cpp   类和 动态 内存 分配   小节 分析 讨论 官方 内置 string 类是 不定 长度 字符串 功能 支持 ， 介绍 动态 内存 分配 delete 提到 过其 内部 利用 delete 内部 字符 数组 长度 定制 ， 层面 ， 很多 细节 讨论 。   看 参考 资料 1 列出 StringBad 带有 bug 版本 ， 版本 写法 很 直观 ， 想 学习 小节 内容 读者 都会 写出 最初 版本 ：   stringbad . h   stringbad . cpp   StringBad 类 只 保留 字符 数组 指针 ， 字符 数组 存储 动态 数组 。 两 大 缺陷 ， 一是 正确 应对 复制 构造 函数 情况 ； 二是 正确 应对 赋值 运算 符的 情况 。   分析 第一个 情况 ， 参考 资料 callme2 会 bug 。 callme2 函数 采用 是将 类 对象 值 传递 形式 ， 调用 该类 复制 构造 函数 动作 ， 理解 默认 执行   StringBad   sb   =   StringBad ( headline2 )   。   类 定义 复制 构造 函数 ， 调用 类的 默认 复制 构造 函数 ， 是非 静态 私有 成员 值 赋值 ， 大概 执行 类似 语句 ：   函数 值 传递 情况 外 ， 语句 调用 复制 构造 函数 ：     StringBad   metto   =   motto ;   上会 差异 ， 写成 形式 ：   肯定 上 一句 调用 默认 构造 函数 ， 第二句 调用 赋值 运算 符 。 写成 一句 ：   StringBad   metto   =   motto ;   则有 只 调用 复制 构造 函数 ， 是先 复制 构造 函数 创建 一个 临时 对象 ， 再 调用 赋值 运算 符 。   例子 讨论 上 ， callme2 值 传递 内部 形参 sb ， 出了 函数 就将 调用 sb 析构 函数 ， sb str 指针 headline2 str 指针 ， sb 析构 函数 会把 字符 数组 动态 内存 内容 删除 掉 ， 显示 headline2 bug 。   定义 一个 显 式的 复制 构造 函数 解决 【 深究 类 成员 指针 拷贝 深度 复制 】 ：   例子 第二个 bug 正确 应对 赋值 运算 符的 情况 ， 情况 ：   类也 默认   operator =   成员 函数 ， 复制 构造 函数 类似 ， 是对 类的 非 静态 成员 逐个 复制 。 解决 ， 重载 赋值 运算 符   =   即可 ：   代码 读者 会对     = =   & st   困惑 ， 记住 引用 变量 定义 绑定 变量 ， 提到 实际上 提到 变量 ， 去 谈论 引用 变量 地址 引用 变量 存储 值 概念 ， st ， 问 st 值是 ， 值 引用 StringBad 对象 ，   & st   ， st 取 址是 ， st 地址 StringBad 对象 取 地址 操作 。   便捷 方法 运算 符 重载 好让 该类 更好 ， 讨论 重点 ， 赋值 运算 符还 支持   metto   =   \" abc \"   形式 ， 重载 赋值 运算 符 ：   参考 资料 1 一个 例子 ， 队列 模拟 ， 请 读者 详细 阅读 理解 ， 我会 跟上 知识点 。 队列 知识点 预先 假设 读者 。   queue . h   成员 初始化 列表   一行 代码 会 费解 ：   写法 只能 用于 类的 构造 函数 ， 即在 类的 构造 函数 跟上 冒号 ， 跟上 该类 成员 初始化 默认 值 。 成员 初始化 列表 。   语句 写法 该类 初始化 还 会 执行   qsize   =   0   动作 ， 不 写上 语句 ， qsize 变量 加上   const   关键词 再 设置 ， 采用 成员 初始化 列表 写法 ：   还 演示 成员 初始化 列表 只 定义 中 写上 ， 声明 不 写 。   queue . cpp   NULL 空 指针   声明 一个 指针 ， 指针 为空 。 是用 NULL 0 赋值 指针 变量 ：   推荐 C ++ 11 新 引入 关键字   nullptr   ：   例子 中 Queue 类 Node 节点 都是 ， dequeue 动作 将最 Node 挤出 ， delete 节点 外 ， 类的 析构 函数 Queue 类 节点 delete 动作 。   中 enqueue dequeue 两个 成员 函数 细细 看下 ， dequeue 接受 参数 记录 好 挤出 Node 数据 值 。 dequeue 动作 析构 函数 动作 很 接近 。 enqueue 一句   rear - >   =   add ;   队列 倒数 第二个 元素 指向 倒数 第一个 元素 。   bank . cpp   例子 最 跟上 作者 试着 编程 模拟 现实 世界 思路 ， 编程 上的 细节 都 说 过了 。 我会 多说 一点 。   cycle 循环 语句 相当于 世界 心跳 ， 分钟 会 执行 动作 。 第一个 来看 有新 顾客 ， 有新 顾客 会 ； 第二个 第三个 是看 最 顾客 业务 完 没 ，   wait _ time   衡量 ， 小于 0 顾客 业务 完 。   来看 新 顾客 模拟 ，   ( std : : rand ( )   *   x   /   RAND _ MAX   <   1 )   代码 会 难懂 一点 ，   rand 会 生成 0 整数 随机 整数 ，   std : : rand ( )   *   x   /   RAND _ MAX   会 生成 0 x 之间 随机 整数 ， x 含义 顾客 平均 几分钟 。 假设 一条 时间 线 ， 条 时间 线上 平均 x 分钟 画 一条 刻度 ， 刻度 来了 一个 新 顾客 。 随机数 0 x 概率分布 均匀 ， 运算 公式 bool 真的 概率 1 / x   。 或者说 概率 公式 运行 x 会 一个 刻度 ， 最 定义 时间 线每 x 分钟 画 一个 刻度 一个 新 用户 ， 简单 来说 随机数 函数 返回 true 一个 新 顾客 来了 。   新 顾客 来了 会 记录 到达 时间 ， 分配 一个 1 - 3 业务 时间 属性 。 往下 看 ， 队列 挤出 最 开头 顾客 ， 顾客 业务 ， 获取 顾客 业务 时间 ， 统计 信息处理 。 下 一分钟 会 判断 顾客 业务 完 ， 没完 等待 时间 减去 ， 完 等待 时间 wait _ time < = 0 下 一个 顾客 。 【 模拟 顾客 业务 时间 心跳 时间 还 细 一点 ， 重点 。 】 统计 数据 计算 ， 都很 简单 。   1 ． 类 声明 ：   类 提供 ， 编写 一个 成员 函数 小 程序 。   xiti _ c12 _ 1 . cpp   例也 告诉 一个 事实 ， 类 成员 指针 变量 ， 是要 动态 内存 分配 复制 构造 函数 赋值 运算 符和 析构 函数 。   赋值 运算 复制 构造 函数 区别 在于 赋值 运算 该类 对象 初始化 ， 分配 动态 内存 ， 再次 赋值 分配 内存 值 释放 掉 。   4 ． 请 参看 Stack 类的 头 文件 ：   私有 成员 ， 类 动态 分配 数组 保存 栈 项 。 请 编写 方法 ， 新的 表示法 ， 编写 一个 程序 演示 方法 ， 包括 复制 构造 函数 赋值 运算 符 。   xiti _ c12 _ 4 . cpp   例子 是在 Stack 类的 基础 上 讨论 ， 唯一 改动 items 一个 固定 长度 数组 ， 动态 内存 分配 。   top 堆栈 顶端 索引 ， top 等于 0 堆栈 元素 ， top = 1 堆栈 1 元素 ， 取值 是取 index = 0 值 。 top ++ 含义 返回 top 再 执行 自增 操作 ； ++ top 含义 是先 增 再 返回 top 值 。   5 ． Heather 银行 研究 ， ATM 客户 不 希望 排队 时间 不 超过 1 分钟 。 小节 提到 队列 模拟 ， 找出 要使 平均 等候 时间 1 分钟 ， 小时 到达 客户 数 应为 （ 试验 时间 不 短于 100 小时 ） ？   xiti _ c12 _ 5 . cpp   习题 讨论 基础 上稍 作 修改 ， 讨论 ATM 排队 理解 透彻 即可 。   类 继承   C ++ 类的 继承 面向对象 编程 概念 上和 编程 语言 都是 ， 细节 上和 区别 很大 。 一个 区别 是在 C ++ 中 派生 类不 基类 私有 变量 ， 只能 基类 公有 方法 ， 派生 类的 构造 函数 基类 构造 函数 。 创建 一个 派生 类 对象 ， 创建 一个 基类 对象 ， 所示 ：   成员 初始化 列表 定义 ， 派生 类是 基类 定义 ， 构造 函数 基于 基类 构造 函数 。 C ++ 语言 上的 定义 ， 定义 派生 类 构造 函数 成员 初始化 列表 初始化 基类 构造 函数 ， 调用 默认 基类 构造 函数 。   演示 例子 头 文件 不 分开 ：   test _ inherit . cpp   vitual   protected   附录   cin 详解   cin   > >   Enter   Space   Tab   结束 ， 适合 char ， 无 空格 string 单个 值的 int   float 输入 。 实践 换行符 缓冲区 ， 缓冲区 消 掉 更好 输入 体验 ， 采用 表达 方式 ：   ( cin   > >   ) . ( )   ， 是因为   cin   > >     会 返回 cin 对象 ， 调用     方法 来消 掉 换行符 。   cin .     cin . getline   都 用于 字符 数组 行 输入 ，   方法 丢弃 缓冲区 换行 结束 符 ， cin . 一个 重载 变体 ，   cin . ( char   & ch )   ， 用于 读取 第一个 字符 ， 假设 缓冲区 下 一个 字符 换行符 ，   cin . ( )   则将 换行符 读取 。   getline 函数   ， cin . getline 区别   getline ( cin ,   string )   getline 会读 入到 C ++ string 类 ， C 风格 字符 数组 。   cout 详解   cout   < <     cout . put ( char   & ch )   输出 一个 字符 ， 输入 整 型也 会 显示 字符 。   参考 资料   C ++   Primer   Plus   第六 版 中文版",
            "tags":"c_and_cpp",
            "url":"articles/cpp-language-learning-notes.html"
        },
        {
            "title":"ctypes模块",
            "text":"ctypes 模块   python 程序 别人 dll 交互 ， ctypes 模块 。 ctypes linux c 语言 库 交互 ， 本文 重点 讨论 是在 windows 下和 dll 交互 。   ：   假设 _ dll . dll     helloworld   函数 ， 调用 函数 。   接下 python 数据 类型 dll c 语言 数据 类型 对接 （ 还 会 牵涉 字符串 编码 。 ）   官方 文档   数据 类型 表格 是必 看的 。 类型 都 还好 ， 指针 结构 体这 两块 理解 。   python 脚本 中 大概 类似 创建 一个 C 语言 定义 结构 体 ：   ：     byref   获取 目标 结构 体的 指针 ， 调用 dll 函数 传递 结构 体 数据 ， 指针 ，   _ ref _ s   传递 。   创建 c ++ dll   阅读 官方   篇 文章   利用 visual   studio   2017   创建   基于 c ++ 语言 dll 过程 整理 ：   visual   studio   安装   C ++ 桌面 开发 环境 。   新建 项目   新建 项目 选择   c ++   windows   桌面   里的   windows   桌面 向导   点击 下 一步 下 一个 界面 选择   动态 链接 库   dll   添加 头 文件   源文件 dllmain . cpp   不 做 修改 ， 头 文件 新建 一个 . h 文件 ， 内容 ：     MATHLIBRARY   名字 更改 ， 暂时 懒得 改了 。 声明 dll 对外开放 函数 一个 修饰 符 。 涉及 dll 相关 知识 ， 一种 写法 ， 不用 太 深究 ， 毕竟 重点 c ++ 语言 写的 函数 。     _ stdcall   ， 说是 标准 windows   API   调用 ， 暂时 不用 太 深究 ， 记得 头 文件 源文件 函数 定义 都 加上 修饰 符 ， python   ctypes 对接   windll ， 不 加则   cdll 。   添加 源文件   点击   生成 解决 方案 就在   debug 文件夹   生成   dll 。 讲 python 项目 集成 。   python 项目 集成   新建 一个 简单 python 项目 ， 一个 最 简单 python 项目 即可 。   做的 事情 创建 生成 dll c ++ 项目 解决 方案 中 添加 进来 。   python 项目 引用 中 ， 项目 添加 进来 。   生成 dll c ++ 项目 点击 生成 dll 会 输出 到本 解决 方案 debug 文件夹 。   python 脚本 引用 即可 ：   实际上 路径 指向 上 一层 debug 文件 dll 文件 ， python dll 联动 调试 。   参考 资料   python   ctypes 探究   篇 文章 ctypes c ++ 语言 之间 字符串 沟通 得很 好",
            "tags":"programming",
            "url":"articles/ctypesmo-kuai.html"
        },
        {
            "title":"dataset模块",
            "text":"简介   dataset 模块 解决 一个 痛点 ， 很多 项目 之初 时间 精力 去 设计 sql 数据库 模型 ， 原因 而更 偏好 json 风格 - sql 数据库 。 dataset 模块 来让 开发 精力 更 专注 项目 。   dataset 模块 项目     ， 更 信息 请 参见 官方 文档 。     官方 样例 ， 看 。 细节 作出 。   connect 连接 sqlalchemy 连接 模块 ， URL 写法 sqlalchemy   create _ engine   写法 。   find _ 方法 目标 table 上 查找 动作 ， 跟的 参数 过滤 条件 ， 找 不到 会 返回 None ， 找到 一个 返回 一个 。   find 方法 ， 将会 返回 多个 。   insert 插入 动作 ， update upsert 方法 ， upsert 方法 设置 唯一 column 判断 ， 插入 更新 目标 record ， 很 好用 。 更 信息 请 参看 官方 文档   api   。   dataset 提供 一个 便捷 sqlalchemy 上层建筑 ， 一种 更 轻松 方式 sql 表格 ， 新的 字 段 名字 ， dataset 会 自动 帮 配置 好 。 项目 代码 稳定 试着 慢慢 更 改为 sqlalchemy 连接 风格 。",
            "tags":"python_companion",
            "url":"articles/dataset-module.html"
        },
        {
            "title":"diskcache模块",
            "text":"简介   diaskcache 模块 解决 一个 ， 提供 一种 本地 文件 式 存储 缓存 解决 方案 。 不 局限 缓存 解决 方案 上 ， 简单 很 临时 数据 存储 利用 模块 。 文件 存储 采用 sqlite 数据库 ， 而在 上 不 sql 数据库 东西 ， 看做 一个 升级 版的 不错 速度 类 shelve 解决 方案 。   diskcache 很 好用 ， 速度 还 挺 快的 。 项目 Github 地址     。 项目 星数 特别 ， 体验 来说 ， 基本上 需求 。 速度 快 ， python 数据 类型 对接 ， 更 数据 类型 试过 ， 没 ， python 数据 类型 来说 ， 列表 ， 字典 ， 字符串 ， 基本上 无缝 对接 。 缓存 过期 时间 功能 ， 基本上 一个 不错 模块 。   很 简单 ， 建议 简单 看下   官方 tutorial   即可 ， 简单 。     建立 一个 cache 对象 ：   cache 对象 线程 ， cache _ path 想要 缓存 存放 所在地 。   windows 软件 数据 放在 ：   cache 对象 所示 ：   推荐   cache . close ( )   方法 ， 不 推荐 精确 程序 元 操作 级别 ， 会 自动 open   cache ， 频繁 open 开销 太 大了 。 推荐 cache 作成 更 全局 变量 ， 程序 结束 执行   cache . close   方法 。 单线 程单 进程 操作 ， 不 调用 close 不 大 。 程序 多线程 式的 ， 保证 close     语句 ：   如上 示 cache 数据 加上 过期 时间 ，   expire   参数 ， 单位 是秒 。   diskcache 还 提供 功能 类等 ， 简单 介绍 。",
            "tags":"python_companion",
            "url":"articles/diskcache-module.html"
        },
        {
            "title":"electron学习笔记",
            "text":"前言   electron 一个 npm 包 ， 原 node 移 Webkit 网页 渲染 功能 ， electron 加上 去了 ， electron 看作 一个 精简 版的 chromium 浏览器 。 electron html5 风格 灵活 编写 GUI ， 跨 多个 平台 桌面 端 。   node 相关 知识 不 赘述 ， 项目   package . json   最 简单 样子 大概 ：   main 字段 提供 electron 程序 入口 ， scripts 是你 输入   npm   start   执行   electron   .   命令 。   项目 本地 仓库 安装 electron ， electron 开发 包 依赖 ， 安装   devDependencies   字段 ：   入门 例子 推荐 看 官方 文档   样例 项目   ， 不 赘述 ， 做 讨论 。   加载 本地 文件   加载 本地 文件 URL 都 推荐 统一 采用   loadURL   方法 ：     __ dirname   执行 js 脚本 所在 目录 位置 ， 加上   file : / /   ， 加载 本地 文件 。   定义 菜单 栏   设置 mainWindow frame 属性 false ：   则你 会 一个 无 框的 窗 体 ， 菜单 栏也 不 ， 不 要的 。   设置 ：   菜单 栏会 自动 隐藏 ， 想要 效果 。   想 删除 菜单 栏 ：   定义 菜单 栏呢 ， createWindow 函数 下 动作 ：   Menu 引入 进来 ：   设置 ：   一种 无 菜单 效果 。   role   开头 菜单 内置 ，   {   type :   ' separator '   }   加上 一个 分隔符 ， 定义 菜单 动作 ：   label 显示 文字 ， accelerator 快捷 键 ， 第三个 关联 函数 对象 。   项目 结构 推荐   项目 结构 根 目录 放上   package . json   文件 即可 ， 项目 相关 内容 编译 放入   src   目录 ， 不用 编译 放入   app   目录 。 一个 特别 点 ， 建议 新建 一个 文件夹   resources   ， 放着   electron - builder   build 过程 中 用到 文件 ， 文件 送入   app . asar   中 去的 。 配置 ：   讨论 electron - builder 会 提到 ， 图标 文件 都会 默认 试着 文件夹 找 。   制作 安装 包   讨论 ， 利用   electron - builder   制作 安装 包 ， 其也 一个 npm 包 ， 类似 先 安装 ：   electron - builder 官方 文档 初次 接触 这块 来说 估计 会 难懂 ， 接触 nsis 地方 读之 不明 。   来看   package . json   下的   build 字段 情况 ：   配置 信息 官方 文档     ， win 字段 配置 信息 官方 文档     ， nsis 字段 配置 信息 官方 文档     。   配置 win 字 段是 省略 ， 写 清晰 electron - builder windows 平台 下 默认 输出 目标 nsis ， nsis 配置 定制 安装 包的 ， nsis 软件 读者 参看 写的   篇 文章   。   win 个字 段   icon   ， 默认 值是   build / icon . ico   ， icon . ico 图标 文件 放入 resources 文件夹 下 即可 。   nsis 很大 一段 icon 图标 ， 默认 resources 文件夹 下 图标 。   oneClick   默认 true ， 安装 包是 键 安装 模式 ， nsis 界面 信息 都 弹 。   allowToChangeInstallationDirectory   默认 false ， 改为 true 将会 一个 提示 用户 更改 安装 目录 界面 。   license   设置 指向 LICENSE 文件 来弹 出 许可证 协议 界面 。   还要 选项 不 赘述 ， 请 查阅 官方 文档 。   整合 python 项目   本人 查阅 多个 资料 ， 确认 electron 项目 想 整合 python 项目 flask 项目 ， 采用 http   api 风格 rpc 风格 ， 最终 都 利用 pyinstaller python 项目 做成 单独 exe 形式 ， electron 开启 子线 程来 启动 一个 后台 api 服务 。 所示 ：   参考 资料   - add - icon - - electron - app - - electron - builder   - - - purpose - - buildresources - folder - - electron - builder - building - proces",
            "tags":"gui",
            "url":"articles/electron-learning-notes.html"
        },
        {
            "title":"xchemistry项目之物理量表示问题",
            "text":"前言   物理量 科学 学科 研究 中是 一个 很 ， 一块 python 很多 模块 ， 一块 是有 一个 公用 解决 方案 以供 科学 学科 python 模块 调用 。   scipy 模块 一个 子 模块 constants ， 提供 物理 常数 ， 物理 常数 数值 ， 物理 常数 物理量 Quantity 类 。 astropy 一个 解决 天文学 python 支持 模块 ， 一个 物理 单位 系统 ， 物理 常数 都是 内部 定义 Quantity 类 ， Quantity 类是 继承 np . ndarray ， 依赖 大了 。 设计 numpy 有很 支持 。 chempy 模块 单位 系统 依赖   python - quantites   模块 ， Quantity 类也 继承 np . ndarray 。   pint 模块 物理量 上 算是 一个 star 数很多 模块 ， Quantity 类并 继承 np . ndarray ， 额外 做 来对 numpy 很 支持 。 pint 模块 青睐 。   慢着 ， 一个 竞争者 。 sympy 模块 一个 解决 物理量 单位 系统 子 模块 ， 采用 方法 都 不 ， sympy 模块 用于 符号 计算 ， 其在 物理量 用到 群 论的 方法 ， 至少 学习 化学 研究 xchemistry 项目 来说 实在 大材小用 。   选用 pint 模块 ， astropy 模块 chempy 模块 中 学科 物理 常数 物理量 额外 工作 要做 ， 再 慢慢 讨论 。   pint 模块   pint 模块 大的 一个 特色 定制 性 ， 模块 本身 来说 提供 一个 物理量 单位 逻辑 ， 单位 系统 相关 运算 定义 都是 一种 文本 配置 形式 展开 ， ：   配置 是刷 单位 系统 。   ：   ：   pint 源码 写法 ，   UnitRegistry   类   SystemRegistry   类 ，   ContextRegistry   类 ，   NonMultiplicativeRegistry   类和   BaseRegistry   类的 初始化 动作 都 执行 一遍 。   BaseRegistry   类的 元类 定制 ：     BaseRegistry   类 初始化 动作 还 额外 挂载   _ _ init   动作 。 额外 挂载 动作 一句 ：   加载 默认 definition 文本 。 文本 定义 规则 语法 都是 pint 模块 定义 ， 大体 ：   定义 unit   ：   ：   [ time ]   写法 是说 单位 一个 最 维度 单位 。   写法 ：   定义 衍生 维度 单位 。   定义 单位 别名 。   定义 物理 常数   speed _ _ light 实际上 一个 单位 。   前缀 支持   kilogram 定义 文件 写的 ， ， 前缀 支持 语句 ：   发现 kilograms 会 读取 kilogram 单位 。   单位 转换   方法 ， 智能 ， 看的 模块 设计 后 分析 计算 花了 很多 心思 。   单位 转换 计算 位数 时间 再 讨论 。",
            "tags":"chemistry",
            "url":"articles/how-to-represent-physics-quantity.html"
        },
        {
            "title":"postgresql数据库",
            "text":"安装 配置   ubuntu 下 简单 安装 ：   centos 下 安装 ：   centos 下 运行 命令 ：   安装 ， 牢记 一点 ， 新 安装 PostgreSQL 数据库 还   postgres   用户 新建 role （ 说 用户 ） 新建 数据库 权限 。   postgres   用户 执行   createuser     createdb   命令 。 先不 急着 学习 SQL 语句 ， postgresql 用户 群组 权限 设置 稍微 ， 而要 postgresql ， 一块 有个 。   用户 群组 权限 管理   postgresql 登录 用户 用户 概念 术语 Rules ， 都 称之为 用户 （ rules ） ， 理解 为为 用户 确立 一系列 访问 修改 数据库 规则 。 rules 包含 rules ， 包含 rules rules 称之为 群组 （ group   rules ） ， 群组 包含 群组 ， 都 推荐 简单 分为 用户 （ rules ） 和群 组 用户 （ group   rules ） 两类 。 用户 登录 权限 称之为 登录 用户 （ login   rules ） ， 群组 用户 赋予 登录 权限 ， 出于 简单 没 做 。 rules 简单 划分 分为 三类 :   用户 ， 指 登录 权限 用户 。   登录 用户 ， 登录 用户 ， 用户 ， 登录 权限 。   群组 用户 ， 包含 用户 rules 。   postgresql 还 提供   superuser   超级 用户 类型 ， 默认 登录 ， 数据库 拥有 权限 — — 创建 数据库 ， 创建 用户 ， 数据库 查 增删 改等 。 实际上 superuser 加上   login   属性 ， 不 推荐 做 ， 是不 超级 用户 ， 用户 数据库 权限 分配 。   默认 创建 postgres 用户 连接 ， 至少 postgres 数据库 权限 ， 还 不 太 superuser ， 数据库 权限 ， 再谈 。   修改 postgres 密码   一点 psql 连接 （ postgres ） 输入   \\ password   修改 postgres 密码   TCP / IP   方式 连接 postgresql 数据库 密码 ， 系统 passwd 管理 密码 。   postgres 用户   postgres 用户 信息 所示 :   新建 postgres 群组 :   121 uid ， 131 gid ，   / var / lib / postgresql   文件夹 postgres 用户 主 文件夹 ， postgresql 配置 数据 都 放在 。 会 保存   . psql _ history   文件 权限 ， 参看   网页   ， 确认 文件夹 用户 群 组都 postgres 。   查看 用户     篇 网页   介绍 ，   pg _ roles   一个 view 视图 ， 一个   pg _ authid   简单 读的 视图 封装 ， 所示 ， 来说 差异 ， postgres 其是 superuser ， login   user 。   新建 用户   新建 一个 用户 :   最起码 要有 登录 login 权限 :   postgresql 时 ， 用户 不 ， PostgreSQL 会报 错 :   删除 用户   用户名 不 报错 写法 :   改变 用户 权限   示就 改变 一个 用户 权限 。   参照 手册 ， 关键词 :   改变 用户 密码   新建 用户 ， :     alter   role   :   新建 一个 群组   给群 组 用户 增加 登录 用户   pg _ hba . conf   很多 连接 文件 配置 好 ， 详细 研究 文件 。   local   是指 本地 连接   host   是指 plain ssl 加密 TCP 套 接字 连接 （ 指 http https ）   hostssl   是指 ssl 加密 TCP 套 接字 连接   hostnossl   是指 plain   简单 TCP 套 接字 连接   DATABASE   设置 连接 数据库 ， 常见   ADDRESS     127.0 . 0.1 / 32   本地 连接 ipv4 ，   0.0 . 0.0 / 0   指 ipv4 外网 。 一种 网 域段 表示法 。   METHOD   trust ， reject ， md5 （ 加密 密钥 ） ， password （ 明文 密钥 ）   人 困惑 peer 方法 查阅 文档 解释 ：   The   peer   authentication   method   works     obtaining     client ' s   operating   system   user         kernel             allowed   database   user     (   optional   user     mapping ) .   This   method       supported     local   connections .   peer 认证 方法 获取 客服 端 操作系统 用户名 ， 数据库 用户名 。 方法 只 local 连接 。   ident 方法 本地 连接 就会 peer 方法 ， 官方 文档 解释 上 字面 很 ， 区别 就在     ident   server   , 一个   kernel ，   一个   ident   server ，   暂时 不 懂 ？   psql   参考   网页   。   \\ l     \\ list   :   列出 数据库   \\ du   :   列出 用户   \\ dt   *   :   列出 数据库 表格   \\ c     \\ connect   :   切换 数据库   数据库 操作 基础   创建 数据库     CREATEDB   权限 用户 新建 数据库 。   创建 一个 数据库 ， 指定 数据库 owner 。   mydb _ admin 登录 数据库 操作 。   备份 还原   两个 backup 方法   pg _ dump     pg _ dumpall   pg _ restore   还原 ，   改变 数据库 所有者   postgres 身份 连接 postgres 数据库 ， 更改 数据库 所有者 ， 数据库 所有者 。   ALTER   DATABASE 语句   mydb   更改 数据库 名字 ， learner 更 改为 所有者 名字 。   类似 谈及 ，   dropdb   用于 删除 数据库 ，   dropuser   用于 删除 用户 。   CREATE   TABLE 语句 都 熟悉 ， 数据 类型 上 ， 还 详细 讨论 一番 。   postgresql 字段 数据 类型   int   ,   smallint   ,   real   ,   double   precision   ,   char (   N   )   ,   varchar (   N   )   ,   date   ,   time   ,   timestamp   ,     interval   ,   postgresql 支持 数据 类型 多了 ， ： int ， smallint ， real ， boolean ， date ， time ， integer ， text ， char ( N ) ， varchar ( N )   json 。 慢慢 ， 更 细节 请 参看 官方 文档 第八章   Data   Types ，   版本 9.3 网页 链接   。   整数 简单 integer ， 字符串 简单 text ， 小数 简单 real ， 布尔 值就 boolean ， 用途 数据 类型 值得 ， uuid ， json ， arrays ， money ， bytea ， 日期 时间 date ， time ； 几何 类型 支持 point ， line   Cookbook   修改 列为 unique   参考   网页   。   删除 基于 列 重复 值的 重复 行   参考   网页   。   USING 语句 古怪 ， 参看 postgresql delete 一章 ， 介绍 语法 ：   select 区别 ， 更 像是 引用 表 ， 语句 中 。   理解 postgresql timestamptz 字段 类型   数据库 都 存放 UTC 时间 ， 说 timestamp 程序 上的 强制性 规范 ， 纠结 时 区 。 postgresql timestamp 字段 对外 说是 支持 时区的 ， 内部 存放 UTC 时间 ， 帮 自动 转换 。   是以 isoformat 格式 存放 timestamptz 字段 ， isoformat 格式 查询 时间 ， 程序员 都是 不用 操心 时区的 ， isoformat 区 信息 。 程序 表现 ， 推荐 程序 运行 时的 服务器 时 区 设置 好 。 数据库 服务器 时 区 设置 好在 查看 时间 上会 更好 本地 体验 。   附录   配置 文件   重启 postgresql 服务   linux 下 运行 命令 行来 目的 :     参考 资料   PostgreSQL 官方 参考 文档   PostgreSQL   Up     Running ,   2nd   Edition",
            "tags":"SQL",
            "url":"articles/postgresql-database.html"
        },
        {
            "title":"pyside2学习笔记",
            "text":"更新   原 pyqt5 学习 笔记 基础 上 更新 调整 pyside2 学习 笔记 ， 推荐 pyside2 。 本文 推荐 参看   样例 项目   阅读 风味 更 佳 。   安装 配置   利用 pip   安装 ：   第一个 例子   窗口   【 beginning - first01 】   导入 sys 宏包 ， 接受 sys . argv 参数 。   接下来 定义 MyWidget 类 ， 继承 QWidget 类 。 QWidget 类的   setGeometry   方法 调整 窗口 左 顶点 坐标 位置 窗口 大小 。     setWindowTitle   方法 设置 窗口 程序 标题 ， 简单 设置 \" myapp \" 。   窗口 程序 都 创建 一个 QApplication 类的 实例 ， myapp 。 接下来 创建 QWidget 类的 实例 mywidget ， 调用 mywidget 方法   show   显示 窗体 。   系统 退出 调用 myapp 实例   exec _   方法 。   加上 图标   【 beginning - first02 】   程序 程序 增加 一个   setWindowIcon   方法 ， 方法 调用   QtGui . QIcon   方法 ， 跟的 图标 存放 路径 ， 路径 。 运行 例子 ， 请 随便 弄 图标 文件 。   简单 见 程序 QWidget 类的   resize   方法 设置 窗 体的 大小 。   弹出 提示 信息   【 beginning - first03 】   段 代码 代码 在于 MyWidget 类的 初始 函数 新 两条 命令 。   setToolTip   方法 设置 显示 弹 出的 提示 文本 内容 ， 调用 QToolTip 类的   setFont   方法 设置 字体 字号 ， 不 太 随便 设置 系统 字体 微软 雅黑 。   鼠标 停放 窗口 上 一会儿 会弹 出 一小 段 提示 文字 。   关闭 窗 体时 询问   【 beginning - first04 】   段 代码 代码 定义   colseEvent   事件 。 段 代码 核心 QMessageBox 类的 question 方法 ， 方法 将会 弹出 一个 询问 窗体 。 方法 接受 四个 参数 ： 第一个 参数 窗体 所属 母体 ， 实例 mywidget ； 第二个 参数 弹出 窗 体的 标题 ； 第三个 参数 一个 标准 button ； 第四个 参数 一个 标准 button ， 默认 （ enter 选定 ） button 。 方法 返回 点击 了的 标准 button 标识符 ， 标准   QMessageBox . Yes   ， 执行 event accept 方法 。   屏幕 居中 显示 窗体   【 beginning - first05 】   例子 相比 改动 新建 一个   center   方法 ， 接受 一个 实例 ， mywidget 。 实例 窗口 位置 做 调整 。   新建 QApplication 对象 传递 进来 ， 一个   screens   方法 ， 获取 电脑 设备 QScreen 对象 列表 ， 多个 屏幕 有用 ， 简单 选定 第一个 屏幕 。 QScreen 对象   size   方法 获取 屏幕 大小 尺寸 ， 返回 QSize 对象 。   QWidget 类的   geometry   方法 返回 一个 量 ， 量的 width 窗 体的 宽度 ， 量的 height 属性 窗 体的 高度 。   调用 QWidget 类的 move 方法 ， 是对 mywidget 实例 作用 。 move 方法 X ， Y 是从 屏幕 坐标 原点   ( 0 , 0 )   计算 。 第一个 参数 X 向右 宽度 ， Y 向下 高度 。   函数 作用 效果 窗体 居中 显示 。   QMainWindow 类   QMainWindow 类 提供 程序 主 窗口 ， 创建 一个 经典 拥有 状态 栏 、 工具 栏和 菜单 栏的 程序 骨架 。 （ QWidget 类 ， 换成 QMainWindow 类 。 ）   第一个 例子 都是 用的 QWidget 类 创建 一个 窗体 。 QWidget QMainWindow 两个 类的 区别   网站   结论 ： QWdget 类在 Qt 中是 画 类的 基础 （ 是窗 体的 基础 。 ）   基于 QWidget 类都 独立 窗 体而 显示 而不 母体 （ parent ） 。   QMainWindow 类是 针对 主 窗体 需求 设计 ， 预定 义了 菜单 栏 状态 栏和 widget （ 窗口 小 部件 ）   。 继承 QWidget ， 谈及 属性 修改 都 于它 。 代码 中的 QWidget 类 换成 QMainWindow 类 ， 加上 一个 状态 栏 提示 信息 。   【 beginning - first06 】   加上 菜单 栏   【 beginning - first07 】   讨论 加上 状态 栏 类似 ， QMainWindow 类的   menuBar   方法 一个 菜单 栏 对象 。 菜单 栏 对象   addMenu   方法 创建 一个 新的 菜单 对象 （ QMenu 类 ） ， addMenu 方法 内容 新建 菜单 显示 文本 。   菜单 对象 加上 动作 ， 调用 菜单 对象   addAction   方法 ， menuBar 创建 一个 菜单 栏 对象 ， addMenu 方法 创建 一个 菜单 ， 返回 一个 菜单 对象 ， 菜单 对象 addAction 方法 ， 方法 菜单 添加 一个 动作 ， 或者说 一个 item 一个 内容 ， addAction 返回 一个 动作 对象 ， 动作 对象 信号 － 槽 机制 连接 ， 其和 一个 函数 连接 。   动作 对象 ， 菜单 下拉 选项 ， 鼠标 点击 ， 将会 触发   triggered   信号 ， connect 方法 连接 槽上 （ 定义 函数 ） ， 将会 触发 函数 执行 。 信号 － 槽 机制 详细 。   信号 － 槽 机制   GUI 程序 都 引入 一种 事件 信号 机制 ， ， 简单 来说 一个 循环 程序 ， 循环 程序 等到 时刻 程序 会 自动 做 事情 刷新 程序 界面 ， 扫描 键盘 鼠标 ， 用户 点击 鼠标 键盘 ， 会 接受 信号 做出 。   猜 到了 ，   close   函数 退出 循环 程序 。 调用 主 程序   exec _   方法 ， 开启 循环 程序 。   新的 信号 - 槽 语法 所示 ：   新的 信号 － 槽 机制 语句 变得 更 精简 更 易懂 。 过程 所述 ， 对象 发出 信号 ， connect 信号 槽 （ 定义 函数 ） 连接 一个 反射弧 。   槽 主 窗口 实例 close 方法 ， 是主 窗口 自带 函数 。   aboutqt 函数 。 读者 不 懂 请 翻阅 QMessageBox 类的 静态 方法       aboutqt   。   再 随便 画点   再 随便 画点 ， QMainWindow 中心 面板 是由   setCentralWidget   ， 随便 新的 定义 面板 设置 垂直 布局 ， 简单 加上 一个 按钮 。 按钮 点击 会 执行 print     world 动作 。 更 详细 请 参看 信号 - 槽 详解 小节 布局 管理 小节 。   信号 － 槽 详解   信号 ( singal ) 连接 无数 多个 槽 ( slot ) ， 连接 槽也 ， 信号 连接 信号 。 所述 ， 连接 语句 形式 ：   . singal . connect ( slot )   。 比如说 按钮 最 常见 内置 信号   triggered   ， 而槽 实际上 函数 ， 主 窗 体的   . close   方法 。   信号   QObject   一个 属性 ， pyqt 窗 体有 很多 内置 信号 ， 定义 信号 ， 再 提及 。 信号 还 没和 槽 连接 一个 属性 ，   connect   方法 连接 ， 信号 － 槽 机制 建立 。 类似 信号   disconnect   方法   emit   方法 。 disconnect 断开 信号 － 槽 机制 ， emit 激活 信号 。   定义 信号 槽 . singal . connect ( slot ) 简洁 形式 工作 感到 困惑 。 先 简要 介绍 。   信号 都是 类的 一个 属性 ， 新的 信号 继承 QObject ，   PySide2 . QtCore . Singal   方法 创建 ， 方法 接受 参数 中最 types 类型 ， int ， bool ， 信号 传递 参数 类型 ， 传递 参数 值的 emit 方法 。 槽 实际上 封装 函数 ， 函数 接受 参数 不 接受 参数 ， 参数 值传 进来 emit 方法 执行 ， 隐藏 一个 细节 emit 方法 。 比如说 定义 一个 新的 信号 ， 点击 屏幕 x , y 坐标 发送 ， 内置 信号 － 槽将 机制 都 ， 定义 信号 槽 ，   Singal ( int , int )   ， 发送 func ( x , y ) ， x y 值你 emit ( x , y ) 发送 。   请看 例子 ：   【 singal - slot / age 】   spinBox . valueChanged . connect ( slider . setValue )   spinBox   valueChanged   信号 slider   setValue   槽 连接 ， QSpinBox 内置   valueChanged   信号 发射 自带 一个 参数 改变 后的 值 ， 值 传递 给了 QSlider 内置 槽   setValue   ， slider 值 设置 为新 值 。 ， slider 值 发生 改变 ， 会 发送 valueChanged 信号 ， 传递 给了 spinBox ， 执行 内置 槽 setValue ， 值即 原值 ， spinBox 内的 值就 发生 改变 ， 程序 陷入 死 循环 。   定义 信号   创建 一个 定义 信号 ：   定义 槽   python 格式 定义 函数 定义 槽了 。 推荐 Pyside2 槽 装饰 器来 定义 槽 。   第一个 例子 定义 名叫 foo 一个 槽 ， 不 接受 参数 。 第二个 槽 接受 一个 int 类型 值和 str 类型 值 。   发射 信号   信号 对象 emit 方法 用来 发射 信号 ， 信号 对象 disconnect 方法 断开 信号 槽的 连接 。   一个 信号 连接 多个 槽 ， 多个 信号 连接 同一个 槽 ， 一个 信号 一个 信号 相 连接 。   一个 例子 详解 自建 信号 自建 槽 建立 发射 机制 情况 。   【 singal - slot / FindDialog 】   建的 信号 类的 属性 ， 类 QObject 子类 ， 面板 都是 继承 QObject ， 倒是 不用 担心 。   两行 是自 定义 信号 ， 信号 两个 参数 ， 一个 str 字符 变量 ， 一个 Qt . CaseSensitivity 枚举 值 。 假设 输入 文字 ， 点击 Find 按钮 ， 请 ：   点击 执行 findClicked 槽 ， 按钮 clicked 信号 是不 带 参数 。 定义 findClicked 槽也 参数 。   findClicked 函数 QLineEdit text 值和 cs 大小写 检查 状态 。 向前 向后 勾 选来 接下来 发送 信号 。 findNext 信号 调用 emit 方法 ， 两个 参数 传递 。 findNext 正是 定义 信号 ， 正是 两个 参数 类型 。   简单 定义 两个 函数 术语 来说 称之为 槽 ， emit 方法 发送 findNext 信号 参数 ， findNext 信号 find 槽 连接 ， 信号 槽 之间 参数 匹配 ， find 接受 两个 参数 。   引用 信号 发射 对象   sender   方法 来自 GObject ， Qt 里的 窗 体 对象 都 。 用法 槽 ， 调用   . sender ( )   ， 返回 一个 发射 信号 对象 。   布局 管理   是最   QHBoxLayout     QVBoxLayout   ， 一个 水平 布局 ， 一个 垂直 布局 。   QBoxLayout   QHBoxLayout     QVBoxLayout   一个 横向 排布 ， 一个 是竖 排布 。 方法 所示 ：   Layout 对象 好像 一个 封装 器 ， Layout 还 Layout ， 窗体 子 单元 ， 都   addWidget   方法 确立 封装 关系 。 主 母 窗口 接受 一个 Layout 对象 ，   setLayout   方法 。   【 layout / 】   addStretch 方法   插入 一个 分隔符 ， 设计 器 弹簧 。   QGridLayout   QGridLayout 网格 布局 。 QGridLayout 用法 QBoxLayout 类似 ，   addWidget   方法 还 接受 两个 额外 参数 几行 几列 。   请 例子 。 例子 很 好地 演示 QGridLayout 。   ( i - 1 ) / / 3   数对 3 取商 ， 本来 1   2   3   4   5   6 … 0   0   0   1   1   1   2   2   2 … 正好 网格 中的 几行 ，   ( i - 1 ) % 3   数对 3 取余 ， 本来 1   2   3   4   5   6 … 0   1   2   0   1   2   0   1   2 … 正好 网格 中的 几列 概念 。   【 layout / gridlayout 】   QFormLayout   QFormLayout ， 表单 布局 ， 常用 提交 配置 信息 表单 。   请 例子 。 例子 来自 pyqt5 源码 examples 文件夹 layouts 文件夹 basiclayouts . py 文件 ， 做 简化 用于 演示 表单 布局 。   【 layout / basiclayouts 】     QDialog   类和   QDialogButtonBox   类 且不 去管 ， QDialog 类和 accept reject 方法 ， QDialogButtonBox 最 两个 按钮 绑定 喜好 accepted rejected 。   创建 表单 函数 ，   QGroupBox   一个 窗体 类型 ， 带有 标题 。 接下来 QFormLayout 表单 布局 核心 代码 ：   layout 创建 母窗 体 layout   setLayout   方法 两个 布局 都是 类似 ， 表单 布局 一行行 ， 方法 addWidget ，   addRow   ， addRow 方法 意义 上 接受 两个 窗体 类型 （ 包括 layout 类型 ） ，   第一个 参数 还 字符串 ， 显示 文字   。   资源 文件 管理   【 funnyclock 】   资源 文件 ， 图片 文件 ， 翻译 文件 ， 推荐 转 成 python 资源 文件 ， python 代码 中 import 即可 。 编写 一个 qrc 文件 ， qrc 文件 编写 格式 ：   qrc 编写 很 简单 ， 手工 编写 。 代码 第三 行的   icons / clock . png   qrc 文件 所在 目录 下的 icons 文件夹 ， clock . png 文件 。   qrc 文件 编写 好了 运行 命令   pyside2 - rcc   安装 pyside2 就会 自动 有了 ， 是在 安装 虚拟 环境 系统 python 环境 下的 Script 文件夹 下 。 资源 ，   引用 路径   : / icons / clock . png   ， 图标 文件 。   推荐 一个 项目 资源 文件 都用 一个 qrc 文件 管理 。   国际化 支持   小节 参考 资料 官方 文档 之外   网站   。   指的 软件 国际化 支持 是指 i18n ， 两种 语言 ， 英语 本土 语言 。 软件 字符串 都是 英语 ，   . tr ( )   封装 。   项目 里 新建 一个 translations 文件夹 ， 新建 一个 小 文件   wise . pro   ， wise 是你 模块 名字 ， 随意 修改 。 文件 内容 简要 ：   SOURCES   是你 希望 扫描 py 文件 ， 文件 所说 翻译 封装 ， 字符串   pyside2 - lupdate   工具 扫描 。 支持 路径 表达 。 不 支持 glob 语法 。   第二个 变量 TRANSLATIONS 希望 生成 目标 翻译 ts 文件 文件名 ， 格式 ：   PROJECT _ NAME 是你 项目 名字 ， QLocale . system ( ) . ( ) 是你 机器 所用 目标 语言 简写 ， 查看 下 ：     pyside2 - lupdate   小 工具 pro 文件 【 小 工具 安装 pyside2 自动 安装 】 ：   生成   timer _ zh _ CH . ts   文件 。   编辑 ts 文件   下载 qtlinguist 工具 编辑 ts 文件 生成 qm 文件 。 推荐   项目   上 下载 。   翻译 文件   翻译 文件 ， qm 文件   构建 一个 QTranslator 对象 ， 调用 对象 方法 load ， 第一个 参数 是要 load qm 文件名 ， 第二个 参数 qm 文件 路径 ， 谈及 qrc 引用 路径 。   主 母 窗口 myapp installTranslator 方法 QTranslator 对象 加 进去 即可 。   动态 切换 翻译 方案   请 参看 演示 样例   【 timer 】   多线程 初步   请 参看 演示 样例   【 timer 】   start   线程   requestInterruption     isInterruptionRequested   ， 用于 长时 线程 退出 。   最小化 托盘   请 参看 演示 样例   【 timer 】   exe 制作 安装 程序 制作   exe 制作   exe 制作 写 python 程序 freeze ， 目标 机器 上 用户 安装 python 依赖 都能 运行 程序 。   推荐 pyinstaller 。   pyinstaller 官网     。 安装 pip   安装 即可 。   推荐 项目 根 目录 下 创建 一个 简单 启动 脚本 ， 平时 测试 ， pyinstaller 程序 入口 。   NOTICE :   脚本 名字 程序 模块 名字 ， 安装 后闪 退 脚本 名字 没 取好 。   很 简单 ：   顺利 ，   dist   文件夹 下 运行 目标程序 exe 运行 ， 都 OK ， 出 ， 请 钻研 官方 文档 。   安装 程序 制作     advanceintaller     nsis   工具 制作 程序 安装 文件 。   qt   designer   安装 pyside2 实际上 安装 qt   designer ：   设计 器 快速 设计 图形 界面 ， 转 成 python 代码 文件 ：   输出 python 文件 基础 上 进一步 代码 修改 完善 工作 。 不 推荐 python 代码 中 加载 ui 文件 风格 ， 会 项目 代码 一种 分裂 感 。   生成 代码 很 满意 ， 权作 参考 。   配置 文件 管理   QtCore 模块 里 提供   QSettings   类来 管理 软件 配置 文件 。   QSettings 构造 函数   先 推荐 OrganizationName ApplicationName 设置 好 。   接下来 构建 一个 QSettings 对象 。   设置 好 组织 名和 软件 名 ， 上 简单   QSettings ( )   创建 一个 配置 文件 对象 ， 不 带 参数 ， parent 取 默认 值 ， format 取的 默认 值是   QSettings . NativeFormat   ， scope 取的 默认 值是   QSettings . UserScope   。 scope QSettings . SystemScope ， 软件 配置 文件 权限 ， 先 略过 ， 默认 UserScope 。   fromat 取 默认 NativeFormat 软件 配置 文件 安装 目录 ：   linux 系统 ， 例子 配置 文件 ：   windows 系统 ， 例子 ：   windows 下 配置 放在 注册表 。   IniFormat   希望 配置 文件 都以 ini 形式 存储 ， 格式 初始化 配置 文件 对象 ：   配置 文件 就在 ：   / home / wanze / . config / Wise / wise . ini   。 linux 系统 情况 ， windows 系统 官方 文档 给出 ：   % APPDATA% \\ Wise \\ wise . ini   ，   % APPDATA%     C : \\ Documents     Settings \\ * User   Name * \\ Application   Data   调用   . settings . fileName ( )   查看 配置 文件 对象 路径 所在 。   推荐 配置 文件 mainwindow 实例 属性 如上 . settings ， 子窗 体都 调用 配置 文件 对象 。   ini 文件 存放 DIY   希望 ini 文件 放在 喜欢 地方 ， 配置 文件 构造 函数 第三种 形式 ：   第一个 参数 是你 配置 文件名 ， 第二个 参数 format 。 上 路径 是从 软件 运行 时的 文件夹 算起 。   ini 文件 事项   ini 文件 大小写 不 敏感 ， 尽量避免 两个 变量 名 相近 大小写 。     \\     /   。 windows 里   \\   会 转换 成   /   ，   /   用来 配置 文件 中 分组 关系 。   存 值和 读 值   配置 文件 对象 建立 很 存放 值和 读 取值 。 存 值用   setValue   方法 ， 取值     方法 。 所示 ：   setValue 键在 配置 文件 对象 中 ， 更新 值 ， 修改 生效 ，   sync   方法 ， sync 方法 不 接受 参数 ， 同步 配置 文件 中的 更新 。     方法 第一个 参数 \" 键 \" ， 第二个 参数 是可 选值 ， 没 找到 键 ， 将会 返回 值 。 写上 ， 配置 文件 不 在了 ， 会 发生 读取 错误 。   方法 ：   :   接受 一个 \" 键 \" ， 字符串 对象 ， 返回 bool 值 ， 键 。   remove :   接受 一个 \" 键 \" ， 移除 键 。   allkeys :   不 接受 参数 ， 返回 \" 键 \" 。   clear :   不 接受 参数 ， 清除 \" 键 \" 。   群组 管理   上 例子 所示   /   数据结构 中的 分组 ， 很多 值都 前缀 ， 同属 一组 ， beginGroup 方法 endGroup 方法 管理 。 所示 ：   QWebEngine   Qt QtWebkit 都 改名 QWebEngine ， 这次 迁移 详细 信息 请 参看   网页   。 利用 QWebEngine 相关 技术 Qt 桌面 程序 上 html5 相关 编程 ， 其等 一个 内 嵌的 Chromium 浏览器 核心 ， 细节 不详 ， 大体 。   一个 简单 所示 ：   QWebEngineView 继承 QWidget ， QWebEnginePage 页面 额外 操作 。 代码 片段 QWebEngineView 加载 load html 文件 。   更 详细 请 查看 相关 官方 API 文档 ， 编写   github 项目   参考 。   快捷 键和 Tab 键 管理   伙伴 关系   QLabel setBuddy 方法 关联 输入 窗体 。 QLabel 一个 快捷 键 ， 下 快捷 键 ， 输入 焦点 会转 QLabel 伙伴 输入 窗 体上 。   快捷 键   QShortcut 类   QKeySequence   QKeySequence   类是 快捷 键的 解决 方案 。 引用   QKeySequence . Open   快捷 键 Ctrl + O 。 可用 构造 函数 所示 ：   字母 按键 类似   Qt . Key _ W   形式 ， Shift 按键 Qt . SHIFT ， Meta 按键 Qt . META ， CTRL 按键   Qt . CTRL   ， ALT 按键   Qt . ALT   。",
            "tags":"gui",
            "url":"articles/pyside2-learning-notes.html"
        },
        {
            "title":"sqlalchemy模块",
            "text":"前言   本文 分为 两个 ， sqlalchemy 非 ORM ORM 。 推荐 ORM ， 代码 更 python ， 更 易读 易懂 。 ORM 要用 好 ， 很多 非 ORM 知识 , ， 笔者 实践 列出 非 ORM 常用 知识 ：   创建 Engine   理解 创建 Engine 有助于 很多 地方 理解 配置 sqlalchemy 数据库 连接   列的 属性   列的 数据 类型   两个 是必 看的 ， 定义 ORM 模型 参考   select 语句 理解 RowProxy 对象   理解 query 中 编写 select 语句   安装   sqlalchemy 安装 简单 pip 命令 安装 即可 :   引用 惯例   都 默认 引用 :   再 提及 ， 凡是     sqlalchemy   import     语句 都 归于 上 一条 引用 。 实践 中 不 推荐 全局 引用 。   简介   sqlalchemy 连接 数据库 ， 工作 要做 ， 参考   sqlalchemy   architecture   一文 描述 :   数据库 相连 熟悉 DBAPI 接口 模块 ， :   sqlite3 ,   pymysql ,   psycopg2 ， 核心 层有 Engine ， 连接 池 ， 方言 ， SQL 表达 语言 类型 系统 。 core 层很 ， 实际上 模块 建构 core 层 之上 ， 不 要用 ORM 方法 。   非 ORM 风格   创建 Engine   创建 一个   Engine   对象 实际上 数据库 连接 操作 。   create _ engine   函数 创建 Engine 对象 ， 连接 数据库 ， 操作 才会 去 连接 。   连接 sqlite3   连接 sqlite3   - memory   推荐 采用 写法 :   谈及 sqlalchmy _ utils   database _ exists   函数 工作 。   连接 sqlite3   - disk   db 文件 创建 命令 行 工作 目录 下的 ， 路径 表达 。 还 写上 路径 表达 :   三个 斜杠 线的 基础 上还 加上 一个 斜杠 线 。 形式 通用 表达 ， 必定 两个 斜杠 线 ， 第二个 斜杠 线和 第三个 斜杠 线 之间 登录 信息 描述 ， sqlite3 信息 ， 空了 ， 所示 :   方言 系统 再 加上 驱动 :   方言 :   sqlite :   默认 driver 官方   sqlite3   模块 ， 不 改动 。   mysql :   默认 dirver   mysql - python   ， 推荐   pymysql   ， pip 安装 。   engine   =   create _ engine ( ' mysql + pymysql : / / root @ localhost / test ' )   postgresql :   默认 driver   psycopg2   ， 还 行 。   oracle :   默认 driver   cx _ oracle   。   mssql :   默认 driver   pyodbc   。   连接 mysql   确保 安装 pymysql :   连接 postgresql   MetaData 对象   MetaData 对象 看作 Table 层更 高 一级 抽象 ， 存放 Table 对象 metadata 描述 信息 。 一个 简单 理解 是将 一个 MetaData 对象 看作 sqlalchemy 内部 database 概念 。   创建 一个 unbound   MetaData 对象     MetaData ( )   默认 创建 一个 unbound   MetaData 对象 。   bind 一个 Engine 对象   一个 unbound   MetaData 对象   bind   一个 Engine 对象 。   创建 指定 :   还 engine URL 表达 后台 自动 创建 一个 engine ， :   初学者 用的 最 多的   BoundMetaData   ， 谈及 方法 创建 一个   BoundMetaData   对象 ， Table 对象 关联   BoundMetaData   对象 ， Table 对象 :   创建 。   测试 数据库     sqlalchemy _ utils   想法 来自   网页   。     sqlalchemy _ utils   额外 安装 ， 利用   database _ exists   函数 检测 数据库 ， 不 则用   create _ database   函数 创建 。     init _ sqlalchemy   函数 最 一个 参数   dburl   ， 细节 已 叙述 ， 正是 照它 创建 Engine ， 基于 Engine 对象 创建 MetaData 对象 ， MetaData 对象 bind engine ， 返回 metadata 即可 ， metadata 。   操作 就以 创建 一个 Table 对象 ， database 操作 ， 建议 如同 ， 都 提到 顶层 sqlalchemy _ utils 模块 。 类似   drop _ database   :   删除 database ， 参数 create _ database Engine 对象 url 。   创建 一个 Table 对象   一个 完整 例子 ， 创建 一个 Table 表格 。   db   谈及 MetaData 对象 ， 创建 Table 对象 第一个 参数 创建 SQL 表格 名字 ， 第二个 表格 bind MetaData 对象 ， 简单 理解 为该 表格 对象 存入 MetaData 对象 代表 database 中 。 调用   db . create _ ( )   ， bind 到该 db 上的 表格 都将 创建 。 还   users . create ( )   单独 创建 表格 。   利用 已 Table   数据库 Table ， 创建 一个 Table 对象 ， 只 做 Table 对象 :     autoload   设置 True 即可 。 db metadata ， bind 了的 metadata 对象 ， 若还 未 bind ， 则还 加上 autoload _ 参数 。   数据库 中 创建 表格   metadata 对象 ， 调用   create _   方法 创建 表格 （ 其也   checkfirst   参数 。 ） :   Table 对象 调用   create   方法 来自 创建 。 推荐 加上   checkfirst = True   设置 ， 就算 数据库 中 表格 报错 。 所示 :   类似 用法 用于 安装 删除 表格 ， 表格 不 报错 :   代码 改成 样子 :     NoSuchTableError   ，   autoload = True   获取 Table 对象 数据库 中 不 ， 则将 抛 出 异常 。   列的 属性 设置   创建 表格 对象 一系列 参数 列 Column 对象 ， 第一个 参数 列的 名字 ， 第二个 参数 列所 存储 值的 类型 ， 还 选项 属性 进一步 修饰 。 所示 :   primary _ key :   设置 列为 主 键列 称之为 主键 约束   unique :   该列 加上 唯一 约束 ， 列的 值 重复 。 主键 约束 一种 唯一 约束 。   nullable :   列可 为空   default :   列的 默认 值 设置   index :   该列 索引   auto _ increment :   Integer 列 数值 自动 递增   ForeignKey ( ' brand . id ' ) :   设置 外键 约束   CheckConstraint ( ' amount   >   0 ' ) :   设置 Check 约束   onupdate :   最 常见 用法 :   onupdate = datetime . utcnow   是若 update 了则 调用 callable 对象 。   列的 数据 类型 声明   列 存储 值的 类型 描述 详细 介绍 ， 更 信息 请 参看 文档 查看 。   Class     Python   Type   SQL   Type   (   SQLitedriver )   Arguments   String   string   TEXT     VARCHAR   length   Integer   int   INTEGER     SmallInteger   int   SMALLINT     Numeric   float , Decimal   NUMERIC   precision = 10 ,   length = 2   Float   float   NUMERIC   precision = 10   DateTime   datetime . datetime   TIMESTAMP     time   datetime . time   TIME     Date   datetime . date   DATE     Binary   byte   string   BLOB   length   Boolean   bool   BOOLEAN     Unicode   unicode   TEXT     VARCHAR   length   大致 ， sqlalchemy 类名 大致 等同 ， 多了 一个 上的 名字 。   FLOAT :   等同于   Numeric   TEXT :   等同于   String   DECIMAL :   等同于   Numeric   INT :   等同于   Integer   INTEGER :   等同于   Integer   TIMESTAMP :   等同于   DateTime   DATETIME :   等同于   DateTime   CLOB :   等同于   String   VARCHAR :   等同于   String   CHAR :   等同于   String   NCHAR :   等同于   Unicode   BLOB :   等同于   Binary   BOOLEAN :   等同于   Boolean   mysql 方言 额外 类型   Class     Python   type   SQL   type   Arguments   MSEnum   string   ENUM   values   MSTinyInteger   int   TINYINT   length   MSBigInteger   int   BIGINT   length   MSDouble   float   DOUBLE   length = 10 , precision = 2   MSTinyText   string   TINYTEXT     MSMediumText   string   MEDIUMTEXT     MSLongText   string   LONGTEXT     MSNVarChar   unicode   NATIONAL   VARCHAR   length   MSTinyBlob   byte   string   TINYBLOB     MSMediumBlob   byte   string   MEDIUMBLOB     MSLongBlob   byte   string   LONGBLOB     MSBinary   byte   string   BINARY   length   MSVarBinary   byte   string   VARBINARY   length   MSSet   set   SET   set   values   MSYear   int   YEAR   length   MSBit   long   BIT   length   postgresql 额外 类型   Class     Python   type   SQL   type   Arguments   PGArray     TypeEngine   type   engine [ ]   TypeEngine   PGBigInteger   int , long   BIGINT     PGInet     INET     PGInterval     INTERVAL     Oracle 额外 类型   Class     Python   type   SQL   type   Arguments   Oracle   byte   string   RAW   length   JSON 支持   特别 值得 提 ， 主流 数据库 都 支持 JSON 数据 。 sqlalchemy JSON 字段 类型 ， postgresql 很 早就 支持 ， mysql 版本   >   5.7 . 5   支持 ， 估计 大多 超过 版本 。   很 好用 ， 推荐 读者 去 下 ：   insert 语句   谈及 Table 对象 调用   insert   方法 即可 一个 临时 表达 语句 对象 （ 大概 类似 东西 ， 词是 杜撰 。 ） ， 执行   i   =   users . insert ( )   :   i 临时 表达 语句 对象   execute   方法 ， 接受 参数 ， 所示 :   语句 执行 ， 数据 就被 插入 进 数据库 。 还 execute 方法 插入 多个 值 ， 所示 :     insert   ignore   语句 ， :   例子 sqlite 情况 ， mysql 写成   . prefix _ ( ' ignore ' )   形式 。   额外 值得一提的是 :   重复 刷 ， primary _ key ，   user _ id   指定 ， ignore 逻辑 基于 主 键列不 重复 。   delete 语句   delete 语句 类似 insert 语句 谈及 ， SQL   delete 语句 情况 ， 其为 第一个 可选 参数 过滤 字句 ， 所示 :     users . c . password   用法 ， 细节 再 讨论 ， 大体 users 表格 password 一列 值 等于 None （ NULL ） ， python 中的     None   写法 试了 不行 。   delete 语句 是将 users 表格 中 password 空的 行都 删除 ， 构建 delete 语句 时 ， 不 填 语句 ， 则是 表格 记录 都将 删除 。   update 语句   update 语句 ， 更新 几个 user password 。   update   语句 参数 设置 :   第一个 可选 参数 delete   whereclause   过滤 字句 ， 第二个 values 要跟 一个 字典 值 ， 用来 设置 值 。 演示 构建 update 语句 风格 ， 风格   insert   ,   update   ,   select   语句 构建 。   str 显示 参数 给打 进去 ，   u2 . execute ( )   执行 就会 效果 。   select 语句   select 语句 谈论   insert   语句 构建 过程 类似 ， SQL 中 select 语句 情况 较为 ， select 语句 还 查询 返回 值 ， 东西 很多 。   看 函数 :   select 语句 执行 返回   ResultProxy   对象 ， 语句 迭代 。 不 带 参数 select 语句 返回 Table 行 :   :     _     &   用法 :   类似   _    |  做 逻辑   ;     _     \" ~ \"   做 逻辑 非的 。     startswith   ,     ,   endswith       ,   _   :   ResultProxy 对象   select 语句 执行 后 返回 ResultProxy 对象 迭代 外 方法 。   fetchone :   取 一行 ，   RowProxy   对象 ， 可用 api 会 描述 。   fetchmany :   取 多行 ， 返回 一个 列表 ， 其内 装着   RowProxy   对象 。   fetchall :   取 行 ， fetchmany 不 指定 size 等同于 取 行 ， 返回 一个 列表 ， 其内 装着   RowProxy   对象 。   scalar :   keys :   rowcount :   close :   RowProxy 对象   ResultProxy 对象 迭代 ， fetchone ， fetchmany ， fetchall 方法 ， RowProxy 对象 ， 数据库 一行 记录 。 对象 api 操作 很 灵活 ， 操作 一个 字典 操作 ， 类似 操作 namedtuple 般的 操作 ， 还 如同 列表   [ 0 ]   索引 方法 提取 一列 ， 所示 :   多表 连接   代码 情况 所示 :   交叉 连接 笛卡尔 积   交叉 连接 情况 :   内 连接   是内 连接 情况 :   sqlalchemy 一种 更 智能 内 连接 用法 :   外 连接   外 连接 所示 ， 写入 顺序 。 第一个 连接 第二个 ， 过滤 条件 data 收 进来 ， 则用 NULL 填充 。   ORM 风格   sqlalchemy 模块 面向对象 封装 改动 较大 ， 参考 资料 1 2 内容 很多 都 过时 ， 没 办法 只好 看 嚼 官方 文档 。   段 代码 :   调用   User   类的   __ table __   ， 实质 - orm 风格 提及 Table 对象 。   ORM 层是 Session 对象 来和 数据库 会 话的 :   先将 session 数据库 CRUD （ CREATE   RETRIEVE   UPDATE   DELETE ） 操作 :   orm 层 创建 数据库   引入 orm 对象 ， 调用   __ table __   Table 对象 ， 调用   create   方法 即可 。   Warning :   单表 创建 外键 关系 ， 有则 会 失败 。   官方 教程 推荐 ：   增加 记录   表格 增加 一条 记录 :   session   add   一条 记录 ， 更改 称之为 - fly 更改 ， 谈及 基于 python 对象 操作 记录 属性 更改 ， 都是 - fly 模式 。 执行   session . commit ( )   ， 更改 才会 刷入 数据库 ， 更改 刷入 数据库 ， 代码 查询 操作 都是 基于 改动 新的 （ 看作 某种 形式 基于 内存 ） 数据库 。   SQL transaction 概念 ， SQL 数据库 transaction 数据 提交 保障 — — transaction 提交 失败 ， 将会 rollback 回 滚之 ， 保证 SQL 数据库 mess   。 session   rollback   方法 主动 回 滚 ， - fly commit transaction 都 会被 丢弃 。 session   commit   ， 这次 transaction 成功 提交 ， 下次 一个 新的 transaction 。   查询 记录   谈及 - orm 风格 中 提到 select 语句 查询 ， orm 风格 查询 语句 精简 ， 脱离 select 语句 查询 本质 ， 熟悉 SQL select 语句 更好 学习 查询 语句 。   查询 起步 :   返回 orm 子 模块 Query 对象 。 User 查询 类 （ 表格 ） 。 简单 理解 是将   query   方法 看作 select 操作   select   *     User   。   Query 对象 个可 迭代 对象 ， 迭代 过程 中 返回   User   对象 。   写成 形式 :   大致   select   , fullname     User   。   所示 :   学习 SQL select 语句 学到   select         语句 还 跟上 字句 ， order   字句 。 sqlalchemy orm 封装 支持 额外 操作 ， query 语句 基础 上 进一步 操作 。 额外 操作 返回 Query 对象 ， 写上   session . query ( User ) . filter _ ( ) . filter ( ) . order _ ( )   。 看上去 长的 语句 ， 熟悉 SQL 语句 ， 在做 些 ， 。   过滤 排序 操作   filter 方法 :   filter 方法 select 语句 字句 。 官方 文档 例子 ， 复制 熟悉 即可 ， 大多 含义 都是 :   filter _ 方法 :   filter _ 方法 类似 filter 方法 ， User . 写成 ， 引用 表格 列名 。   order _ 方法 :   select 语句 order   字句 。   还 揭示   Query   对象 很 一个 特性 ， 支持 python 切片 操作 。   返回   Query 对象 还 方法 还 返回 :   ( ) :   返回 一个 列表 ， 包含 。   ( ) :   返回 第一个 。 返回 None 。   ( ) :   一个 ， 多个 ， 将抛 出   MultipleResultsFound   异常 ， ， 将抛 出   NoResultFound   异常 。   scalar ( ) :   参考   网页 第五条   ， 执行 查询 ， 多条 记录 命中 ， 则抛 出 MultipleResultsFound   异常 ， 命中 ， 返回 None ， 命中 数为 一条 记录 ， 返回 记录   第一列   值 。   count ( ) :   返回 命中 记录 数 。   更 多的 查询 例子   text 函数   text 函数 用于 支持   filter     order _   方法 支持 原生 SQL 语句 表达 。 大致 所示 ， 下 即可 :   更改 记录   更改 记录 ORM 封装 变得 很 简单 ， 查询 python 对象 ， 修改 即可 。   删除 记录   批量 修改 删除   ORM 层的 关系   SQL 表格 四种 关系 ， - - ,   - - ,   - - ,   - - ， 实际上 都是 基于 SQL 外键 约束 join 查询 。 - - - - 是最 关系 模型 ， 之上 - - ， 三个 SQL 表格 搭建 关系 模型 很 好 理解 。 推荐 读者 阅读   篇 文章   更好 理解 SQL 表格 四种 关系 模型 。 - - 实际上 - - 情形 ， - - 实际上 - - 模型 反向 ， 重点 - - 模型 。   - - 模型   sqlalchemy orm 层对 - - 关系 高度 封装 ， 不 SQL join 连接 语法 细节 ， 只 声明 好外 键 约束 关系 约束 （ 看作 sqlalchemy 新 关系 约束 ） ， 神奇 SQL 表格 - - 特性 。   ORM 层的 join 方法 暂时 SQL 表格 relationship 建立 细节 ， 再来 讨论 更 实用 ORM 层的 relationship 建立 写法 。   示例 代码 :   sqliteman 观察 数据库 情况 :   session . query ( User , Email )   返回 笛卡尔 积的 形式 :   调用 Query 对象   join   方法 执行 了内 连接 :   一点 - - 影子 ， John 两个 Email 对象 。   稍加 过滤 条件 :   更 查询 email :   形式 :   内 连接 输出 一行 输出 内容   select     ， 行数和 内容 描述 上 实际上 回事 。 一种 内 连接 顺序 。 利用 反向 查询 邮箱 User ， - - 数据 模型 。   Query 对象   outerjoin   方法 ， 是要 描述 关系 模型 ， 略过 。 介绍 ORM 层更 实用 关系 定义 方法 :   :   确实 很 好用 ， 模型 （ user ） （ email ） - - 模型 。   重点 介绍   relationship   一行 干了 些 :   User   email 属性 ， 如上   john . email   调用 。   指定 Email （ ） 端 （ 理解 针对 Email 执行 了内 连接 操作 ， sqlalchemy 内部 细节 还 不 ， 差不多 过程 。 ） ， 这样的话 User . email 值就 某种 机制 大概 所示   User   John 回应 几个 Email 对象 。 过程 不 ， 语句 理解 八九不离十 。   - - 模型   - - 模型 - - 模型 特例 ， 先讲 ， 区别 很小 。   加上   uselist = False )   一句 ， 返回 Email 对象 。   - - 模型   - - 模型 实际上 - - 模型 回事 ， 如同   backref   设置 好 ， 针对 多个 Email 对象 实际上 找到 User 对象 ， 简单 见 ， - - 模型 理解 。   - - 模型   - - 模型 难于 理解 ， 是因为 其还 一个 额外 Table 管理 原 两个 表格 之间 元素 映射 关系 ， 幸好 sqlalchemy 官方 文档 有一 小节 做出 。 描述 一个 场景 一篇 博文 多个 标签 ， 一个 标签 多篇 博文 （ 简单 构建 出 一个 功能 ， 单击 一个 标签 按钮 ， 弹出 标签 文章 ） 。 一个 博文 多个 标签 很 简单 ， 一个 - - 模型 解决 ， 大概   blog . tags   ， 弹出 一个 list ， 装着 标签 对象 。 关键性 出   tag . blogs   ， 弹出 一个 list ， 装着 博文 对象 。 而在   篇 文章   幅 图片 中 :   情况 ， blog   - - ，   一个 表格 ， tag   - - ， 一个 表格 。 一方 存储 着外 键 约束 值 ， 表格 两列 ， 左 列外 键 引用 blog ， 右列外 键 引用 tag ， 一个 映射 关系 都要 写 一条 记录 。 说 ， 看 例子 :   生成 表格 所示 :   执行 :   关键 建立 一个 表格 :   建立 一个 relationship :     secondary   参数 指定 新建 表格 ， 表格 数据 都不 操心 ， 只 上   blog1 . tags   属性 （ 一个 列表 ） 操作 行了 。   利用 ORM 层来 很 简单 ， 想像 sqlalchemy 底层 到底 做 工作 ， 不得不 承认 ， sqlalchemy   Great 地方 。 值得一提 地方 两个 表格 都 外键 约束 ， 说 关系 连接 工作 抽象 一个 表格 。   ， 类似 - - ， 管理 方的 表格 ， 回引 backref 方 对象 属性 ， 定义 一个 表格 行了 。 - - 数据 模型 很 有用 。   删除 动作   manytomany 例子 append 一个 元素 ， 删除 一个 元素 ， 调用 remove 方法 即可 ：   高级 议题   cascade   定义 基于 关系 删除   默认 值是   save - update   merge   save - update   指 一个 对象   Session . add ( )   ， 对象 都应 加 进去 。   merge   Session . merge   用的 最 多的       delete - orphan     指   save - update   merge   refresh - expire   expunge   delete   delete   Session . delete ， 默认 没 加 delete ， 则子 对象 parent _ id 赋 空值 ， 加了 子 对象 删除 。   delete - orphan   增加 delete   删除 ， 子 对象 将被 删除 ， 子 对象 执行 Session   delete 标记 ， 子子 对象 删除 delete 配合 。   自我 引用 表达 树状 结构   一个 SQL 表格 表达 出 树状 层级 结构 （ 很大 程度 上 弥补 python 语言 树状 结构 应付 能力 ） :   写法 所示 :     parent _ id   NULL 最高级 节点 ， 一个 子 节点 都 描述   parent _ id   。 children 引用 ， 大体 类似   - -   写法 ， 一个 节点 多个 子 节点 ， 。 唯一 区别 设置   remote _ side = [ id ]   ， 写法   remote _ side = id   ， parent _ id 本地 local 端的 ， id 列是 remote 端的 。 更 信息 请 参看   官方 文档   。   面向 ORM 内省 机制   原 数据库 表格 ， 提及 :   自动 内省 表格 ， 而在 面向 ORM 写法 中 ， 。 请 参看   官方 文档   。 最 核心 代码 :   schema 任意 改动 ， 扩展 SQL 数据库 ， 搭建 关系 ， 实在 改动 schema ， 推荐 采用 migrate 机制 。 写的 一个 简单 migrate 脚本 :   多个 表格 加上 关系 情况 变得 更 ， 脚本   建立 内省 模型 关系 ， 多个 表格 ， 句 话 再 放到 些 。 添加 新的 数据 sqlalchemy 自动 相关 关系 对象 功能 ， 倒 不 大 ， 会有 。 模块 迁移 数据库 ， 绝不 一件 轻松 事 。 SQL 表格 尽量 设计 好和 可扩展性 好 ， 太多 精力 花在 是很 浪费 。   面向 ORM 数据 继承 机制   时间 补上 。   额外 属性 支持   额外 属性 基于 SQL 表格 一列 属性 ， ORM 之上 建立 额外 属性 ， 基于 SQL 表格 一列 列的 ， ORM 封装 之上 提供 便利 属性 接口 。   一列 额外 别名   一列 额外 别名 指 创建 额外 列 ， ORM 层 针对 一列 额外 别名 来做 类似 操作 。   等于 :   列在 ORM 层   status     job _ status   操作 。 参考     。   多列 组合 唯一性 约束   请 参看   网页   。   ORM 层 ， 则是 :   flask _ sqlalchemy   db . UniqueConstraint   。   :   Core 层 ， 则是 :   ORM 层的 内省   Table 层 利用 数据库 表格   reflect   概念 ， ORM 层多了 很多 额外 东西 ， 最 关键   relationship   概念 ， sqlalchemy Automap 一章 解决 ORM 层 内省 。 更 详细 讨论 请 参看   官方 文档   。   最   建立 一个   automap _ base   对象 :   运行   prepare   方法 内省 :   sqlalchemy   ORM 层的 类就 :   属性 引用 ， 。 relationship ， 预先 定义 属性 ，   prepare   ， 预先 定义 东西 覆盖 自动 reflect 定义 ， 起到 矫正 作用 。 预先 定义 类 类了 ，   Base . classes .   风格 再 获取 。   分表 策略   表格 数据 量过 大的 ， 建立 分表 策略 ， 值取 模来 表名 ， 先看 例子 ， 例子 参考   网页   。   提供   . model   方法 ， 核心 利用 type 函数 生成 一个 类 ， 说的 元类 编程 ， 参数 ：     _ mapper   是本 对象 一个 类 对象 缓存 ， 免得 重复 创建 。   例子 中最 关键   __ tablename __   差异化 定制 。   附录   datetime 数据 类型   sqlalchemy 中 DateTime   数据 类型 默认 值 跟着   datetime . datetime . utcnow   所示 :   参考 网页   测试   参考 网页   参考 资料   essential   sqlalchemy   ;   author :   Rick   copeland   ; press : O ' REILLY   a   step     step   sqlalchemy   tutorial   sqlalchemy - essential - tutorial - - techniques   面向 django   orm 用户 sqlalchemy 教程",
            "tags":"python_companion",
            "url":"articles/sqlalchemy-module.html"
        },
        {
            "title":"tesseract研究第一谈",
            "text":"简介   tesseract 开源 界 一款 热门 OCR 软件 ， 闲话 少说 ， 慢慢 研究 软件 ， OCR 工作 更 快更 精准 。   CMAKE 安装   tesseract   github   上 用用 C ++ 写的 ， C 语言 C ++ 语言 编写 项目 大多 用的 CMAKE 管理 项目 编译 构建 工作 。 安装 CMAKE ， windows 安装 ， 很 简便 ， 记得 cmake 命令 勾 选为 添加 系统 PATH 变量 。   一个 简单 样例 项目   windows 上的 编译 指导 官方 文档 特别 简单 样例 项目 ， 样例 项目 两个 文件 ， main . cpp   C ++ 语言 调用 tesseract ， CMakeLists . txt   文件 是和 CMAKE 编译 工作 相关 。   cmake 语法 初识   cmake 版本 最小   设置 项目 名字 ， 第二个 可选 参数 是本 项目 语言 。   假设 项目 一个 main . cpp 文件 ， 句的 效果 main . cpp 输出   { PROJECT _ NAME } . exe   可执行文件 。   相当于 设置 常量 。   目标 文件 链接 文件 链接 。   sw   sw 工具 类似 python 生态圈 pypi ， cppan ， 专注 C ++ 语言 生态圈 ， 更名 Software   Network ， 看得出 来其 野心 是要 做 一个 全 软件 生态圈 服务 。 说 tesseract CMAKE 编译 依赖 sw 工具 。   安装 sw     sw 官网       下载 ， 设置 好   PATH   环境 变量 即可 。 第一次 还 运行 ：   sw cmake 集成   sw 官方 文档 【 20200809 版 】 2.4 小节 详细 叙述 sw cmake 相关 集成 写法 ， 给出 CMakeLists . txt 文件 最 核心 接下来 讨论 内容 。   确保 sw 命令 。   添加 项目 sw 相关 依赖 。   执行 sw 引入 目标 脚本 。   cmake   不 讨论 额外 参数 ， 就最 cmake 管理 项目 编译 过程 大体 ：   推荐 新建 一个 build 项目 ， 编译 工作 。   CMakeLists . txt 文件 项目 编译 预处理 工作 。   调用 cmake 编译 工作 。   第一步 sw 相关 软件 依赖 工作 ， 过程 开 代理 翻 墙 才能 跑通 。 针对 sw 国内 源 。   第二步 【 20200813 】 一个 错误 。 定位 大概 ：   文件 236 行报 错 ： error   C3688   符号 显示 错误 。 代码 ：   上将 符号 删掉 跑的 通了 ， 暂时 先不 深究 。   样例 项目 程序   样例 项目 main . cpp 程序 代码 一行 判断 ：   读取 模型 文件 ， 模型 文件     ， 不 都下 ，   eng . traineddata     chi _ sim . traineddata   下载 即可 。   cmake 机器 上的 visual   studio 相关 C ++ 环境 识别 ， 输出 项目 visual   studio 解决 方案 文件 ， visual   studio 加载 文件 main . cpp 修改 很快 再 生成 解决 方案 。 类似 C ++ 项目 相关 知识 ， Debug 文件夹 下 新建 一个 文件夹   tessdata   ， 下载 模型 文件 放 进去 。   往下 看 ：   命令 行的 第一个 参数 读取 图片 。 读者 请 自行 制作 额外 英文 中文 测试 图片 ， 网页 上 截图 即可 。   简单 看 代码 setImage 设置 tess 主 接口 图片 ， Recognize 识别 ， 0 参数 意义 不明 ， 重点 。 输出 ，   GetUTF8Text   ， 告诉 输出 文本 utf8 编码 ， 带来 一点 困扰 。 windows powershell 默认 936   gbk 编码 ， 其将 输出 乱码 ， 请将 调成 65001   utf8 编码 ， 参看   篇 文章   。   样例 代码 默认 加载 英文 模型 ， 中文 加载 中文 模型 ， 临时 修改 ：   还 tesseract - ocr 还 新 提供 一个 针对 LSTM 训练 效果 更好   模型 仓库   。   针对 图片 是这 两个 模型 运行 效果 ：   新的 模型 输出 效果 更好 。",
            "tags":"programming",
            "url":"articles/tesseractyan-jiu-di-yi-tan.html"
        },
        {
            "title":"提取图片的特征",
            "text":"提取 图片 特征   请 参阅   篇 文章   ， 老实 说 算法 细节 看不 大 懂 ， 短时间 内是 没 希望 看 懂 .. 有太 深的 相关 领域 专业 知识 。 python 代码 很 简单 ：",
            "tags":"algorithm",
            "url":"articles/ti-qu-tu-pian-de-te-zheng.html"
        },
        {
            "title":"网络是怎样连接的阅读笔记",
            "text":"前言   《 网络 连接   1   书写 得很 好 ， 计算机网络 一块 相关 知识 不难 ， 知识点 很 繁杂 ， 浏览器 上 输入 URL 显示 网页 短短 几秒 时间 知识点 初学者 来说 多的 可怕 。 该书 一种 整体 角度 一块 知识点 梳理 ， 理解 计算机网络 运作 很 。   该书 计算机网络 信息流 给出 指导 图 引入 过多的 细节 ， 介绍 TCP / IP 网络 模型 是有 ， OSI 七层 模型 不提 行 。 TCP / IP 网络 模型 计算机网络 分为 四个 抽象 层 ： 应用层 ， 传输 层 ， 网络 互连 层和 网络 访问 层 。 分层 符合 编程   去 耦合   ， 四个 层 描述 ：   应用层 看做 计算机网络 计算机用户 连接 中间层 ， 应用层 信息 交流 设计 上是 进程 对点 目标 主机 进程 通信 ， 操作系统 内核 管的 事 。   传输 层是 解决 数据包 传输 过程 中的 ， 保证 主机 （ host ） 主机 （ host ） 之间 信息 传输 可靠 顺序 是对 。 操作系统 内核 负责 。   网络 互联 层 解决 ， 主机 找到 一个 目标 主机 。   网络 访问 层 解决 传输 信息 包到 物理层 （ 电缆 光纤 ） 做 额外 ， 一块 是由 网卡 驱动程序 。   TCP / IP 网络 模型 一个 通用 极简 版本 描述 ， 打开 一个 网页 时 ， 请求 目标 服务器 html 文件 ， html 文件 会   应用层   成 HTTP 请求 ， 请求   传输 层   成 TCP 信息 包 格式 ， TCP 协议 还 TCP 信息 包在 传输 上的 细节 。 现实 世界 计算机网络 拓扑 结构 ， IP 协议 找到 目标 主机 。 信息 包 网卡 驱动程序 ， 转换 成 电流 光纤 信号 传输 ， 目标 主机 网卡 转成 计算机 识别 信息 ， TCP 信息 包 整合 ， web 服务器 识别 HTTP 请求 信息 包 。 web 服务器 接收 HTTP 信息 包 下 一步 做 ， 返回 一个 HTTP 响应 信息 包 ， 信息 包 描述 几层 ， 响应 浏览器 接收 ， html 文件 ， 浏览器 负责 显示 html 文件 。   过程 极简 极简 版本 ， 大体 信息流 有个 概念 ， 情况 加上 亿点 细节 。   应用层   应用层 客户端 ， 比如说 一个 浏览器 ， 浏览器 上 输入 一个 URL ， 开头   http : / /   告诉 浏览器 一个 HTTP 协议 请求 。 浏览器 还 会 解析 URL 信息 进一步 HTTP 请求 报文 细节 ， 会 提及 。   HTTP 协议   HTTP （ HyperText   Transfer   Protocol ） 超文本 传输 协议 网络 世界 一个 熟知 协议 ， 应用层 ， 应用层 协议 。 HTTP 定义 两个 端 系统 ， 一个 客户机 ， 一个 服务器 ， 两个 之间 报文 交换 报文 格式 。 Web 浏览器 HTTP 协议 客户机 端 ， Web 服务器 HTTP 协议 服务器端 。   HTTP 协议 TCP 协议 传输 层的 协议 ， 用户 请求 一个 Web 页面 时 ， 浏览器 HTTP 客户机 服务器 建立 一个 TCP 连接 ， 连接 建立 ， 浏览器 服务器 套 接字 交流 。 客户机 经由 套 接字 服务器 发送 一个 HTTP 请求 报文 ， 随后 服务器 接受 到了 HTTP 请求 报文 ， 内部 ， 找到 html 文件 资源 文件 数据 运算 ， 经由 套 接字 回应 一个 HTTP 响应 报文 客户机 。 HTTP 服务器 进程 通知 TCP 断开 TCP 连接 ， TCP 大概 等到 客户机 完整 接受 HTTP 响应 报文 ， TCP 连接 断开 。 HTTP 客户机 接受 HTTP 响应 报文 ， TCP 连接 断开 ， HTTP 请求 算是 完 。   Web 页面 还 包含 图片 引用 javascript 引用 ， 一个 引用 浏览器 客户机 都将 一个 HTTP 请求 ， 类似 。 基于 HTTP 协议 TCP 协议 只 一个 请求 报文 一个 响应 报文 传输 ， 一个 Web 页面 ， 发送 十几个 HTTP 请求 ， 就要 建立 十几个 TCP 连接 。 （ 过程 大抵 ， 客户机 都会 打开 5 - 10 并行 TCP 连接 。 ）   描述 HTTP 协议 初始 版本 情况 ， HTTP /   1.1 HTTP 协议 持久 连接 特性 ， 默认 采用 持久 连接 方式 。 持久 连接 减少 新开 TCP 连接 消耗 ， HTTP 送 一个 报文 请求 断开 TCP 连接 ， 连接 长时间 未 ， HTTP 服务器 才 关闭 连接 。   说 HTTP 协议 本身 是无 状态 ， HTTP 服务器 记忆 客户机 信息 ， cookie session ， cookie 客户机 保存 状态 信息 ， session 服务器 保存 状态 信息 ， 。   HTTP 报文 格式   HTTP 报文 分为 两种 ， 一种 请求 报文 ， 一种 响应 报文 。   一个 HTTP 请求   提到 浏览器 会 分析 用户 输入 URL ， GET 跟的 路径 参数 HOST 参数 都是 分析 。   第一个 方法 字段 ， HTTP   GET   、   POST   、   PUT   、   DELETE   方法 ， HOST 请求 主机 名字 ， User - Agent 用户 浏览器 标识 ， Connection 设置 - alive 正是 说的 建立 持久 连接 。   HTTP 响应 :   响应 200 熟知 HTTP 响应 状态 码 。   cookie 技术   cookie 作用 原理 ， 用户 登录 一个 网站 ， 网站 服务器 返回 一个 HTTP 响应 ， 一行   HTTP 响应 用户 浏览器 接受 ， 其将 特定 cookie 文件 中 添加 一行 ， 有该 服务器 名字 （ HOST ） Set - cookie 标识 码 信息 。 浏览器 再 访问 网站 ， 其将 自动 HTTP 请求 上 加上 一行 :   网站 服务器 HTTP 请求 一行 ， 就说 ， ， 张三 回来 。 用户 网站 上的 操作 记录 都被 网站 数据库 统一 管理 ， 张三 点击 页面 ， 张三 买了 东西 。   本文 介绍 HTTP 协议 细节 文章 ， 更 HTTP 协议 方法 头字 段 略过 讨论 。   DNS 协议   DNS 协议 计算机网络 最底层 找到 目标 计算机 操作 相关 ， 应用层 。 讨论 计算机网络 应用层 几层 ， 标记 目标 计算机 地址 都是 用的 IP 地址 ，   www . .   形式 。   www . .   域名 解析 IP 地址 过程   域名 解析   。   域名 解析 应用层 程序 调用 套 接字   gethostbyname   函数 ， IPv6 函数 ， 重点 略过 。 讨论 ， 浏览器 程序 一步 调用 套 接字   gethostbyname   函数 获取 域名 IP 地址 。 函数 返回 主机   / / hosts   文件 信息 来的 ， 更 多的 情况 是去 查询 DNS 服务 。   查询 DNS 服务 指的 计算机 互联网 世界 里 ， 很多 DNS 服务器 ， 机器 DNS 服务器 发送 请求 目标 域名 IP 地址 。   DNS 协议 发送 DNS 查询 请求 信息 包 格式 响应 信息 包 格式 讨论 中 真 重点 ， 值得一提的是 DNS 传输 层 选择 协议 UDP 协议 。   互联网 世界 很大 ， 域名 很多 ， IP 地址 很多 ， 查询 请求 数据 记录 是不 一个 服务器 去 ， DNS 服务器 数以万计 ， 多的 DNS 服务器 ， DNS 协议 互联网 世界 上 细节 值得 。   域名 注册   互联网 DNS 域名 服务器 采用 一种 树状 结构 ， 比如说 想 注册 域名   www . .   ， 到你 域名 服务 上 配置 ， 配置 DNS 配置 ， 具体来说 域名 服务商 会给 开出 一个   .   域的 DNS 服务 ， 域的 DNS 服务器 IP 地址 注册 域的 DNS 服务器 上 。   ， cn 域的 DNS 服务器 IP 地址 会 注册 到根 域 DNS 服务器 上 ， 互联网 13 个根 域 DNS 服务器 。   域名 注册 ， 讨论 下 客户端 发出 DNS 请求 互联网 世界 里 获取 到其 IP 地址 。   域名 解析 细节   gethostbyname 函数 一个 动作 ， 将向 网卡 配置 第一 DNS 服务器 发送 一个 DNS 请求 ， 说 DNS 解析   www . .   域名 。 请求 DNS 服务器 接收 到了 ， 会把 请求 送给 根 域 服务器 【 根 域 服务器 IP 地址 固定 ， 基本上 写死 了的 】 ， 根 域 服务器   .   ， 返回 告诉 DNS 服务器 ， 域名 服务器 IP 地址 ， 去问 。   DNS 服务器 域名 服务器 发送 一个 DNS 域名 解析 请求 ， 域名 服务器 一看 ，   .   域名 服务器 IP ， 去问 。   DNS 服务器 . 域名 服务器 发送 一个 DNS 域名 解析 请求 【 额外 说 ， www 三级 域名 ， 都会 指向 同一个 IP 地址 ， 看 服务器 配置 分成 几个 DNS 域名 服务器 】 ， . 域名 服务器 说 ， 域名 是在 注册 ， IP 地址 ， 告诉 。   DNS 服务器 回 传给 客户端 ， DNS 域名 解析 就算 。   DNS 服务器 缓存 功能   讨论 ， DNS 服务器 域名 服务器 ， 基本上 承担 DNS 请求 查询 ， 是很 重的 。 DNS 服务器 开发 缓存 功能 保留 查询 记录 ， 下次 再 想你 DNS 服务器 发送   www . .   域名 解析 ， 其会 返回 IP 地址 。 域名 不 查询 记录 会被 返回 客户端 。 缓存 有个 有效期 时间 。   套 接字   套 接字 最先 C 语言 编写 一个 库 ， 编程 语言 提供 接口 。 一种 进程 间 通讯 方式 ， 操作系统 基本上 都有 套 接字 支持 。   进程 进程 之间 通信 ， 一个 客户机 进程 ， 一个 服务器 进程 ， 两个 进程 之间 通信 。 就算 P2P 体系结构 ， 理解 ， 一个 进程 客户机 服务器 。 定义 :   给定 一对 进程 之间 通信 ， 称 发起 通信 进程 客户机 进程 ， 在会 话中 等待 进程 服务器 进程 。 （ 理解 被动 等待 通信 信号 ）   两个 进程 之间 是用 套 接字   ( socket ) 发送 接受 报文 。 套 接字 连接 应用层 传输 层 ， 要说 套 接字 程序代码 计算机网络 架构 一层 ， 归于 应用层 ， 套 接字 不 TCP 协议 UDP 协议 ， 调用 TCP 协议 UDP 协议 栈 ， TCP 协议 UDP 协议 栈的 代码 才 归于 传输 层 。   套 接字 计算机网络 编程 概念 ， 计算机网络 世界 ， 基本上 绝大部分 应用层 程序 ， 客户端 服务器 ， 底层 都是 调用 套 接字 。 一个 不错 ， 好比 浏览器 http 协议 协议 调用 支持 ， 起到 调用 客户端 功能 ， 套 接字 一个 调用 客户端 ， 提供 tcp 协议 udp 协议 调用 支持 。   介绍 套 接字 总 不可避免 地去 讨论 太多 TCP 协议 细节 ， 会试 着将 套 接字 协议 分离 ， 一块 概念 清晰 。   socket 函数 ， 创建 一个套 接字 对象 ， 是套 接字 顶层 api ， 传输 层 协议 无关 ， 创建 套 接字 对象 指定 好 传输 协议 。   connect 函数 ， 客户端 套 接字 调用 协议 栈的 连接 动作 。   send recv write read 函数 ， 协议 信息 读写 动作 。   close 函数 ， 协议 栈的 断开 动作 。   传输 层   通信 协议   计算机 找到 目标 计算机 开口 说话 ， 随便 说话 发送 一堆 乱码 ， 目标 机器 是看 不 懂 。 制定 计算机 之间 通信 协议 。 计算机 之间 通信 协议 ？ 简单 来说 好比 两个 人 之间 对话 某种 规范 ， 两个 国家 外交 协商 某种 特定 交互 流程 。 一个 人对 一个 人说 \" 你好 \" ， 一个 人 收到 回应 \" 你好 \" ， 收到 ， 第一个 收到 回应 ， 协议 牵 手 成功 ， 会话 ， \" 星期 \" ， 发送 ， 一个 人 收到 回应 \" 星期一 \" … … 类似 交互 方式 。 连接 双向 ， 连接 持续 ， 发送 goodbye 关闭 协议 ， 协议 单向 ， 无 状态 协议 ， HTTP 协议 ， 信息 发送 了完 连接 就算 自动 关闭 。   描述 还 遗漏 一点 交互 流程 上有 规范 ， 发送 信息 包的 格式 规范 ， 或者说 格式 。   TCP 协议   TCP 协议 面向 连接 的和 可靠 数据 传输 。 面向 连接 是指 客户机 服务器 之间 握手 过程 好 建立 TCP 连接 ， 结束 拆除 连接 。 可靠 数据 传输 是指 TCP 协议 保证 数据 是无 差错 顺序 交付 发送 。 TCP 协议 还 拥塞 控制 机制 。 SMTP （ 电子邮件 ） 协议 ， Telnet 协议 ， HTTP 协议 ， FTP 协议 多用 TCP 协议 。   TCP 信息 包 格式   程序 传递 数据 会被 分割 成 小的 数据 块 ， 数据 块 TCP 协议 栈 发送 都会 加上 TCP 头 控制 信息 ， 图所 示 ：   数据 传输 ， 谈论 发送 一个 SYN ， 则就 TCP 头 控制 信息 。 SYN TCP 协议 中 定义 数字 位数 1 实在 细枝末节 设计 ， 略过 不 谈论 。   TCP 协议 发送 信息 称之为 sequence 包 ， 包都 编号 （ sequence   number ） 。 TCP 协议 正是 编号 保证 信息 包的 收发 顺序 不 混乱   3   。   TCP sequence 几个 必 填 字段 ， sequence   number 一个 ， source   port 一个 ， destination   port 一个 ， ACK 设置 1 填写 acknowledgment   number ， 暂时 略过 讨论 。   连接 动作   客户端 执行 连接 动作 ， 服务端 执行 bind listen 端口 动作 ， 再 讲 。 TCP 协议 连接 动作 经典   三次 握手 方式   ：   SYN 过程 ： 客户端 服务端 发送 SYN ， 发送 包的 会 生成 一个 随机 sequence   number （ 简称 seq _ number ）   SYN - ACK 过程 ： 服务端 响应 SYN - ACK 消息 ， acknowledgment   number （ 简称 ack _ number ） 设置 接受 到的 seq _ number   +   1 ， 信息 包 再 生成 一个 随机 seq _ number 。   ACK 过程 ： 客户端 响应 ACK 消息 ， seq _ number 接受 ack _ number ， ack _ number 接受 seq _ number   + 1 。   过程 讨论 太 抽象 ， 作图 【 下图 中  |  分割 左边 本机 记录 seq _ number ， 右边 本机 记录 ack _ number 】 ：   A B 处于 实践 中都 随机数 。   seq _ number   用来 记录 发送 数据 。 实践 中会 ack _ number 取值 ， ack 成功 报告 接受 数据 发送 成功 数据 。   ack _ number   用来 记录 接受 数据 ， 等于 接受 seq _ number + data _ length 。   SYN 过程 会 初始化 一个 随机 seq _ number 。   SYN FIN 默认 data _ length = 1 。 第三 行 ACK server ack _ number 没 变 SYN 标志 。   信息 读写 动作   真的 理解 讨论 ， 信息 读写 数字 生成 规则 大体 推出 来了 。   客户端 服务端 都对 接受 数据 发送 数据 详细 编号 。 保证 切分 数据 片 选择性 发送 数据 接受 数据 片 组合 数据 都是 可行 。   TCP 协议 设计 丢 包 能很 好地 应对 ， 发送 数据 没 对面 ACK 确认 ， 则我 发送 端 seq _ number 更新 ， 请求 再次 发送 。   窗口 管理 ACK 号   这块 简单 提 下 ， 毕竟 TCP 协议 是很 东西 ， 不 面面俱到 。 描述 一回 ACK 等待 太 浪费 时间 ， 实践 中会 一种 滑动 窗口 技术 管理 ACK 号来 解决 ， 这块 不 深究 。   断开 动作   套 接字 调用 close 函数 ， TCP 协议 发送 FIN 信号 ， 客户端 发送 ， 服务端 回传 一个 FIN - ACK 信号 ， 客户端 响应 一个 ACK 信号 TCP 连接 断开 动作 。   UDP 协议   UDP 一种 不 提供 不必要 服务 轻量级 传输 层 协议 ， 仅 提供 最小 服务 。 UDP 是无 连接 ， 两个 进程 之间 握手 过程 。 UDP 协议 不 保证 报文 接受 进程 收到 ， 不 保证 数据 是按 顺序 到达 。 UDP 拥塞 控制 机制 。   提到 DNS 协议 传输 层 选用 UDP 协议 。   网络 互联 层   最 原理   Internet 源起 美国 ARPAnet 项目 ， 知识点   两个 位于 网 域的 计算机 才 文件 交互   。 读者 会问 是网 域 ， 网域 说白了 一个 大的 互联网 分割 分割 再 分割 一个 产物 。 分割 手段   子网 掩 码   ， 判断 两个 计算机 网 域呢 ？ 计算机 IP 地址 子网 掩 码 相加 ， 就说 位于 网域 。     192.168 . 0.1     192.168 . 0.101   两台 计算机 交互 ， 子网 掩 码   255.255 . 255.0   之下 同一个 子网 。 同一个 子网 机器 路由器 连接 通信 。   说 一台 计算机 要对 一台 计算机 发送 一个 信息 包 ， 计算机 会 分析 路由 表 ， 发现 目标 机器 网域 ， 发送 信息 。   举 一个 例子 ， 比如说 输入   ipconfig   查看 电脑 无线 网络 网卡 配置 ：   IP 地址   192.168 . 1.101   ， 子网 掩 码是   255.255 . 255.0   。 要和 IP 地址   192.168 . 1.102   机器 通信 ， 计算 （ 子网 掩 码 位 逻辑 AND 操作   网域   ， 两个 网域 位 逻辑 XOR 操作 ， 全 0 则是 网域   2   ） 发现 两个 IP 位于   网域   ， 子网 内 ， 通信 。   不 网域 ， 计算机 就要 路由 表将 信息 包 发送 默认 路由器 （ gateway ） ， 例子   192.168 . 1.1   。 路由器 网络 世界 里 扮演 一个 角色 ， 不 数据 ， 只 负责 数据 分发 。 过程 实际上 描述 过程 迭代 重复 ， 路由器 一个 路由 表 ， 目标 机器 网域 ， 不 则将 信息 包 发送 一个 默认 路由器 交换机 ， 最终 目标 机器 位于 网域 ， 信息 包 发送 目标 机器 。   IP 协议   讨论 ， TCP 协议 TCP 模块 将要 传输 TCP   sequence 包 做好 交给 IP 协议 IP 模块 。 IP 模块 不同于 TCP 模块 对传 TCP 包都 统一 看作 数据 块 额外 操作 动作 。   IP 模块 会在 数据 块 加上 IP 控制 头和 MAC 控制 头 。 IP 控制 头 目标 网卡   4   IP 地址 信息 ， MAC 控制 头 有要 传输 下 一个 目的地 网卡 MAC 唯一 标识 信息 。 表述 ， IP 控制 头 IP 地址 是你 传输   最终 目的地 服务器 IP 地址   ， MAC 控制 头 MAC 地址 传输 过程 中 传输   下 一个 MAC 目的地   。 下 一个 MAC 目的地 会被 路由器 修改 。 MAC 地址 ARP 地址 解析 协议 。   ARP 地址 解析 协议   ： 以太网 子网 内 ， ARP 地址 解析 协议 会 广播 询问 IP 地址 是谁 ， MAC 地址 ， 目标 机器 IP 会 响应 询问 。   讨论 ， 传输 一个 信息 包 ， 路由 表 接下来 传输 给下 一个 路由器 IP 地址 ， ARP 路由器 MAC 地址 ， MAC 地址 填 入 MAC 控制 头 ， 至此 IP 模块 传输 信息 包的 封装 工作 。   网络 访问 层   网卡 驱动程序 接收 讨论 IP 模块 IP 信息 包 ， 还 IP 包 加上 报 头和 起始 帧 分界 符 ， 加上 FCS 检测 错误 帧 校验 序列 ， 目标 IP 包 封装 用于 以太网 传输 以太 信息 包 。   网卡 驱动程序 做的 第二个 工作 目标 以太 包转 成 光或 电信号 以太网 。   网卡 驱动程序 接收 光或 电信号 ， 还 做 额外 工作 ， 解读 出 IP 信息 包 ， 很多 细节 都 略过 讨论 。   互联网 架构   程序 体系结构   网络 世界 里 两种 程序 体系结构 ： 一种 client / server 体系结构 ； 一种 peer     peer ， P2P 体系结构 。   选择 客户机 / 服务器 体系结构 ， 程序 会有 两个 命令 两种 工作 模式 ， 一个 启动 本地 客户机 进程 ， 一个 启动 服务器 进程 ， 很多 程序 都是 。 P2P BitTorrent 下载 软件 熟知 。   物理 设备   网线 双绞线 设计   网线 双绞线 设计 抑制 电磁波 噪音 干扰 。   路由器   路由器 网络 互联 层已 讨论 ， 看做 是对 IP 协议 中 IP 地址 寻址 互联网 建设 最 核心 物理 设备 。   中继 器   一种 物理层 链接 设备 ， 用于 延长 网络 距离 ， 信号 放大 功能 。   集 线器   中继 器的 一种 ， 一个 端口 信号 会被 放大 广播 端口 ， 用于 物理 组网 星 型或 树型 网络结构 。   交换机   交换机 信息 包的 传递 基于 MAC 地址 转发 ， 说法 交换机 本质 说 。 交换机 本质 看做 更 智能 集 线器 ， 本质 物理 组网 层 ， 互联网 建设 层 。 集线器是 全 端口 广播 ， 有太 信息 冗余 ， 只 用于 小型 组网 。 交换 器的 智能 在于 学习 MAC 地址 ， 修改 ， 观察 学习 。 交换机 学习 MAC 地址 端口 2 行的 通 ， 下次 传输 MAC 地址 不 广播 ， 送给 端口 2 ， 高效 。 说 交换机 基于 MAC 地址 转发 。     防火墙   防火墙 包 过滤 规则 接收 方 IP 地址 发送 方 IP 地址 端口号 信息 判断 信息 包 。   负载 均衡 器   负载 均衡 器会将 请求 分配 多台 web 服务器 ， 实践 中 会有 很多 判断 。   分析 web 服务器 负载 情况   判断 操作 跨 页面 ， 跨 页面 则将 请求 都 发送 台 web 服务器 。   缓存 服务器   缓存 服务器 工作 过程 :   用户 浏览器 缓存 服务器 器 建立 TCP 连接 ， 发送 一个 HTTP 请求 。   缓存 服务器 会 检查 本地 缓存 目标 对象 备份 ， ， web 缓存 器用 HTTP 响应 回应 用户 浏览器 。   缓存 服务器 目标 对象 缓存 ， 则其 会向 初始 服务器 打开 一个 TCP 连接 ， 发送 一个 HTTP 请求 ， 目标 对象 ， 并将 对象 缓存 本地 ， 用户 浏览器 回应 一个 HTTP 响应 好把 新 对象 发给 用户 浏览器 。   缓存 服务器 本地 目标 对象 缓存 ， 缓存 过于 陈旧 。 缓存 服务器 证实 本地 缓存 内容 最新 ， 利用 HTTP 协议   If - modified -   一行 。 缓存 服务器 发送 一个 短小 HTTP 请求 ， 包含 一行 :   日期 缓存 服务器 存储 上 缓存 对象 HTTP 响应 头上   Last - Modified   一行 。   缓存 服务器 会 回应 一个 很 短小 HTTP 响应 ， 最 简短 HTTP 状态 码和 几个 信息 ， 304 , Not   Modified 。   内容 分发 服务 （ CDN ）   多个 web 服务器 提供 缓存 服务 。   脚注   网络 连接   [ 日 ]   户根 勤著   ↩   参考   网页   ↩   参考   网页   ↩   IP 地址 分配 网卡 ， 一台 计算机 多个 网卡 会有 多个 IP 地址 ， 更 准确 描述 术语 网卡 。   ↩",
            "tags":"programming",
            "url":"articles/how-networks-work-reading-notes.html"
        },
        {
            "title":"中共运占",
            "text":"是日 ， 多年 心中 翻来覆去 东西 ， 何不 向上 天 发问 以得 中共 一世 运占 。     复卦变 爻 23   。   复卦曰   \" 七日 来复 \"   ， 计时 必 七为 乘数 。 发现 4 * 7 = 28 年之 数与 爻辞 描述 颇为 吻合 ， ：   1921 - 1949   复 卦 第一 爻   中共 改过 颇 速 ， 是以 元吉 。   1949 - 1977   爻 一个 变 爻 ， 事情 变数 ， 变数 是从 中共 一世 整体 来看 ， 已 处于 2020 年 ， 看起来 很多 东西 固定 。 爻辞 是说 休复 ， 谈之 仁也 。 初 爻 大概 指 中共 基层 ， 休民 生息 之意 。   1977 - 2005   爻 一个 变 爻 ， 频复 ， 指 中共 时期 频繁 犯错 ， 改 ， 改了 犯错 。 孔子 曰 理当 无可 怪罪 ， 此劝 人 改过 良苦用心 是也 。   2005 - 2033   爻 变 爻 ， 三 爻 都 变 爻 ， 盖 中共 命运 已 定 。 中共 想要 初九 ， 中 间隔 着二 爻 三 爻 ， 二 爻 三 爻 妒之 拦之 ， 中共 状态 中行 独复 ， 独自 复于 初 爻 正道 ， 高 岛断 易也 指出 来了 ， 是所 复 甚微 ， 不 谈 吉祥 。   2033 - 2061   爻 变 爻 ， 中共 改过 ， 褒奖 曰 敦厚 。 盖有 坤德 ， 居中 自查 ， 故只 曰 无悔 ， 复 卦的 初 爻 免于 悔是 很大 区别 。   2061 - 2089   爻 变 爻 ， 中共 执迷 不知 改过 ， 凶 ， 外有 灾内 招 难 。 中共 行兵 打仗 ， 大败 。 中共 道义 ， 败 很多年 都 振兴 。 中共 气运 完 。",
            "tags":"divine",
            "url":"articles/zhong-gong-yun-zhan.html"
        },
        {
            "title":"docker学习笔记",
            "text":"前言   docker 请 参看   网页   ， 说 docker 改变 软件 生态 确实 不为过 。 老实 说在 接触 docker 感觉 学到 很多 东西 ， linux 系统 相关 ， ansible 部署 工具 相关 ， virtualbox   vagrant 相关 ， 都在 慢慢 过时 淘汰 。 工具 很 有用 ， 说 淘汰 过了 ， 更 确切 来说 ， 玩家 来说 ， 节省 更 多的 精力 时间 ， 而不 折腾 工具 配置 学习 折腾 个老 半天 。   That ‘ s       love   docker .   实际上 docker 带来 变化 远远 不止 一个 节省 开发者 做 事情 时间 一个 不错 工具 简单 ， 伴随 SPPS ， 软件 服务 ， 更 确切 来说 互联网 大 背景 下 ， 应运而生 。 与之 ， 开发者 顺应 时代 ， 编码 ， 软件 很多 ， 都 做出 改变 。 请 读者 进一步 阅读   https : / / 12factor . net / zh _ cn /   讨论 。   实际上 折腾 vagrant ， 就很 认同 理念 ：   开发 ， 测试 ， 生产 环境 ， 解决 ， 运行 ， 不行 了的 。 vagrant 控制 virtualbox 创建 虚拟 机的 方式 ， 显得 略微 笨拙 点 ， 配置 繁琐 ， 很 好地 解决 ； docker 很 好地 解决 之外 ， 虚拟化 方案 更 轻量级 ， 更 接近 原生 。   docker 包括 三个 核心 概念 ：   镜像 image ， 容器 container ， 仓库   image   镜像   用来 创建 docker 容器 模板   container   容器 ， 看做 镜像 生成 一个 实例   docker 仓库 用来 保存 镜像 ，   docker   hub   提供 很多 docker 仓库 。   安装   内容   过时   ， 请 参考 官方 文档 安装 。   windows 下的 安装   windows 下 安装 操作系统 专业 版 企业 版 ， 只能   docker   tool   box   安装 。 记得   window10   开发者 模式 打开 。   windows10 企业 版 专业 版 ， 没 试过 ， 想 官网 ， 安装 成功 。   kitematic   docker   镜像 管理 工具 ， 推荐 ， 很 。   centos 下 安装   更 详细 内容 见   官方 文档   。   ubuntu 下 安装   更 详细 内容 见   官方 文档   。   linux 系统 下 安装   linux 系统 下 安装 docker 运行 ：   ， 运行 ：   不 ， 登录 用户 docker 群组 中 去 ：   【 NOTCIE   命令 生效 退出 登录 下 】   第一个 项目   内容 参考 视频 ：   项目 新建 一个 docker   镜像 或者说 image 。   新建 一个 文件夹 ， 编写 Dockerfile   FROM     镜像 基于 镜像 ， 镜像 名字 php ， 一个 官方 镜像 ， 分支 名字   7.0 - apache   。   执行 COPY 动作 ， 文件夹 src 文件夹 内容 ， 复制 容器 【 镜像 生成 容器 ， 源 镜像 基于 linux 系统 】   / var / www / html   文件夹 下 。   暴露 80 端口   src 下 一个 简单 php 文件 ， 讨论 重点 。   生成 镜像   列出 本地 镜像   网下 下载 镜像   删除 镜像   制作 镜像 运行 命令 ，   a358003542   是我 docker   hub   注册 用户名 ， 采用 写法 ：   启动 镜像   docker   run   命令 自动 试着 docker   hub 下载 镜像 功能 ， 命令 run 单词 含义 是在 一个 容器 内 执行 命令 ， 其也 会 自动 一个 镜像 创建 一个 容器 。   端口 转发 ， docker 容器 内是 80 ， 容器 对外 发布 8080 端口 。 命令 查看 下 创建 容器 ：   项目 提交 docker   hub   docker   push   名字 格式   docker   hub 上的 用户名 / 仓库 名字   。   删除 虚悬 镜像   docker   build   docker   pull   同名 镜像 ， 旧 镜像 仓库 名和 tag 会 ， 类 镜像 虚悬 镜像 。 可用 命令 删除 组合 虚悬 镜像 ：   . dockerignore   . dockerignore   类似   . gitignore   文件 ， 用于 docker   build 镜像 忽略 掉 不 文件 文件夹 ， docker build 镜像 过程 时 ， 会 自动 指定 上下文 目录 打包 传递 docker 引擎 。   Dockerfile   FROM   指定 基础 镜像   COPY   文件 文件夹 复制 容器 位置 ， COPY 本地 内容 路径 路径 。   ADD   ADD COPY 功能 ， ADD 还 增加 额外 功能 ， 面向 网络 下载 。   RUN   相当于 容器 内 执行 shell 命令 ， RUN 之间 环境 是不 共用 ， 一个 RUN 命令 容器 一层 ， 推荐 RUN 命令 都 合并 。   CMD   CMD 提供 运行 容器 默认 ，   ubuntu   镜像   CMD     / bin / bash   ， 输入 ：   就会 bash 。   Dockerfile 定义 ENV 环境 变量 会先 CMD shell 层的 。   ENV   设置 环境 变量   Dockerfile ，   引用 设置 环境 变量 ：   $ APP _ PATH   VOLUME   定义 匿名 卷   ：   定义 容器 数据 存储 匿名 卷 ， Dockerfile 会 申明 匿名 卷 ， 就算 容器 运行 时 用户 忘记 指定 存储 卷了 ， 容器 运行 时也 容器 存储 卷 写入 数据 。   - v   mydata : / home / data   制定 存储 卷 ， 会 覆盖 Dockerfile 声明 默认 配置 。   EXPOSE   声明 容器 提供 服务 端口 ，   - p   9001 : 9001   映射 端口 。   WORKDIR   指定 docker 环境 下的 工作 目录 （ 运行 docker   run 是在 docker 环境 下 ）   保存 镜像 文件   启动 容器   启动 容器 bash 与之 交互   容器 后台 运行 ， 希望 登 入该 容器 ， 推荐   exec   ：   exec 登入 容器 ， 输入   exit   导致 容器 停止 。   容器 运行 时 设定 重启 策略   restart =   默认   容器 退出 不 做   restart = - failure   容器 非 0 状态 退出   docker 会 尝试 启动 容器   restart =   用于 docker 服务 重启 自动 启动 容器   查看 容器 输出 日志   台的 形式 启动 容器 ， 查看 容器 日志 ：   tail   列出 条 日志 。   docker   compose   安装   更 详情 参考   官方 文档   ， 列出 linux 简单 下载 安装 。   docker - compose 说是 docker 容器 编排 工具 ， 实际上 单个 容器 启动 配置 定制 是很 。   一个 简单 例子 所示 ：   选项 很多   docker   run   命令 时的 选 参数 ， 功能 大体 都 类似 。   运行 docker - compose   启动 容器 组 ， 重启 查看 日志 。   阶段 构建   阶段 构建 最 常用 模式 是将 容器 dev 环境 runtime 环境 分开 ， 实施 阶段 构建 ， 深刻 理解 项目 包是 运行 时 环境 ， 包是 编译 环境 。   新开 一个 编译 环境 容器 ， 装好 编译 项目 代码 依赖 ， 项目 代码 编译 好 。   新建 一个 运行 时 环境 容器 ， 最 核心 代码 ：   builder 容器 编译 build 内容 复制 运行 时 容器   做 两个 好处 ：   编译 依赖 很多 ， 运行 时 容器 镜像 很 小巧   编译 容器 发生 变动 情况 下 ， build 镜像 ， 编译 时 容器 会 利用 cache ， 再 费时 编译 工作   Dokcerfile 最佳 实践     . dockerignore   命令 尽量 合并 ， dockerfile 一个 命令 新建 一个 docker 层 。 docker 早期 很 关键 ， docker 重点 关注 三个 命令 ， 尽量 合并 ：   RUN   COPY   ADD   阶段 构建 ， 大大降低 镜像 大小 ， 不用 再 苦苦 挣扎 着去 想 减少 中间层 文件 。   安装 不 软件   apt 安装 软件 先 update 尽量 合并 一句 话 ， 一个 最佳 实践 ， 还 apt 安装 过程 缓存 删掉 。   docker 权限 控制 最佳 实践   docker 项目 下 默认 root 会更 ， docker 容器 就算 root ， 安装 性 容器 外 root 区别 ， 说是 。 情况 一般来说 ， 推荐 非 root 账号 ， 实践 容器 外 运行 用户 容器 内 运行 用户 。 容器 会 ， 更 容器 运行 程序 输出 文件 ， 容器 外 用户 访问 ， 容器 外该 用户 文件夹 ， 挂载 容器 时 ， 容器 内的 用户 运行 程序 访问 文件 ， 权限 。   这方面 docker 版本 【 18.06 】 还 支持 ， 只能 DIY 定制 方式 ， 好在 特别 麻烦 。 docker Dockerfile 运行 容器 ， 加上 ：   运行 容器 用户 。   docker - compose 启动 容器 ， docker - compose . yml 上 配置 ：   配置 环境 变量 ， 再 运行   docker - compose   ， 写 一个 bash 脚本 ：   运行 ：   传递 环境 参数 启动 docker - compose   命令 效果 。   还 容器 配置 ：   新 建立 容器 root 用户 ， 新建 一个 容器 外 用户 用户 和群 组 。 容器 默认 登录 用户 配置 好了 。   挂载 VOLUMN 上的 配置 ：   目标 文件夹 容器 外 所有者 容器 运行 ， 容器 内的 程序 都是 访问 。   小节 参考   网页     网页   。   docker 镜像 存储 配置   小节 参考   网页   ， 值得一提的是 方法 服务器 重启 配置 ， 好处 配置 很 简单   ：   docker 对系统 hosts 配置   不 手工 修改   / / hosts   文件 ， docker 支持 写法 【 参考   网页   】 ：   设置 时 区   docker 备份 还原   docker save load 备份 还原 操作 。   NOTICE :   save 操作 说是 image ， 实际上 容器 备份 ， export import 只能 容器 操作 ， export 保存 历史数据 。   参考 资料   http : / / www . ruanyifeng . / blog / 2018 / 02 / docker - tutorial . html   https : / / docker _ practice . gitee . io   https : / / docs . docker . /",
            "tags":"software",
            "url":"articles/docker-learning-notes.html"
        },
        {
            "title":"国内源",
            "text":"前言   GFW ， 下载 资源 速度 会很 慢 ， 这时候 配置 国内 源来 下载 ， 本文 罗列 相关 信息 。   pypi 下载 国内 源   豆瓣 pypi 源   https : / / pypi . douban . / simple     清华 pypi 源   https : / / pypi . tuna . tsinghua . . cn / simple   都 。   临时   - i     index   选项 ：   永久 更改 本地 配置 ：   js   国内 cdn 源   推荐   网站   。   docker 国内 加速 镜像   推荐 类似 命令 ：   镜像 文件 下载 。   npm 国内 源   android   studio   sdk 更新 太慢   请 参考   https : / / github . / inferjay / AndroidDevTools   。 网站 很多 android 开发 相关 资料 。",
            "tags":"others",
            "url":"articles/guo-nei-yuan.html"
        },
        {
            "title":"pytest模块",
            "text":"unittest 模块   编写 python 测试 代码 ， 学习 pytest 模块 ， 先 学习 python 官方 模块   unitest   。 上 例子 ：   unittest 模块 main 函数 执行 测试 单元 类 ， 测试 单元 类 继承 unittest TestCase 类 。 继承 TestCase 类中 ，   setUp   函数   tearDown   函数 用途 ， 见 代码 。 定义 函数 test 字符串 开头 都 测试 单元 ， 其将 逐个 执行 。   TestCase 很多 方法 ，   assertTrue   ，   assertFalse   用于 断言 bool 值是 真或 假 ，   assertEqual   用来 断言 两个 值是 ( = = ) ， 类似   assertNotEqual   用来 断言 两个 值不 。 值得一提   assertAlmostEqual   方法 用来 断言 两个 float 值在 小 数位 上是 大致 ， 例子 ，   \\ ( \\ pi \\ )   值 小数点 4 位是 3.1416 。 方法 还 额外 接受 一个 提示 字符串 参数 （ Msg 参数 ） ， 用来 断言 成功 时的 补充 信息 。   assertRaises   方法 用来 断言 函数 接受 参数 返回 异常 。 方法 第一个 参数 期望 捕捉 到的 异常 ， 第二个 参数 调用 函数 ， 参数 送给 函数 ， 谈及 Msg 参数 。   更 信息 请 参看 模块   官方 文档   ， 大概 简单 下 unittest 模块 即可 ， 实践 中 推荐 pytest 模块 。   pytest 模块   pytest 模块 是站在 unittest 基础 上的 ，   unittest   写的 测试 案例 ， 都 不用 更改 照样 有用 ， 接下来 要写 一个 新的 测试 ， 不 再 新建 一个   unittest . TestCase   类了 （ 希望 多个 测试 一个 类 ， 新建 一个 类 即可 ， 类不 继承 类了 。 ） 。   简单 写 测试 函数 即可 ， 不 类似 unittest 那种 很多 assert 方法 ， 最 简单   assert   确认 返回   True   即可 。   确实 简单 不少 。 讨论 编写 单元 测试 代码 中的 知识 。   确认 抛 出 异常   官方 例子 copy ， 看 懂 。   确认 两个 数字 近似   默认 采用 rel 偏差 小于   \\ ( 1e &# 94 ; { - 6 } \\ )   。 abs 偏差 。   fixture   pytest 提出 一个 fixture 概念 ， fixture 有用 。 最 简单 一个 所示 ：   测试 函数 带上 fixture 装饰 函数 名字 ， 一个 参数 ， 参数 值 fixture 装饰 函数 返回 值 ， 参数 测试 函数 。   上将 fixture 测试 函数 写在 ， 推荐 做法 ：   tests   文件夹 新建 一个   conftest . py   文件 ， 定义 pytest fixture 全局 共用 。   setup teardown   fixture 一种 全局 setup 配置 teardown 配置 。 比如说 测试用例 生成 一个 临时 文件夹 ， 临时 文件夹 做 操作 ， 测试 完 希望 删除 临时 文件夹 。 编写 fixture ：   一个 核心 概念 fixture   yield   动作 都 teardown 动作 ， return 概念 。 测试 函数 调用 临时 测试 文件夹 参数   tempfolder   ， 一个 额外 动作 是将 文件 复制 临时 测试 文件夹 ， 临时 测试 文件夹 下做 动作 。 teardown 动作 删除 临时 文件夹 。   测试 下次 不 测试   希望 测试 函数 测试 ， 不用 测试 ， 就在 函数 加上 装饰 器 。   写的 python 模块 pytest 集成   推荐 安装 ：   pytest     pytest - runner   。 新建   setup . cfg   文件 ， 内容 ：   测试 输入 ：   做的 好处 ， 其是 利用 本地 修改 源码 ， 修改 源码 实时 测试 。   写 记得 要给 pytest 传递 参数 加上   addopts =   选项 ， 打印 更 多的 信息 ：   每次 写   addopts = \" - v \"   麻烦 ，   setup . cfg   上 加上 一句 ：   好了 ， ：   专心 测试 写 代码 。   自动 发现 测试 文件   pytest 支持 自动 发现 测试 文件 ，   test _ * . py     * _ test . py   文件 都被 测试 文件 。   还 更 新建 一个   pytest . ini   文件 ， 内容 ：   pytest 只 tests 文件夹 下的 测试 文件 。   doctest 集成   doctest python 源码 立刻 起到 大概 函数 在做 事情 ， 很 。 假设 读者 初步 doctest 用法 ， 请 参看 官方 文档 doctest 相关 ， 接下来 讨论 是在 基础 之上 ， 传统 写法 是不 做 改变 。   pytest 集成 doctest 好处 ， 一是 python 模块 文件 不 跟上 ：   二是 pytest 自动 搜索 目标 python 文件 批量 doctest ， pytest 原有 传统 unittest 过程 不 受 影响 。   自动 发现 测试 文件 配置 上 做 调整 ：   原 tests 文件夹 python 模块 文件夹 都 搜索 目录 。   还 加上 选项 ：     doctest - modules   开启 pytest doctest ，   doctest - continue - - failure   一个 选项 ， 推荐 加上 。   mock   写 单元 测试 时 ， 涉及 网络 ， 套 接字 编程 ， 需求 ， 希望 伪造 数据 ， 拦截 函数 类的 返回 值 ， 测试 大型 软件 框架 中抽 ， mock 模块 。 mock 模块 unittest 模块 子 模块 ， 上 pytest ， mock 子 模块 是很 有用 。   mock 模块 最 关键性 理解 mock 在做 。 mock 模块 最 核心 概念   Mock   类   ， 官方 文档 例子 ：   简单 来啊 伪造 一个 python 对象 ， 定制 特别 属性 方法 单元 测试 代码 中 想要 python 对象 。 实践 中 推荐   MagicMock   ， MagicMock 继承 Mock ， 很多 python 对象 magic   method 【 大堆   __ __   方法 】 。   patch   编码 中 需求 ， Mock 对象 很 ， 贴近 真实 对象 ， 做 修改 ， patch ：   理解 代码 ？ 段 测试 代码 运行 ， 变量 名字 空间 patch 污染 ，   users . views . WXAPPAPI . jscode2session   函数 ， 污染 一个   Mock   对象 ， Mock 对象 传递 给了 函数 第二个 参数 （ 额外 的的 参数 不用 写上 ）   mock _ jscode2session   。   代码 运行   jscode2session   总会 返回 给出 值 ， 不用 数据库 ， 网络 情况 。 小 技巧 django 框架 相关 ，   . client . ( reverse ( ' mini - login ' ) ,   data )   利用 django ， 请求 url 响应 ， django 相关 ， 不 多说 。",
            "tags":"python_companion",
            "url":"articles/pytest-module.html"
        },
        {
            "title":"ceph集群架构",
            "text":"WARNING   警告 ， 文档 归档 ， 年久失修 ， 内容 已 过于 陈旧 ， 放在 权做 读者 参考 。 【 2020 】   ceph 集群 架构   本文 基于 ceph14.2 . 9 版本 。   ceph 一种 分布式 存储 解决 方案 ， 融合 多台 计算机 存储 资源 一个 ceph 存储 集群 中 ， 提供 块 设备 存储 、 对象 存储 文件系统 服务 。 ceph 提供 优良 性能 ， 可靠性 可扩展性 。 可靠性 ceph 存储系统 会 尽可能 保证 数据 丢失 ， 可扩展性 包括 系统 规模 存储 容量 扩展 。 ceph 在运 维上 还 提供 自动化 运维 特性 ， 包括 数据 自动 replication ； 自动 - balancing ； 自动 failure   detection 自动 failure   recoery 。   ceph 最早 源于 Sage   Weil 加州 大学 攻读 博士 期间 一篇 论文 — — 《 Ceph :   A   Scalable   Object - Based   Storage   System 。 篇 论文 基本上 包含 ceph 早期 系统 知识 ， 其后 Sage   Weil 发表 三篇 论文 ， 进一步 ceph 三个 核心 关键点 。   RADOS :   A   scalable ,   reliable   storage   service     petabyte - scale   storage   clusters   CRUSH :   Controlled ,   Scalable ,   Decentralized   Placement     Replicated   Data   Ceph :   A   Scalable ,   High - Performance   Distributed   File   System .   RADOS 存储系统 看作 谈论 ceph 存储系统 最早 雏形 ， 最 mgr 进程 一个 选项 ， RADOS 存储系统 mon 进程 osd 进程 ， ceph 存储系统 功能 运行 依赖 mgr 进程 ， 谈及 ceph 存储系统 包含 mon 、 osd mgr 三个 进程 ， cephfs 文件系统 引入 完善 ， 引入 mds 进程 ， mds 进程 cephfs 文件系统 服务 时才 ， mds 进程 看作 ceph 存储系统 一个 选项 。   请 读者 看 张 图片 ：   往下 讲 ， 一个 主机 装 一个 mon ， mgr 不怎么 耗 资源 ， 装 mon 进程 主机 上也 安装 一个 mgr 进程 。 osd 进程 一个 主机 多个 。 再就是 说法 说 ceph 存储 集群 主机 扮演 角色 ， 主机 装 osd 进程 安装 mon 进程 ， 没 说法 ， 推荐 ceph 存储 集群 留 一台 机器 只 安装 mon 进程 等而 不 安装 osd 进程 ， 会让 ceph 存储 集群 下电 osd 主机 时 点 ， 推荐 。 条件 推荐 mds 进程 弄 一台 主机 mon 进程 mds 进程 都在 一台 主机 上 ， 一个 推荐 ， 服务器 资源 很 充裕 情况 下 做 。   ceph 存储 集群 更 详细 讨论 ：   mon 进程 配置 ceph 存储 集群 机器 ， 6 个要 4 台 主机 安装 ； 8 个要 5 台 主机 安装 。 小规模 集群 上每 台 主机 都配 mon 进程 不 大 ， 规模 较大 存储 集群 没 做 。   mds 进程 推荐 只 安装 一个 ， 增加 几个 额外 主机 mds standby 进程 。   osd 进程 主机 磁盘 情况 配置 ， 实践 经验 ， osd     BlueStore 存储 要比 FileStore 存储 ， 都 机械 硬盘 ， FileStore 日志 固态 硬盘 加速 情况 下 ， BlueStore 存储 要比 FileStore 存储 iops 快了 接近 两倍 ， 推荐 BlueStore ， 说 固态 硬盘 加速 ， BlueStore 日志 db 固态 硬盘 加速 。   RADOS 存储系统 软件 层面 librados 库 ， 基于 librados 存储 客户端 ， ceph 官方 提供 了的 存储 类型 ： 块 存储 、 面向对象 存储 cephfs 文件系统 存储 。 软件 层面 librbd ， librgw libcephfs   。   往下 说 ， 读者 图 ceph 集群 分成 两个 概念 ： ceph 存储 集群 ceph 客户端 集群 。 出于 几个 理由 ：   实践 层面 来说 ceph 存储 集群 推荐 配置 高速 网卡 路由 内网 cluster   network ， 处于 优化 ceph 集群 性能 。   部署 上 来说 配置 主机 来将 对外 业务 ceph 存储 集群 分开 。 块 存储 cephfs 文件 存储 客户端 集群 不 安装 额外 进程 ， 对象 存储 还 额外 客户端 启用 radosgw 进程 ， radosgw 进程 类似 网络 服务器 配置 多个 进程 多个 端口 。   软件 层面 来说 ， 提及 块 存储 ， 对象 存储 cephfs 文件系统 存储 ceph 存储 集群 来说 最终 使用者 都是 client 角色 类型 ， 说的 再 详细 一点 存储 类型 都是 调用 librados 库 ， 告诉 librados 要从 pool 【 ceph 里 数据 逻辑 分区 概念 】 取 ceph   object 。 ceph 存储 集群 ceph   object id 都是 唯一 ， 理论 上 ， 假设 一个 osd ， 告诉 osd 要取 某某 object   id ， osd 找到 数据 。 情况 很多 主机 osd 情况 会更 一点 ， 会谈 及的 。   往细 讲 mon 进程 干了 事 ， mon 进程 一个 mon 进程 群 维护 一个 cluster   map ， cluster   map 包含 ：   monitor   map     ceph   mon   dump   来看 信息   osd   map     ceph   osd   dump 来看 信息   pg   map     ceph   pg   dump   来看 信息   CRUSH   map   执行   ceph   osd   getcrushmap   - o   { filename }   命令 ；   crushtool   - d   { comp - crushmap - filename }   - o   { decomp - crushmap - filename }   反 编译 ；   cat   编辑器 查看 。   mds   map     ceph   fs   dump   来看 信息   试着 看 下 信息 ， ceph 集群 成员 动态 信息 ， ceph 集群 动态 ， 谈及 mon 进程 群 维护 一个 cluster   map ？ Paxos 算法 ， 其是 一种 基于 消息 传递 分布式 一致性 算法 ， 兴趣 研究 ， 略过 。 mons 利用 Paxos 算法 一个 全局 共享 cluster   map ceph 集群 信息 图 。   mon 进程 还 一个 事情 ， 用户 登录 认证 权限 管理 ， 一块 暂时 略过 。 假设 client 查询 pool 里的 object _ id ， 是向 mon 进程 登录 认证 动作 ， 回话 密钥 会想 mon 进程 请求 最新 cluster   map ， 利用 librados CRUSH 算法 算一 算就 object _ id osd 。 ceph 一个 核心 杀手锏 所在 ， 强大 可扩展性 基于 CRUSH 算法 算一 算 即可 ， 而不 查询 中央 数据库 进程 ， ceph 集群 极具 可扩展性 。   CRUSH 算法 计算 ？ 简单 来说 ：   接受 client 给定 pool 名字 object   id   object   id   hash   hash 值 针对 pool pg 数量 取模 【 pool pg 数量 推荐 2 指数 原因 ， 计算 会快 一点 】 pg id   pool 名字 查下 cluster   map pool     id   值 ：   < pool _ id > . < pg _ id >   读者 感兴趣 运行   ceph   pg   dump   来看 ， 会 类似   < pool _ id > . < pg _ id >   表达 ， pg 来说 ， 会 ACTING _ SET   UP _ SET 字段 ， pg 很 一个 概念 ， 引入 ceph 数据 可靠性 。   ceph 引入 pg 中间层 概念 ， 默认 副本 数是 2 ， ceph 集群 下 一个 pg 会 映射 2 osd ， 两个 osd 上 针对 目标 数据 读写 默认 是对 组的 第一个 osd 读写 ， 副本 osd 简称 副 osd 会 后台 自动 目标 数据 副本 。   提到 CRUSH 算法 最先 找到 目标 pg ， 再 pg 找到 主 osd ， 在主 osd 上找 目标 ceph   object 数据 。 找到 主 osd client 会和 osd 对话 ， ceph 高度 可扩展性 一个 ， 查询 读写 压力 分散 主机 上 ， 一个 优点 ， 我会 分析 ceph 局限性 。   pg ceph 系统 提出 一个 工程学 上的 中间层 ， 作用 不仅仅 局限 副本 上 ， pg 状态 进一步 理解 。   pg 状态   一个 pool 新建 ， 指定 pg _ num ， 其就 创建 pg ， pg 处于 creating 状态 。   ceph 一种 心跳 机制 ， ceph 高度 可扩展性 优化 ， osd mon 报告 之外 ， osd 之间 会向 osd ping - pong 检测 ， pg 下的 主 osd 检测 pg 下的 副 osd 状态 。 过程 peering 。 理论 上 pg   peering 都 active + clean 状态 。   假设 pg   peering 发现 pg 下的 组 健康 osd 数目 少于 ceph 集群 副本 数 ， pg 就会 degraded 状态 。   一种 情况 比如说 pg 主 osd 写了 一个 数据 ， pg 会 自动 degraded 状态 ， 副 osd 写 动作 才会 健康 状态 。   新 一个 osd osd   掉了 ， ceph 集群 会 调整 pg osd 映射 分配 ， 比如说 pg   A     [ osd.0   osd.1 ]   ， 分配 肯定 要先 osd 移除 ， 再 osd 进来 ， 新 osd 还 同步 组 数据 ， osd 新 osd 同步 数据 ， 新 osd 对外 服务 。 同步 过程 backfilling 。   提到 几个 过程 日常 运维 情况 下都 会 ， 状态 ， 不 陷入 状态 太 长时间 都不 大 。   pg 一个 数据 清洗 过程 ， 数据 清洗 会 发现 数据 不 情况 ， 其会 报告 pg   inconsistent   ，   是因为 ceph 集群 ntpd 时间 同步 服务 没 配置 好 ， 提到 Paxos 算法 高度 依赖 时间 戳来 判断 时间 新旧 ， 时间 戳不 同步 很 ceph 集群 数据 新旧 版本 判断 。   pg 一个 工程学 上的 层有 很多 状态 功能 ， 会 更 。   停 掉 一个 osd 进程 pg 状态 切换 ， 假设 要停 掉 osd 进程 短时间 再 重启 ， ceph 有个 配置 默认 60s ， 一般来说 osd   挂 掉 ceph 集群 会 马上 检测 pg 会切 成 degraded 状态 ， ceph 集群 还 立马 调整 ceph 集群 pg osd 映射 关系 数据 再 分配 ， 时间段 内你 启动 osd 进程 ， pg 切成 健康 状态 ， ceph 集群 好像 没 发生 事情 。 超过 时间 ， ceph 自动 osd 标记 状态 ， 一个 osd 标记 状态 ceph 内部 再 分配 工作 ， 不必要 折腾 ， 设置   ceph   osd   set   noout   ， 检修 工作 ， 再 启动 osd 进程 ， ceph 集群 会跟 事情 没 发生 。   数据 条带 化   还 漏掉 一个 细节 ， 比如说 一个 文件 ， client 送给 librados 一个 数据 条带 化的 过程 ， 数据 条带 化的 过程 受这 三个 配置 参数 影响 ：   设置 ceph   object   size ； 条带 宽度 ； 条带 记数 。 简略 作图 ：   如上 图 所示 ， 假设 一个 5m 文件 ， 条带 记数 4 ， 其会 分割 文件 数据 ， 肯定 # 1 # 2 会分 osd 。   参数 ceph 集群 还 数据 测试 配置 好 ， 不 调配 。   用户 管理 密钥   时间 我会 补上 细 讲之 ， 简略 讨论 下 cephx 一种 加密 手段 。 简单 来说 两个 主机 都 拥有 密钥 ， 请求 方用 密钥 发出 请求 ， monitor 密钥 解密 内容 ， 权限 认可 ， monitor 发放 回话 ticket ， client ticket 来和 目标 osd mds 回话 。   ceph 局限性   ceph 设计 ， 一个 局限性 ， osd 读写 速度 过慢 ， 慢的 osd ceph 集群 性能 短 桶 效应 所在 。 ceph 集群 ， 不可避免 总会 冒出 一两个 磁盘 工作 不 读写 过慢 。 将会 影响 ceph 集群 性能 。   提出 一个 优化 改进 建议 ， pg 上对 组的 osd 针对 读写 性能 提出 某种 打分 策略 ， 读写 性能 太 差的 低分 ， 时间 低分 主 osd 自动 下降 为副 osd ， 副 osd 性能 太差 自动 踢 出 组 ， 告警 。   术语 解释   rados   lspools   ：   列出 pool 情况   ceph   osd   tree   :   列出 osd 情况   ceph   metadata   server   ceph 文件系统 存储 元 数据 。 元 数据 服务器 POSIX 文件系统 用户 不 Ceph 集群 负担 前提 下 ， 执行 诸如 ls 、 find 命令 。   RBD   rados   block   device   ceph 对外 提供 块 设备 服务   MDS   ceph 文件系统 依赖 元 数据 服务   CRUSH   ceph 数据 分布 算法   唯一 标识符   Unique   identifier     fsid   集群 唯一 标识 ，   uuidgen   命令 生成 一个 fsid ， 写入 ceph 配置 文件 中 ， 默认   / / ceph / ceph . conf   。   集群 名字   Cluster   Name   ceph 集群 都有 名字 ， 默认   ceph   监视器 名字   Monitor   Name   集群 监视器   公 网和 集群 内网   ceph 默认 一个 网络 ， public   network ， 推荐 设置 是有 两个 网卡 （ 会 带来 性能 极大 提升 ） ， 一个 网卡 ：   public   network ，   一个 网卡 ：   cluster   network 。 cluster   network 外网 ， 会 点 。 cluster 网卡 速度 很快 ， osd 之间 通信 传输 数据 才会 高效 ， 10Gbps 推荐 。   cluster   network 是给 osds 通信 ， ceph 组件 都 依赖 public   network 。   cephx 认证 系统   ceph cephx 认证 系统 认证 用户 守护 进程 。   Cephx   共享 密钥 认证 ， 客户端 监视器 集群 都有 客户端 密钥 副本 。 认证 协议 使 参与 不用 展现 密钥 相互 认证 ， 集群 确信 用户 拥有 密钥 、 用户 集群 密钥 副本 。     cephx   ， 管理员 先 设置 好 用户 。 图解 里 ，   client . admin   用户 命令 行 调用 生成 一个 用户 密钥 ，   Ceph   认证 子系统 生成 用户名 密钥 、 副本 存到 监视器 用户 密钥 回 传给   client . admin   用户 ， 也就是说 客户端 监视器 共享 密钥 。   参考 资料   ceph     scratch   ceph 浅 析上   ceph 浅 析中   ceph 中文 文档",
            "tags":"software",
            "url":"articles/cephji-qun-jia-gou.html"
        },
        {
            "title":"皇极经世小程序",
            "text":"皇极 经世 小 程序   请 输入 想要 预测 年份 ：   year :   确认   信息   周易 相关 资料 整理 批判 思考 汇集 成一 本书 ， 查阅 参考 。   项目 Github     。",
            "tags":"tools",
            "url":"articles/huang-ji-jing-shi.html"
        },
        {
            "title":"克服低自尊阅读笔记",
            "text":"本文 阅读 【 英 】 梅勒 妮 · 芬 内尔 著的 《 克服 低 自尊 书的 阅读 笔记 。   低 自尊 整体 看法 ， 讨论 低 自尊 更 多的 来源于 事实 ， 一种 评价 偏 低的 信念 。   低 自尊 来源 ： 人都 人生 经历 ， 经历 正面 ， 自我 信念 正面 ； 经历 负面 ， 自我 信念 负面 。 负面 自我 信念 是低 自尊 本质 。   将低 自尊 抑郁症 区分 开来 ， 抑郁症 确证 ， 需求 更 专业 相关 指导 建议 ， 本书 帮 不 上 忙了 。   低 自尊 身高 ， 身高 客观 事实 ， 不容 辩驳 ， 自尊 看法 ， 后天 习得 观点 而非 事实 。   看法 是你 人生 经历 。 糟糕 人生 经历 带来 低 自尊 ， 而低 自尊 反馈 带来 糟糕 人生 经历 ； 低 自尊 者会 关注 感受 到低 自尊 现象 ， 预测 期待 现象 发生 ， 一种 恶性循环 。 打破 恶性循环 ， 克服 低 自尊 ， 第一步 到你 自我 看法 ， 负面 自我 信念 等都 改变 ， 事实 ， 最 多也 只能 算是 某种 过时 了的 旧 观念 。   基于 过往 糟糕 经历 ， 一种 焦虑 情绪 ， 焦虑 情绪 未来 人生 预测 中总 时不时 浮现 ， 去 做出 糟糕 可能性 预测 。 低 自尊 焦虑 情绪 ， 人脑 预测 活动 ， 更 预测 活动 低 自尊 表现 ：   倾向 于过 高地 估计 坏事 发生 概率   倾向 高估 坏事 糟糕 程度   倾向 于过 低地 估计 资源   倾向 低估 外部 资源   低 自尊 影响 生活 围绕 当下 未来 预测 影响 ， 预测 本是 不准 ， 加上 种种 大多 至少 理智 层面 都是 放下 ， 正 预测 不 准确性 ， 才给 低 自尊 看上去 不 谱的 信念 偏见 可乘之机 。 而要 克服 低 自尊 最 手段 更好 预测 替代 掉 头脑 中 伴随 焦虑 情绪 预测 。 带有 情绪 色彩 预测 大多 不靠 谱的 。   确切 事 自有 科学 方法 ， 格物致知 道就 不 赘述 。 生活 中 很多 不 确切 模棱两可 事 ， 事 ， 也许 不 去 预测 才是 更 明智 ， 仍 感受 到那 股 焦虑 情绪 ， 股 过往 种种 糟糕 经历 来的 焦虑 情绪 头脑 中 作祟 ， 不 未来 满怀 疑虑 ， 请先 冥想 静心 去掉 内心 股 情绪 再 预测 。   【 读者 推荐 天人感应 周易 预测 方法 ， 到人 认知 局限性 ， 谦卑 低下 头颅 ， 玄之 玄的 领域 预测 ， 只能 向上 天 请求 智慧 ， 内心 话语 声音 情绪 都是 不 ， 上天 才能 答案 ， 给出 预测 。 】",
            "tags":"notes",
            "url":"articles/ke-fu-di-zi-zun-yue-du-bi-ji.html"
        },
        {
            "title":"用nsis制作安装程序",
            "text":"简介   nsis 安装 程序 free ， 制作 一个 简单 安装 程序 稍微 熟悉 学习 够用 。   下载   nsis 程序 ， 推荐     下载   。   推荐 下载   HM   NIS   Edit   简单 程序 ， 程序 向导 式 生成 一个 nsi 脚本 文件 。 nsi 文件 编写 倒不 要在 编写 。   NOTICE   HM   NIS   Edit   软件 界面 不 推荐 选择 中文 ， 输出 文件 编码 会是 GBK ， 通用 UTF8 编码 很 不 兼容 。   利用 HM   NIS   Edit 填写 信息 ， 倒是 很 直观 ， 没什么 好说 。 生成 脚本 编辑器 上 还要 做 进一步 修改 。 脚本 刷 文件夹 文件 变动 很 。   信息   定义 软件 名 ， 软件 版本号 软件 出版 人 信息 。   界面 语言 选择   设置 可行 ：   繁体 中文   TradChinese   。   win10 系统 全局 设置 UTF8 编码 ， 安装 界面 成 乱码 。 nsis 中文 编码 默认 utf8 。 稳妥 见 选择 英语 ， 肯定 恼人 乱码 ：   快捷 方式 加 图标   提到 工具 自动 生成 nsi 脚本 ， 默认 快捷 方式 向导 加上 图标 ， 加上 图标 ：   第三个 参数 是可 选的 ， 命令 行 参数 ， 没 好填 。 一个 参数 设置 图标 ， 图标 要填 文件 复制 目的地 操作 ， 填写 值也 复制 目的地 。   PRODUCT _ DIR _ REGKEY   是向 windows 系统 注册 软件 安装 目录 ：   默认 输出 exe 会指 错 。   OutFile   OutFile 会 控制 输出 exe 名字 。   设置 安装 图标 删除 图标   安装 程序 删除 程序   uninst . exe   图标 ， 提到   CreateShortCut   快捷 方式 图标 ， 桌面 快捷 方式 。",
            "tags":"application_development",
            "url":"articles/nsis.html"
        },
        {
            "title":"pyinstaller",
            "text":"简介   exe 制作 写 python 程序 freeze ， 目标 机器 上 用户 安装 python 依赖 都能 运行 程序 。   推荐 pyinstaller 。   pyinstaller 官网     。 安装 pip 安装 即可 。   推荐 项目 根 目录 下 创建 一个 简单 启动 脚本 ， 平时 测试 ， pyinstaller 程序 入口 。   NOTICE :   脚本 名字 程序 模块 名字 ， 安装 后闪 退 脚本 名字 没 取好 。   很 简单 ：   脚本 文件 不 当前目录 下 ， 指定 目标 脚本 文件 ：   顺利 ，   dist   文件夹 下 运行 目标程序 exe 运行 ， 都 OK ， 恭喜 。 没 往下 看了 。 出 ， 请 钻研 官方 文档 ， 会 做出 补充 。   自动 生成   . spec   文件 ， 接下来 讨论 很多 定制 都是 基于   . spec   文件 修改 。 修改 好了 运行 pyinstaller 运行 ：   输出 单个 exe 文件   桌面 端 程序 较大型 项目 是不 推荐 输出 单个 exe 文件 ， 小型 项目 命令 行 工具 ， 输出 单个 exe 文件 是很 便捷 。 情况 下你 会 找 不到 python3 . * . dll 错误 ， 采用 输出 单个 exe 文件 方案 。   输出 单个 exe 文件 方案 spec 文件 ， 先 生成 最 spec 文件 ：   接下来 spec 文件 定制 工作 。   环境 配置 建议   python 项目 推荐 虚拟 环境 ， 只 安装 python 依赖 。 python 系统 安装 pyside2 模块 ， 免得 干扰 。 pyinstaller 安装 虚拟 环境 ， 命令 执行 虚拟 环境 。   既有 pyinstaller bug ， 会 减少 安装 包 大小 。   不 弹出 cmd 窗口     exe = EXE   修改   console   字 段为   False   ， 生成 exe 执行 时将 再 弹出 cmd 窗口 。   修改 输出 exe 名字     exe = EXE   修改     字 段来 修改 目标 输出 exe 名字 。   检查 python 包 依赖 情况   pyinstaller 输出 很多 出 python 包 依赖 正确 检测 ， 查看   build / { } / xref - { } . html   文件 确认 python 包 依赖 都 加载 进去 ， 修改   a   =   Analysis   下的   hiddenimports   字段 ， 缺失 模块 名 进去 。   添加 额外 文件   spec 文件 下 配置   datas   列表 值 ：   大概 是把 文件 copy 目标 dist 文件夹 。   python 包 数据 文件   推荐 都 规范   pkg _ resources   管理 ：   数据 文件 exe 程序 ， 做的 添加 额外 文件 ， 来把 文件 添加 进去 ， ：   是把 yaogua 模块 html _ resource 下的 文件 内容 都 复制 dist 文件夹 下的 软件 名的 yaogua html _ resource ，   resource _ filename   引用 路径 仍 可行 可用 。",
            "tags":"python",
            "url":"articles/pyinstaller.html"
        },
        {
            "title":"xeCJK宏包中的某些特殊字符显示",
            "text":"排版 pdf 希望 显示 周易 六十四 卦 ䷀ 字符 ， 大概 找了 好久 才 发现 DejaVu   Sans 字体 周易 六十四 卦的 字符 ， 本来 打算 常规 调 字体 方式 显示 字符 ， 却 发现 效果 ， 估计 区块 字符 划分 CJK 字符 ， xeCJK 宏包   xeCJK 提供   \\ CJKfontspec   命令 确实 起到 效果 ， 六十四 卦 六十四 字符 ， 单独 写 命令 newunicodechar 封装 等都 很 解决 方案 ， newunicodechar xeCJK 宏包 之间 协调 。   仔细 阅读 xeCJK 宏包 文档 确认 解决 方案 ：   xeCJK 宏包 提供   xeCJKDeclareSubCJKBlock   定义 一个 字符 区块 ：   设置 CJK 字体 单独 指定 一个 字符 区块 字符 字体 ：   tex 文档 复制 粘贴 ䷀ 字符 显示 。",
            "tags":"latex",
            "url":"articles/xecjkhong-bao-zhong-de-mou-xie-te-shu-zi-fu-xian-shi.html"
        },
        {
            "title":"游戏剧本怎样写阅读笔记",
            "text":"书籍 点评   本书 游戏 剧本 创作 入门 学习 第一 本书 ， 更 推荐 阅读 电影 话剧 相关 。 批判性 看吧 ， 地方 通用 剧本 写作 技巧 都有 价值 ， 地方 太 过于 死板 作者 经验 看了 图 一个 乐吧 ， 日本 游戏 行业 行有 行规 ， 去 模仿 太 蠢了 。 开发 游戏 思考 想的 参考 价值 。   游戏 剧本 小说 是吝 笔墨   小说 服务 对象 最终 用户 读者 ， 氛围 塑造 ， 背景 交代 都是 不吝 笔墨 ， 游戏 剧本 服务 对象 制作 游戏 程序员 、 游戏 角色 形象 艺术 设计师 ， 阅读 游戏 剧本 希望 更 快地 指导 工作 接下来 做 。   游戏 剧本 小说 零   小说 基本上 是从 零 ， 小说 作者 想 写就 写 ， 游戏 剧本 零 ， 最 游戏 开发 阶段 一个 游戏 策划 阶段 。 游戏 剧本 编写 是要 遵从 游戏 策划 书的 。   游戏 策划 书 ：   游戏 开发 基础 文档 信息 ， 包括 游戏 标题 主旨 ， 游戏 目标 操作系统 ， 游戏 目标 用户 游戏 画面 整体 感觉 内容 。   游戏 策划 书 原因 会将 角色 剧情 走向 大体 结局 都 。   游戏 剧本 写作 风格 更 接近 传统 剧本 写作   游戏 剧本 写作 风格 更 接近 传统 剧本 写作 ， 传统 剧本 写作 更 多的 剧本 演职 人员 指导 类似 小说 最终 阅读 体验 展示 。 游戏 剧本 写作 更 多的 后续 游戏 开发人员 工作 指导 。   作者 列出 一个 例子 ， 做 简化 ：   CG01   画面   鸿蒙 之初 ...   CG02   地点   画面 描述   对话 1   用户 按键   对话 2   用户 按键   BGM01   ...   作者 讨论 更 于多 人 游戏 团队 开发 游戏 情况 ， 独立 游戏 开发者 来说 写得 详细 一点 。   游戏 剧本 写作 大体 接近 传统 剧本 写作 ， 会更 多地 关注 游戏 中的 要素 ： 画面 ， 对话 ， 环境 渲染 风格 ， 音乐 。   游戏 剧本 创作 传统 文学 艺术 形式 创作 很多 相同点   游戏 说到底 一种 艺术 形式 ， 很多 ， 美学 追求 上到 故事 架构 技巧 上 ， 都是 相互 参考 借鉴 。   这块 行了 ， 千万 别用 条条框框 来框 住了 文学 创作 方法 ， 正 文无 成法 ， 文无 定形 ， 更 多的 要有 风格 想法 声音 。 打算 一套 公式 般的 东西 文学 创作 ， 读者 估计 看了 没 几分钟 厌倦 。   正 该书 作者 提到 脸谱 化的 观点 ， 观点 也许 日本 游戏 业界 惯例 常识 ， 女孩子 年龄 设定 14 岁 ， 都 略去   。 本书 提出 很多 游戏 剧本 创作 中 涉及 到的 ， 才是 本书 精华 所在 ， 接下来 讨论 我会 关注 作者 提了 做 思考 工作 ， 作者 给了 答案 ， 创作 是更 价值 启发性 。   游戏 剧本 创作 会 反复 主题 、 故事 、 角色 、 世界 四个 要素   游戏 策划 阶段 目标 游戏 主题 会 基本上 ， 故事 走向 会 ， 角色 设定 会 ， 世界 设定 会 。   主题 创作 故事   思考 主题 包含 游戏 目的 ： 作者 说 主题 失恋 ， 游戏 目的 寻找 地底下 宝藏 ， 主题 游戏 目的 说 ， 主人公 失恋 对象 主人公 找到 某某 宝藏 才能 同意 复合 。   思考 主题 足以 创作 故事 ： 游戏 主题 还 不足以 创作 故事 ， 扩充 主题 创作 故事 。   游戏 传统 文学 艺术 形式 相 来多了 一个 玩家 互动性 ， 游戏 中的 选项 游戏 故事 表达 主题 融合 ， 故事 用心 ， 玩家 感觉 游戏 设计 上的 美和 诚意 。   参考 借鉴 创作 故事   游戏 剧本 创作 创造 活动 ， 离不开 游戏 ， 图书 ， 电影 参考 借鉴 。   角色 创作 故事   倒 游戏 剧本 特色 ， 实际上 传统 文学 艺术 形式 ， 小说 电影 雕塑 都有 一个 角色 设定 。 很多 因素 会 影响 角色 设定 创造 ， 角色 设定 ， 故事 走向 角色 设定 个性 推动 。 很 ， 玩家 沉浸 式地 游玩 游戏 故事 ， 感情 代入 角色 中 ， 角色 不 符合 设定 ， 玩家 就会 出 戏的 感觉 ， 文学 世界 里 ， 故事 角色 设定 合理性   1   牛顿 万有引力 还要 。   角色 设定 讨论   作者 角色 设定 上的 讨论 略过 ， 实际上 游戏 说到底 是和 小说 传统 文学 艺术 形式 ， 文 无定 法 ， 更 多的 要有 创作者 风格 想法 声音 。 商业 上的 而将 角色 设定 准则 ， 实际上 是从 商业 上 出发 ， 玩家 读者 讨厌 新意 灵魂 角色 设定 创造 。   作者 这块 讨论 ， 角色 设定 因素 值得 创作 故事 角色 设定 思考 ：   名字   年龄   职业   相貌   头发   体格   服装   性格   特技   弱点   口吻   口头禅 习惯 说话 方式   角色 过往 经历 设定   角色 定位 讨论   这块 略过 ， 角色 定位 讨论 创作 故事 类似 分析 反思 ：   主人公   攻克 对象 难关 角色   系统 角色   游戏 功能性 传统 NPC 角色   敌对 角色   大反 派   竞争者 角色   情侣 角色   伙伴 角色   家人 角色   契机 角色   救星 角色   叛徒 角色   贤者 角色   推动 剧情 发展 ， 故事 发生变化 ， 跳 角色 。   世界 设定 讨论   时代 ？ 时代 特征 ？   故事 地点 ？ 国家 ？ 地区 ？ 地方 特征 ？   世界 和平 动荡 ？   世界 国家 概念 ？ 国家 ， 分为 几个 国家 ？   世界 宗教 概念 ？ 宗教 ， 总共 宗教 ？ 宗教 特征 ？ 影响力 ？   世界 分为 民族 种族 ？   世界 政治 体制 ？ 政治 形势 ？ 经济体制 ？ 特别 经济 状况 ？ 世界 货币 ？ 货币 几种 ， 单位 ？ 经济 下 生活 水平 ， 人是 富裕 贫穷 ， 过得 ， 吃的 ， 住的 。   世界 家族 制度 ？ 婚姻 制度 ？ 婚姻 制度 婚姻 制度 ？   世界 理想 男性 形象 女性 形象 ？ 人或 职业 是受 人 尊敬 地位 高的 。 社会存在 禁忌 忌讳 不 愿 谈及 。   世界 世界 相比 不同点 。   世界 语言 ， 有哪 几种 语言 ， 语言 发音 特征 。   交通 手段 ？ 交通 手段 。   通信 手段 ？ 通信 手段 。   特定 世界 设定 背景 下 ， 故事 大的 方向 创作 方向 了的 。   结构 讨论 很 值得 去 学习   结构 讨论 很 值得 去 学习 ， 提到 故事 角色 等四 要素 说的 不好 听点 不 抄的 ， 最 只能 借鉴 参考 ， 剧本 结构 知识 ， 真的 抄的 。   起承转合 结构   游戏 起承转合 结构 ， 会 发现 很多 游戏 都 采用 先抛 出 引子 事件 起因 ， 主角 追查 事件 线索 经历 事情 ， 线索 等都 汇合 到主 事件 一个 高潮 。 说 得再 俗套 一点 ， 游戏 得有 一个 boss 。 打破 结构 创新 剧作者 面临 失败 风险 ， 早 结构 当做 某种 约定俗成 东西 ， 好比 程序 GUI 界面 ， 都 习惯 ， 不 来了 ， 会 不 。 特别 理由 ， 挑战 起承转合 结构 规则 ， 不 信 去看 莎士比亚 剧本 创作 遵循 类似 起承转合 结构 。   起承转合 细分 ， 一个 大的 故事 分为 三个 结构 ， 事件 开启 ， 事件 发展 事件 结尾 。 起就 事件 开启 ， 合就 事件 结尾 。 承和 转 事件 发展 阶段 。 一个 大 故事 细分 几个 小 故事 ， 一个 游戏 分为 几个 章节 幕 ， 故事 序章和 故事 结尾 之外 ， 故事 几章 承转 ， 承 承接 上 一章 故事 发展 ， 放慢 叙事 节奏 ， 更 多的 展现 上 事件 带来 后果 ； 而转 推进 故事 ， 引入 事件 转折点 ， 加快 故事 发展 节奏 。   故事 开端   故事 开端 要有 三个 要素 ：   传达 游戏 目的   （ 是必 做 ， 生化 奇兵 主创 者就 说 ， 最 飞机 坠毁 那段 开场 CG ， 去 参加 游戏 演示 ， 是差 评 潮 ， 花了 几天 时间 开场 CG ， 接下来 交口称赞 。 一个 游戏 内容 质量 再 好 ， 故事 开端 游戏 目的 传达 不好 ， 都 极有 翻车 ， 游玩 动力 ， 内容 做的 再 好也 表现 不 。 ）   传达 游戏 玩法   （ 新手 教程 章 ）   传达 一个 游戏   （ 游戏 世界观 介绍 ）   故事 通向 高潮 过程   通向 高潮 过程 是讲 故事 重点 关键 所在 ， 要讲 好 这部分 ， 实际上 特定 结构 套路 。 讲 故事 特定 结构 套路 传统 平铺直叙 事件 还要 承担 听者 感情 上的 代入 感和 体验 。 讨论 说的 听者 ， 实际上 日常 讲 故事 小说 游戏 剧本 原理 都是 相通 。   着重 故事 目的 剧透 游戏 最终   2   ， 承担 激起 听者 故事 过程 兴趣 。   讲 故事 过程 听者 ， 故事 对话 形式 展开 ， 则是 作者 书面 陈述 ， 作者 书面 陈述 形势 时 加上 预期 希望 听者 感受 ， 听者 代入 进来 。 要将 讲 故事 过程 结构 清晰 划分 ， 结构 划分 标准 是从 听者 角度 出发 。 听者 会对 疑问 ， 听者 会对 兴趣 ， 听者 会对 角色 感情 代入 ， 听者 会对 感到 吃惊 ， 听者 会对 期待 。 简言之 ， 时时 听者 读者 听 故事 听到 看 小说 内心 想法 感受 ， 要和 听者 读者 内心 互动 。   故事 高潮   游戏 高潮 简单 达成 最终 目的 简单 ， 要将 游玩 者在 花费 时间 、 精力 感情 释放 ， 愉悦 感 。   故事 高潮 关键 不 高潮 本身 ， 通向 高潮 过程 中 。   游戏 特色 内容   分支 支线 故事   分支 支线 故事 好比 主菜 甜点 ， 游玩 者有 多样 不 枯燥 游玩 体验 ， 游玩 喜好 选择 分支 ， 更 能让 游戏 故事 叙事 节奏 贴近 游玩 者的 喜好 。   一般来说 分支 游戏 故事 背景 融为一体 ， 分支 质量上乘 ， 游玩 者对 游戏 世界 游戏 好感 度会 直线 。   游戏 失败 设定   游戏 失败 设定 会 赋予 一个 故事 上的 意义 。   游戏 结束 设定   游戏 结束 设定 ， 或者说 故事 结局 。   游戏 重 玩 机制   游戏 重 玩 机制 游戏 一大 特色 ， 游戏 故事 更好 融为一体 值得 游戏 设计者 探索 研究 课题 。   游戏 选项   游戏 选项 游戏 结局 ， 故事 主题 深化 才 引入 进来 。 游戏 结局 而多 结局 愚蠢 。   极端 寻求 开放 世界 极端 寻求 结局 选项 游戏 都是 持 保留 意见 ， 极端 过了 头就 会 极大 损伤 游戏 故事性 。 游戏 游戏 性 很大 一部分 建立 游戏 选项 上 ， 类型 游戏 游戏 选项 设计 实际上 很 技巧 ， 很多 都 是和 故事 主题 相关 要素 扩展 要素 相关 。 少量 调剂 用和 主题 无关 选项 ， 句 话 ， 游戏 选项 游戏 游戏 性的 一个 开发 点 ， 弄 出太 杂七杂八 无关紧要 选项 只 会让 游玩 感到 厌倦 。   极端 开放 世界 极端 选项 游戏 一件 风险 事情 ， 两个 风格 游戏 都 跳出 传统 意义 上的 故事 游戏 范畴 ， 其也 不 本文 讨论 之内 。 正 跳出 传统 故事 范畴 ， 玩家 极大 风险 感受 到的 自由 开放 空洞 无所适从 ； 极端 选项 游戏 本来 设计 初衷 弱化 角色 扮演 增强 玩家 互动 代入 感 ， 选项 这块 设计 不好 ， 也许 照顾 玩家 个性 喜好 ， 游戏 角色 代入 感 代入 感都 。   脚注   角色 设定 合理性 恒定 性 ， 角色 个性 展现 出 复杂性 变动 性 。   ↩   情况 下 会 讲 故事 人会 预先 剧透 故事 结局 ， 会让 听者 走向 结局 过程 好奇心 ， 讨论 讲 好 故事 目的 所求 听者 故事 过程 好奇心 。   ↩",
            "tags":"notes",
            "url":"articles/you-xi-ju-ben-zen-yang-xie-yue-du-bi-ji.html"
        },
        {
            "title":"周易预测学相关应该如何处理闰月",
            "text":"是皇 极 经世 紫微 斗数 ， 周易 预测 相关 ， 月份 划分 都是 规则 ：   一年 定义 农历 立春 到下 立春   一年 分为 十二个 月 ， 计算 只能 说 大部分 情况 下和 农历 重合 ， 近似 看 农历 ， 意义 来说 ， 一年 分为 十二个 月的 划分 。   也就是说 紫微 斗数 农历 一种 近似 表达 ， 盲信 农历 月份 会对 闰月 手足无措 ， 具体来说 闰月 年份 ， 讲 农历 立春 立春 天数 除以 十二 ， 再 十二个 月的 划分 刻度 。   举个 例子 2020 年 2 月 4 日是 立春 ， 春节 1 月 25 日 ， 春节 不相干 。 2021 年 2 月 3 日是 下 立春 。 距离 365 天 ， 一月 三十 十二分 五天 。",
            "tags":"thought",
            "url":"articles/zhou-yi-yu-ce-xue-xiang-guan-ying-gai-ru-he-chu-li-run-yue.html"
        },
        {
            "title":"cython模块",
            "text":"找到 性能 瓶颈 所在   确认 脚本 函数 到底 性能 瓶颈 ：   jupyter   notebook   timeit   功能 ， 写   time 计时 。   循环 结构 提速 很 ， 指定 静态 类型 会 提速 。   python 代码 cython 都是 支持 ， 重点 去 开发 限速 目标 函数 ， 到处 优化 。   参考 资料 1 例子 ， 加速 ， N 设置 3000 ， 用时   53.301 s ， 加速 ， 用时 4.186 s 。 加速 exp 运算 很多很多 次 ， 大概 花了 两秒 样子 ， 原始 python 代码 循环 操作 上 开销 很大 。 关键 计算 循环 次数 太多 ， 就要 上 c 扩展 优化 。   在做 性能 测试 一类 耗时 较多的 操作 不用 c 代码 优化 ， 类 耗时 多的 操作 IO 等待 型 操作 ， 有的是 等待 数据库 IO 操作 ， 有的是 等待 文件 读写 IO 操作 ， 有的是 等待 网络 IO 请求 。 请求 很多 都和 socket 套 接字 请求 相关 。   pyx 文件   pyx 文件 更 请 查看 cython 官方 手册 。   重点 讲   python 模块 包的 管理 方案 ， 推荐 利用   setuptools   ，   Extension 类 ：   第一个 参数 想让 目标 加速 模块 （ python 文件 模块 ， 多个 带 __ init __. py 包 ） 在总 模块 中叫 名字 ， 支持 点 标记 。   第二个 参数   sources ， 一个 列表 ， 文件 路径 写上 。   集成 原始 c 代码   会写 原始 c 代码 ， 利用 cython 集成 进来 。   setup . py   核心 代码 如上 示 ， 几个 文件 :   cgfun . c   cgfun . h   wrapped . pyx   内容 所示 ， 引用   clib   __ init __. py   写上 ：   ：   cgfun . c   内容 ：   cgfun . h   内容 ：   wrapped . pyx 内容 ：   更 高级 集成 numpy ， 查看 cython 官方 文档 。   参考 资料   Cython   入门 教程   github 上 一个 简单 cython 样例   python3   cookbook 相关 讨论",
            "tags":"python_companion",
            "url":"articles/cython-module.html"
        },
        {
            "title":"selenium模块",
            "text":"简介   selenium 很多 用途 ， 用于 针对 浏览器 端 页面 自动化 测试 ， 用于 网络 爬虫 。 网络 爬虫 越来越 青睐 ， 传统 网络 爬虫 笨重 粗暴 ， 服务器 不少 压力 ， 爬虫 封 停止 工作 ， 信息 爆炸 互联网 时代 ， 目的 尽可能 多地 获取 信息 ， 没 价值 ， 更 智能 定向 获取 目标 价值 信息 。 selenium 模拟 浏览器 动作 风格 ， 编写 脚本 再 稍微 下 速度 ， 基本上 脚本 外面 服务器 来说 人 浏览 页面 区别 ， 封的 可能性 大大降低 ， 只 情况 是人 打开 网页 会 弹出 验证 码等 页面 ， 服务器 尽量避免 打开 网页 情况 ， 用户 体验 很 不好 。 selenium 模拟 浏览器 ， 提供 更 多的 智能化 爬虫 潜在 可能性 ， 加上 编程 最终 智能 目的 要将 人的 智能 转移 机器 上的 智能 ， 意义 来上 说 ， selenium 模拟 网络 爬虫 编写 更 深层次 含义 乐趣 。   安装   chrome 例 ， 看下 安装 chrome 浏览器 版本号 ， 下载 chromedriver . exe ， 不用 设置 系统 变量 PATH ， 只 设置   executable _ path   参数 指向 目标 exe 文件 即可 ：   如上 示 ， 配置 浏览器 参数 定制 浏览器 ， 更 多的 参数 参见 chrome   driver   官方 文档   。   浏览器 参数 配置   配置 useragent   执行 代码 查看 下 useragent ：   浏览器 窗口 最大化   开启 端 模拟   配置 缓存 路径   配置 缓存 大小   单位 字节 ， 数值 int 型 ， 最 只能 2G 。   开启 无头 浏览器   不 显示 浏览器 ， 会在 后台 运行 。   获取 网页 源码   定位 目标 元素   一块 官方 文档 说的 很 详细 。 xpath 读者 去 。   执行 js 代码   执行 js 代码 selenium 很 核心 一个 功能 ， 很多 编码 目的 都 执行 js 代码 。   scroll 显示 目标 元素   点击 目标 元素   wait   官方 文档 这块 说的 详细 ， 暗含 等待 说要 浏览器 要等 久 ， 说 要等 久到 页面 元素 基本上 加载 完 ， 加载 完 等了 。",
            "tags":"python_companion",
            "url":"articles/selenium-module.html"
        },
        {
            "title":"lxml模块",
            "text":"前言   本来 是将 lxml 模块 归于 爬虫 块的 ， 算作 python 第三方 好 伙伴 ， 一个 通用 模块 。 lxml 模块 领域 爬虫 块 ， 功能 类似 beautifulsoup 专注 xml html 结构 文档 分析 工作 。 讨论 ， lxml 模块 通用 可能性 。   会 发现 xpath 语句 才是 正确 xml html 中 抽取 信息 标准 流程 化 语言 ， 功能 还 算 强大 css   selector 选择 器 ， xpath 语句 精简 版 。 lxml 模块 重视 ， lxml xpath 语句 很 支持 。   lxml 还 很 去 构建 一个 xml lxml 文本 ：   实际上 xml 表达 结构 信息 ， 简单 html 语法 树 。 基于 xpath 结构 信息 精准 信息 搜索 定位 操作 。   xml element 属性 特别 标准 ， 很 实际上 两个 结构 信息 会有 xml 结构 表达 ， 这方面 领域 考量 ， 实践 上 很多 参考 指导 建议 ， 感兴趣 看下   网页   。   lxml 类似 beautifulsoup 提供 find find _ 方法 ， 推荐 读者 xpath 方法 ， 实际上 据说 lxml find find _ 方法 基于 lxml xpath 方法 ， 推荐 读者 多多 xpath 方法 ， 熟悉 xpath 语法 。   xpath 方法 会 返回 一个 列表 ， xpath 语句   string   包装 ， 就会 返回 一个 字符串 ， 下 。   时间 慢慢 写上 。   xpath 删除 元素   参考   网页   。   xpath 简明 教程   例子 简要 介绍 xpath 语法 ， 参考   阮 一峰 篇 文章   菜鸟 教程 xpath 教程 。   xpath 参考 手册 提供 更 多的 样例   东西 简单 下 即可 ， 多看 例子 。     /   节点 中 匹配 ，   / /   下 个或 子 节点 匹配 。     *   。   选择 title   选择 到了 文档 中 任意 位置   title   标签 ，   /   开头 会 选择 根 节点 ， 不 太 好用 。   选择 title 包含 文本   id 选择   例子 选择 一个 div 标签 ， id 属性   post - date   ， div 改为   *   则为 随便 标签 名字 。   往下 选   选择 目标 标签 属性   string   选择 节点 （ 返回 节点 集   nodeset 只 取 第一个 ） ， 节点 （ 包括 子 节点 ） 文本 抽取 合并 。   想 提取 element 节点 下 ：     .   选取 节点 ，   ..   选取 节点 父 节点 。",
            "tags":"python_companion",
            "url":"articles/lxml-module.html"
        },
        {
            "title":"sql数据库基础",
            "text":"小节 sqlite3 简要 sql 数据库 理论 知识 。 SQL 数据库 mysql ， postgresql 相关 知识 本文 讨论 。   术语   数据库 （ database ） 简单 理解 一个 文件 柜 。 DBMS （ database   management   system ） 数据库 管理系统 。   table   表你 看作 文件 柜 里的 一个 结构化 了的 文件 。 表格 数据 都是   行 存储   ， 要在 头脑 中 牢记 。 一行 数据 称之为 一个   记录   。 SQL （ Structured   Query   Language ） 结构化 查询 语言 。   sqlite3 安装 不 罗嗦 ， 若有 请从 网络 查阅 。   第一个 例子   sqlite3 postgresql ， 客户端 / 服务器 概念 ， 文件 管理 ， sqlite3 数据库 一个 文件 ， 连接 不 文件 ， 就会 自动 创建 数据库 文件 。 删除 数据库 删除 数据库 文件 即可 ， 一块 sqlite3 很 简单 。   数据库 一点 东西 :   例子 连接 创建 mydb 数据库 ， CREATE   TABLE 语句 创建 database 数据库 一个 表 ， 接下来 INSERT   INTO 语句 来给 表 插入 数据 ， SELECT 语句 查看 数据 。     . database   列出 连接 数据库 信息   . table   列出 表格 信息   . header     显示 SQL 表格 头   . quit   退出 sqlite3 命令 行   还   .   查看 更 相关 信息 。   CREATE   TABLE   所示 创建 表格 命令 格式 :   mytable 创建 表格 名字 ， 接下来 一行 定义 表格 一个 字段 或者说 一列 。 第一个 是字 段的 名字 ， 第二个 是字 段的 数据 类型 定义 ， 选的 还 跟上 约束 词 。 先就 字 段的 数据 类型 做出 。   字段 数据 类型     sqlite3 官方 文档   介绍   ， 其就 支持 五种 数据 类型 ：   NULL   空值   INTEGER   整型   REAL   浮点 型   TEXT   字符串 型   BLOB   字节 流型   sqlite3 类型 声明 字符串 还 建立 一套 语法 糖 规则 ， 语法 糖 规则 所示 :   类型 声明 ， 视为   affinity ;   声明 字符串 中 \" int \" （ 不 区分 大小写 ） 子 字符串 ， 视为 integer   affinity ；   ， 接下来 找到 \" char \" \" clob \" \" text \" ， 视为 text   affinity ； varchar ( 80 ) 会被 简单 视为 text   affinity ;   ， 接下来 找到 \" blob \" ， 视为 blob ， 没 数据 类型 声明 ， 视为   affinity ;   ， 接下来 找到 \" real \" \" floa \" \" doub \" ， 视为 float   affinity ;   都 视为 numeric   affinity 。   affinity sqlite 特有 概念 ， text   affinity 内置 TEXT 字符串 型是 ， NULL ， TEXT BLOB 。 输入 数值 则会 自动 转换 字符串 型 。 NUMERIC 会 自动 分配 INTEGER REAL 型 ， 输入 字符串 还 负责 转化 。 ， sqlite3 类型 声明 上是 很 灵活 行了 ， 喜欢 一套 类型 声明 即可 ， 五个 :   null   int   float   text   blob     null   integer   float   varchar   blob   。   字段 约束 词   请看 例子 :   PRIMARY   KEY   一个 表格 只能 一个 PRIMARY   KEY ， PRIMARY   KEY 约束 字 段值 唯一 且不 为空 ， 使 表格 中 记录 唯一 标识 。 表格 中 一个 列 几个 列被 选定 primary   key 。 值得一提的是   integer   primary   key   自动 有了 自动 分配 属性 ， id 一列 ， 不 赋值 ， 会 自动 添加 。   NOT   NULL   约束 字 段不 可取 空值 ， 字段 赋值 。   DEFAULT   指定 字 段的 默认 值 。   创建 表格 表格 不   更改 表格 属性   sqlite3 更改 表格 属性 功能 是很 有限 ， 两个 ， 一个 更改 表格 名字 ， 还 一个 新建 一个 字段 。 sqlite3 CREATE   TABLE 字段 属性 设置 好 （ 迁移 单独 写 脚本 ） 。   ALTER   TABLE   语句 ， 所示 :   删除 表格   删除 前请 慎重 。   插入 记录   插入 一条 记录 前所 示   INSERT   INTO   语句 ， 所示 ：   推荐 风格 ， 圆括号 跟着 列名 不 顺序 ， 值 一一对应 ， 一条 记录 列也 不 都列 ， 不 写的 会 默认 值来 。 INSERT   INTO 语句 通用 。   简单 插入 新的 一行 数据 insert   语句 。   不 重复 插入   主 键值 不 重复 才 插入 ：   更新 记录   语句 用于 更新 特定 表格 数据 ：   删除 记录   ： 第二个 语句 表内 记录 都将 删除 ！   DELETE   FROM   语句 通用 。   查询 记录   讲解 ， 第一个 例子 简单 创建 一个 数据库 ， 代码 ：   检索 语法 ：   想要 显示 多个 列则 写上 多个 列名 ， 列名 之间 逗号 隔开 。 检索 列 列名 处用 通配符   \\ verb + * +   匹配 列 。   排序   SELECT 语句 默认 情况 排序 ， 排序 ORDER   BY 字句 。 插入 几个 新 名字 ：   输入 排序 ：   多个 列 排序   更新 表格 数据 。   多个 列 排序 ：   排序 ， 名字 则按 age 排序 。   降序 排序   ORDER   BY 字句 默认 排序 是升 序 ， 想要 为降 序则 DESC 关键词 ， 所示 :   DESC 关键词 放在 想要 降序 排序 列的 。 想要 多个 列降 序 排序 ， 列   \\ uline { 都要 加上 DESC 关键词 }   。   过滤 数据   SQL WHERE 字句 查询 时 过滤 数据 功能 ， WHERE 字句 ORDER   BY 字句 ， ORDER   BY 字句 放在 。   一个 简单 例子 所示 :   值是 字符串 加上 单 引号 ， :   ' string '   ， 符号 含义 都是 一目了然 ， :   =   ,   < >   ,   ! =   ,   <   ,   < =   ,   ! <   ,   >   ,   > =   , ! >   。   BETWEEN   两个 值 之间 ，   IS   NULL   判断 NULL 值 。   BETWEEN :   NULL   无 值 ， 它与 字 段 包含 0 ， 空 字符串 。   IS   NULL   用法 :   外键 引用   外键 引用 sqlite3 中 加上 一行 设置 :   外键 引用 语法 mysql 类似 ，   constraint   pk _ product _ type   描述 外 。 sqlite3   \\ textbf { date }   类型 ， 内部 会 自动 text , int real 类型 。 声明 写的 ， 值得一提的是 sqlite3 date 相关 函数 支持 。   外键 引用 更 信息 请 参看   官方 文档   。   SQL 关系 模型 浅谈   内部 联接   联接 抽象 理论 讨论 很 ， 谈论 ， 读者 沉思 。 一个 SQL 表格 看作 一个 外部 世界 模型 ， 看作 柏拉图 谈论 理念 。 外部 世界 模型 来说 ， 之间 两种 关系 :   第一种 继承 关系 ， 第二种 组合 关系 。 继承 关系 是指 一个 苹果 实体 来说 ， 各种各样 属性 ， 不 装入 一个 数据库 中 ， 比如说 苹果 实体 供应商 信息 ， 苹果 重量 颜色 信息 。 更 做法 描述 苹果 （ 产品 ） 供应商 信息 单独 放入 一个 模型 ， 描述 苹果 重量 颜色 信息 单独 放入 一个 模型 ， 水果 店 信息 。 ， 衍生 模型 都有 一个   parent _ id   类似 字段 属性 描述 衍生 模型 记录 母体 parent ， 多个 衍生 模型 一个 实体 对象 上 统一 ， 表的 联接 。 看作 表的 联接 最终 成果 心目 中所 想的 超大型 SQL 表格 ， 苹果 模型 ， 存放 苹果 相关 属性 信息 。 SELECT 语句 查 即可 。   第二个 组合 关系 苹果 苹果 皮和 苹果 肉等 ， 子 母体 某种 实体 性 ， 苹果 模型 上 如同   pingguopi _ id     pingguorou _ id   字段 属性 ， 约定   _ id   结尾 都 视作 苹果 组成部分 ， 都 视作 非 组成部分 独独 为我 苹果 模型 属性 。 组合 关系 很 ， 再 谈及 ， 谈论 表格 联接 ， 表格 联接 描述 模型 之间 继承 关系 。   语法 所示 :   约定 Supplier Info 两个 衍生 模型 内 存储   parent _ id   Pingguo 模型 中的 记录 号 。 记录 号 代表 同一个 苹果 实体 。 同一个 苹果 实体 ,   price ,   weight   属性 列 。   不 WHERE 字句 会 执行 笛卡尔 乘积 操作 ， 字段 属性 随意 组合 ， 现实 意义 。   SQL 规范 ， 不 推荐 WHERE 字句 表达 ， 内部 联接 （ INNER   JOIN ） 语句 更 推荐 写成 形式 :   SQL 语法 一个 术语 形容 SELECT 语句 ， 内部 联接 。 WHERE ON ， 关键词 INNER   JOIN 。 SQL 联接 默认 方式 内部 联接 。   视图   视图 虚拟 表 ， 不 包含 数据 ， 更 确切 来说 一种 检索 手段 。 视图 嵌套 视图 ， 视图 不 包含 数据 ， 依赖 检索 ， 过多 视图 会很 降低 性能 。",
            "tags":"SQL",
            "url":"articles/sql-basic.html"
        },
        {
            "title":"mysql数据库",
            "text":"简介   本文 假设 读者 sql 一个 初步 ， 讨论 mysql 相关 细节 。 安装 ubuntu 下就 简单 apt - 安装 ， 所示 ， 不 赘述 。   mysql 入门   小节 代码 依次 演示 第一个 例子 ， 好让 读者 mysql 有个 初步 。   登录   root 用户 登录   密码 安装 mysql 时的 情况 ， 设置 密码 Enter 。   mysql 数据库 配置   mysql   /     . conf   配置 外 ， 很多 相关 配置 一个 名叫 mysql 数据库 。   列出 数据库   切换 数据库   先 切换 mysql 数据库 看 。   列出 表格   描述 过程 GUI 程序 （   emma   ） 来点开 看 。 先 user 表格 ， 表格 存储 mysql 用户 信息 。   简单 检索 表格   内容 较多 ， 显示 效果 不 太 好 。   创建 用户   user 表格 插入 一条 记录 实际上 新建 一个 新的 mysql 用户 ， 所示 :   删除 用户   user 表格 删除 一条 记录 删除 mysql 用户 ， 创建 用户 删除 :   好吧 ， 再 用户 加 进去 ， 只 给了 用户 select insert 权限 ， 再 多给 几个 权限 。   更新 记录   用户 新 加上 update ， delete ， create drop 权限 。 用户 很多 权限 设置 ，   用户 访问 权限 管理   修改 mysql user 数据库 方法 之外 ， 推荐 用户 访问 权限 管理 语句 ：   test database   ， 带   *   表格 ， 想要 用户 访问 database ， 写   * . *   。   第二个 username 用户名 ， localhost 本地 连接 。 再 来看 例子 ：   GRANT   ALL   PRIVILEGES   ON   * . *     wanze @ ' % '   IDENTIFIED   BY   ' 123455 ' ;     %   远程 连接 ， 写 host 。 跟上   IDENTIFIED   BY   设置 用户 登录 密码 。   创建 数据库   先 创建 一个 新的 数据库 :   创建 数据库 指定 字符集   创建 表格   简单 创建 一个 名叫 test 表格 ， 定义 表 头为 三个 整数 ， integer int 一个 。   插入 数据   插入 数据 sql 数据库 insert   语句 格式 。   第一个 例子 就到 ， 简单 mysql 情况 ， 详细 讨论 。   删除 table   删除 database   至此 新建 数据库 信息 都被 删除 ， 第二个 例子 ， 建立 更 现实 意义 数据库 。   mysql 进阶   创建 learning _   database 。 创建 一个 student 用户 ， 其对 learning _   database 拥有 权限 。   创建 表格   写好 sql 语句 文件 刷 进去 ， 所示 :     - u   接 用户名 ， 操作 database 名字 。   文件 简单 写上 一句 :   是很 ， 新建 department table ， 定义 一列 dept _ id   ， 其为   smallint   ，   unsigned   （ 是从 0 65535 ） ，     null   说 列 为空 ，   auto _ increment   说 列的 数值 自动 增加 （ 是主 键 id ） ； 一列   varchar ( 20 )   ， 是变 长 字符串 ， 长度 20 ， 类似   char ( 20 )   ， 定长 字符串 ， 都会   自动 填充 空格   ，   null 限定 非空 。 约束 语句 额外 说 。   constraint   约束 ， pk _ department （ 名字 貌似 随意 ） 指 约束 department table primary   key ， 跟上 primary   key   ( dept _ id )   ， 约束 table   department 主 键值   dept _ id   一列 。   创建 department 表格 语句 加上       exists   ， 表格 不 才会 新建 table ， sql 文件 重复 刷的 出错 。 新建 branch 表格 sql 语句 增加 新的 东西 ， 往下 看 。   值得一提的是 mysql date 类型 只能 存储 公元前 1000 年到 公元 9999 年 之间 date 。   接下来 重点 讲   foreign   key   约束 写法 。   fk _ e _ emp _ id 名字 带有 随意性 ， 大致 表达 出 fk _ table 下的 一列 即可 。   foreign   key   外 键值   ( superior _ emp _ id )   一列 是外 键值 ， references   引用   employee   表格 ( emp _ id )   一列 。 总的 superiro _ emp _ id 一列 一个 外 键值 约束 列 ， 值只 取自 employee 表格 emp _ id 一列 ， 逻辑 含义 值 引用 。 比如说 雇员 张三 id 3 ， 张三 上司 张三丰 ， id 4 。 张三 修改 上司 值 ， 是本 雇员 列表 有了 id 号的 雇员 。 （ 外键 引用 用于 SQL 表格 中               情况 ， 用内 连接 查询 ， 该外 键值 约束 列的 取值 一个 表格 很多 列 ， 再 详细 讨论 。 ）   刷 ， 推荐 读者 emma GUI 程序 实时 查看 :   值得 讲的 :   mysql 枚举 类型 ， cust _ type _ cd 一列 只能 取 ' I ' ' B ' 两个 值 。   插入 数据   代码 :   department dept _ id 打开 auto _ increment 特性 ， 简单 一列 赋值   null   即可 ， 其会 自动 添加 一个 主键 数字 。   创建 表格     exists 逻辑 ， sql 脚本 重复 刷都 ， 插入 数据     exists 逻辑 ？ 请 参看   网页   。   insert   ignore   语句 重复 插入 ， 插入 语句 改成 样子 :   id 赋值 ， 其为 primarykey ， 设置 null 语句 会 重复 插入 ， primarykey 重复 ， insert 语句 才 插入 。   句 :   子 查询   SQL 三种 类型 表 :   一种 常见 存储 那种 SQL 表格 ； 第二种 临时 表格 ， 子 查询 返回 表格 ； 一种 虚拟 表 ， 视图 。   子 查询 实际上 一个 select 语句 其将 返回 一个 临时 SQL 表格 ， 最 简单 跟在 一个 select 语句 语句 ， 一种 用法 常用 表格 多列 值的 复制 转移 操作 ，   insert   select   语句 ， 其是 一个 insert 语句 一个 select 语句 组合 而成 。 所示   1   :   SQL 语句 Suppliers 表格 SupplierName Country 两列 值都 复制 Customers 表格 中 去 ， CustomerName Country 两列 。   例子 第三种 用法 ， 其是 一个 select 语句   括号 ( ) 括   。 返回 一列 值 ， 情况 一个 值 ， 值将 提取 insert   语句 ， 返回 多个 值的 情况 ， 过滤 条件       ( select   … )   ， 子 查询 返回 多个 值 。   往下 看 :     create   temporary   table   语句 select 语句 创建 一个 临时 表格 ， 临时 表格 session 看 ， 退出 session 临时 表格 会 自动 drop 掉 。   update 语句 格式 熟悉 ， 关键 理解 字句 过滤 条件 。 SQL 语句 : employee 表格 中 Barker   Susan Tyler   Robert 两个 伙计 上司 设置 Michael   Smith emp _ id 。 过滤 条件 逻辑 逻辑 想 熟悉 编程 都 很 ， 不 赘述 。   交叉 连接   接下来 语句 显得 :   SQL 语句 主体 insert   select 语句 ， 显得 select 语句 是有 customer （ 别名 c ） 一个 子 查询 语句 生成 表格 （ 别名 e ） 一个 子 查询 语句 生成 表格 （ 别名 a ）   cross   join   成的 一个 表格 。   理解 cross   join 概念 ， 不 读者 接触   join ， 内 连接 概念 ， 接触 SQL 表格 join 不 加 过滤 条件 生成 表格 两个 SQL 表格 笛卡尔 积 。 笛卡尔 积 ， 假设 一个 表格 三行 ， a 行 b 行 c 行 ， 假设 一个 表格 两行 ， 1 行和 2 行 ， 两个 表格 笛卡尔 积 生成 一个 大 表格 ， ( a1 行 a2 行 b1 行 b2 行 c1 行 c2 行 ) ， 一共 3 * 2 = 6 行 。   cross   join 交叉 连接 实际上 多个 表格 之间 笛卡尔 积 运算 组合 一个 更 大的 表格 。   内 连接   例子 中 第一个 子 查询 语句     join   关键词 ， 其是 内 连接 。 内 连接 看作 是在 交叉 连接 生成 表格 基础 上 进一步 加上 过滤 条件 行给 删除 掉了 。   来看 :   branch 表格 4 条 记录 ， branch 18 条 记录 ， cross   join 组合 出 72 条 记录 。   再 来看 查询 :   两个 SQL 表格 cross   join 大 SQL 表格 数据 组合 不 ，   join 关键词 过滤 生成 大 SQL 表格 更 现实 意义 。 一个 雇员 只 一个 分公司 ， cross   join 雇员 都有 四个 分公司 ，   join 加上 控制 雇员 分配 分公司 正是 连接 分公司 号 。 更 现实 意义 连接 。 理解 ， 雇员 分公司 属性 id 1 ， 连接 分公司 表格 ， ， 才能 保证 分公司 表格 属性 雇员 。   :       b . city   =   ' Woburn '   实际上 限定 一个 分公司 。   跟了   limit   1   只 返回 一条 记录 。 最终 cross   join 生成 大 表格 还 加上 过滤 条件   一个 顾客 fed _ id 都是 唯一 ， 实际上 custom 表格 交叉 连接 一条 记录 ， 三个 表格 cross   join 情况 等同于 两个 表格 一条 记录 属性 都 加上 ， 再 cross   第三个 表格 ， 第三个 表格 三条 记录 ， 最终 大 表格 三条 记录 。   union     union     多个 数据 集 合并 。 一种   union   用法 ，   union   会 删除 重复 项 ， union   单纯 合并 。 所示 :   别名   说了 select 字句 运算 列 ， 还 构建 一个 列 ， 列 mysql 会 自动 为其 创建 默认 名字 ， 指定 名字 ，     关键词 ， 所示 :     关键词 省略 ， 表达 ， 推荐 加上     关键词 ， SQL 语句 可读性 更 高 。   去除 重复 行   所示   distinct   关键词 来让 select 字句 过滤 掉 重复 行 。   备份 还原   mysql 备份 操作   mysqldump   命令 ， 其将 生成 一个 sql 文件 ， 还原 实际上 加载 sql 文件 即可 。   还原   过程 所示 :   备份     mysqldump   命令 ：   - u   :   设置 登录 用户名   - h   :   连接 数据库 服务器 地址   - P   :   连接 数据库 服务器端 口   - v   :   显示 聒噪 信息   - p   :   mysql 命令 类似 ， 等下 输入 密码   其后 必 填 参数 是你 想要 dump database 名字 。   备份 还 加上 查询 语句   重 命名 数据库   备份 还原 过程 组合 重 命名 数据库 。   hendrasaputra   介绍 ， 做 降低 I / O 。   推荐 扩展 略读 篇 文章 ， mysqlworkbench 相关 备份 还原 重 命名 操作 ：   mysqlworkbench 数据库 重 命名   python 连接   django 连接 mysql 默认 用的   mysql - python ， 更 喜欢 pymysql ，   manage . py   加上 两句 ：   参考   网页   。   附录   server       错误   错误 原因 很多 ， 情况 mysql 包 大小 设定 太小 ：   参考 资料   网页 参考 《 SQL 学习 指南 书 ， 第二 版 ， Alan   Beaulieu 著 ， 张伟 超 ， 林 青松 译 。   Footnotes :   1   参考   网页   。",
            "tags":"SQL",
            "url":"articles/mysql-database.html"
        },
        {
            "title":"powershell",
            "text":"powershell 中文 显示   UTF - 8 越来越 主流 ， powershell 默认 代码 页 默认 936 ， 改为 UTF - 8 格式 输出 ， 很多 程序 都 默认 文本 编码 输出 。 执行   chcp   65001   。   【 2020 - 8 - 13 】 最新 win10 支持 一种 实验 特性 ， 图所 示 ：   会让 系统 默认 powershell 采用 utf8 编码 ， 改动 系统 全局性 ， 副作用 。   当前目录 启动 powershell   win10   下 shift 键 ， 点下 鼠标 右键 ， 菜单 有个 打开 powershell 功能 当前目录 启动 powershell 。   设置 powershell 启动 默认 大小   右键 点击 powershell 最 栏 ， 会 默认 值 选项 ， 设置 布局 窗口 大小 即可 ， 宽度 高度 100 - 40 ， 感觉 还 行 。   编写 powershell 脚本   powershell 脚本 后缀   ps1   ， 编写 powershell 第一个 挫折 会 提示 权限 执行 脚本 ， windows 默认 策略 ， 管理员 身份 运行 ：   启动 一个 进程   进程 输出 重 定向 ：   获取 工作 目录   例子 讲解 powershell 定义 变量 字符串 中 变量 知识 。   熟悉 脚本 例子 ， 基本上 子 命令 调用 返回 ， 字符串 中 变量 替换 ， 引用 变量 等都 看 。",
            "tags":"others",
            "url":"articles/powershell.html"
        },
        {
            "title":"统计学学习笔记",
            "text":"均值 中位数 众数     均值 ， 算术 平均数 ， 熟知 数加 除以 个数 ， 数 平均 有多 大 。   median   中位数 ， 概念 ： 一组 数 从小到大 排列 ， 最 数 中位数 。 最 解释 ， 一共 奇数 数字 ， 去掉 一个 最小 去掉 一个 ， 类推 ， 剩下 来的 数 中位数 ； 一共 偶数 数字 ， 会 剩下 两个 数字 ， 中位数 两个 数字 均值 。   mode   众数 ， 一组 数中 频率 或者说 分布 最 多的 数 。 比如说 [ 1 , 2 , 2 , 3 ] 一个 样本 ， 数字 2 次数 最 ， 就说 样本 众数 2 。   统计 意义   平均值 概念 最 熟悉 ， 其是 最 统计学 手段 。 物理学 上的 测量 ， 精确 测量 取 平均值 。 再 衡量 一类 数据 大致 平均 情况 ， 考试 平均 成绩 ， 平均 成绩 大致 对待 学期 学业 态度 。   中位数 均值 考察 样本 总体 状态 ， 区别 中位数 极值 （ 偏离 特别 远的 值 ） 不 敏感 。 收入 来举 例子 ： 人的 收入 特别 高 ， 均值 考察 社会 收入 水平 会有 抬高 嫌疑 。 家庭 之间 收入 共享 ， 计算 中却 一并 。 中位数 考察 看着 社会 总体 收入 水平 。 考察 家庭 平均 收入 要用 中位数 。   众 数只 关注 次数 最 多的 数 ， 来讲 不 考察 样本 总体 状态 能力 ， 情况 下却 。 比如说 头发 颜色 定性 描述 ， 众数 很 合适 。   python 相关   python3.4 ， python statistics 模块 ， 不 重复 发明 轮子 。 ， median mode 三个 名字 statistics 模块 中都 函数 ， 演示 例子 ：   三个 函数 都 接受 一个 迭代 对象 ， 相关 操作 ， 是空 数据 ， raise   statistics . StatisticsError   。   值得 mode 还 操作 字符串 ：   mode 函数 几个 数都 频率 情况 ， 运行 命令 ， raise   statistics . StatisticsError   。   利用 collections 模块 Counter 类的 _ common 方法 更 健壮 mode 函数 。   python3   statistics   内置 模块   均值   中位数     众数的 运算 ， ， python2 模块 不 说了 ， 矢量 思维 计算 效率 。 好了 ， numpy     scipy   出场 。   python 迭代 对象 （ Iterable ） numpy ndarray 对象 ， 是了 ， pass 掉 。   利用 numpy scipy 函数 支持 。   mode 统计 频数 scipy 是有   scipy . stats . mode   函数 ， 返回 频数 ， 频数 多个 情况 只 返回 一个 。   方差 标准 差   来说 总体 情况 ， 总体 均值   \\ ( \\ mu \\ )   ， 总体 方差 公式 所示 :   $ $   { \\ sigma   } &# 94 ; { 2   }   = \\ frac   {   1   } { n   }   \\ sum   _ {   i = 1   } &# 94 ; {   n   } { (   X _ i   -   \\ mu ) &# 94 ; 2 }   $ $   总体 方差 是每 一个 数和 总体 均值 差的 平方和 均值 。   如上 示 ， pvariance 还 接受   mu   可选 参数 ， 总体 均值 ， 重复 计算 ， 赋值 函数 会 自动 计算 。   总体 标准 差 总体 方差 平方根 ， 或者说   \\ ( \\ sigma \\ )   。   pstdev （ Population   standard   deviation ） 还 接受   mu   可选 参数 。   中 ， 绝大多数 情况 都是 考察 样本 总体 ， 更 常用 样本 方差 :   $ $   { S   } &# 94 ; { 2   }   = \\ frac   {   1   } { n - 1   }   \\ sum   _ {   i = 1   } &# 94 ; {   n   } { (   X _ i   -   \\ overline   {   X   }   ) &# 94 ; 2 }   $ $   到了 ，   ( n - 1 )     ( n )   ， 统计学 ， 无 偏 估计 ， 样本 评估 总体 方差 ， 总会 估计值 偏 小 ， 再 加上 一个 额外 数据 量来 估计值 更 准确 些 ， 大体 ，   n - 1   ， 统计学 高级 内容 ， 更好 估计 （ 样本 估计 总体 ） 。   python 中的 样本 方差   variance   函数 ， 样本 标准 差是   stdev   函数 :   统计 意义   方差 是来 描述 数据 集的 离散 程度 ， 标准 差 方差 平方根 ， 用来 描述 数据 集的 离散 程度 。 标准 差和 数据 会更 ， 比如说 统计 一班 身高 标准 差是   10cm   ， 给人 一个 直观 感受 。 正态分布 中有   均值   $   \\ pm   $   三个 标准 差 ， 样本 中   99 点几 数据 都 包含 在内 。   简单 来说 ， 总体 考察 对象 ， 简单 均值 ， 中位数 ， 众数 描述性 概念 ， 总体 来说 都是 很 难 考察 。 总体 中 取出 考察 对象 （ 理论 上 近似 随机 取样 ） ， 一个 样本 。 希望 样本 统计 描述性 数据 很 好地 总体 数据 状况 。 统计学 量 实际上 都有 两种 类型 ， 均值 总体 均值   \\ ( \\ mu \\ )   样本 均值   \\ ( \\ overline { X } \\ )   。   python 相关   利用 numpy 计算 ：   计算 样本 方差   variance   ddof = 1   设置 1 ， 默认 0 。 计算 样本 样本 方差 样本 标准 差 。   中位数 和分 位数   中位数 谈过 ， 最 数 。 一种 说法 数据 集里   50%   数比 小 ，   百分之 50 数比 大 。 分 位数 概念 由此 来了 ，   25%   分 位数 （ quantile ） 数据 集里   25%   数比 小 。 联想 统计学 分布图 ，   25% 分 位数 看作 数画 一条 线 ， 左边 面积 总面积   25% 。   python 相关   numpy     percentile   函数 分 位数   quantile ， 显示 几个 分 位数 位置 定制 。 利用 pandas   Series   数据结构 返回 ， 好 分 位数 。   极差   中程 数   极差 （ range ） 一组 数的 最大值 最小 值的 差值 。 中程 数 （ midrange ） 一组 数的 最大值 最小 值的 均值 。   python 相关   极差 range 名字 python 语言 range 函数 相 冲突 ， python 极差 定义 一个 函数 ， 计算 公式 简单 ， 不 额外 定义 一个 公式 。 ：   中程 数   统计 意义   极差 统计学 上 入门 级别 粗略 样本 离散 程度 考察 ， 一组 数 很 分散 ， 都 均值 ， 极差 会 很小 ， 情况 一组 数 极差 更 大 ， 说 第二组 数 离散 程度 更 大 。   中程 数 样本 数组 离散 程度 很 高 ， 均值 近似 快速 计算 。   标准分   标准分   \\ ( z   =   \\ frac { x -   \\ mu } { \\ sigma } \\ )   标准分 是将 正态分布 映射 一个 标准 正态分布 上的 手段 ， 简单 来说 一种 均值 标准 差的 正态分布 标准化 过程 ， 理解 过程 理解 标准 正态分布 ：   标准 正态分布 是值 均值 0 ， 标准 差为 1 正态分布 。   标准分 做出 假设   目标 研究 数据 集   或者说 学生 得分 数据 集是   正态分布   。 正态分布 。 正态分布 中有 规律 ：   95.45%   数据 位于 两个 标准 差的 内   99.73%   数据 位于 三个 标准 差的 内 。   （ 公式 ）   参考 同济大学 概率论 数理 统计 第四 版一 书   p48   引理 ：     X   分布 正态分布 ，   \\ ( Z   =   \\ frac { X - \\ mu } { \\ sigma } \\ )   分布 标准 正态分布 。 ， 简单 看了 下 数学 公式 推导 ， 信心 足 ， 没 。   条件 概率   条件 概率 维恩 图解 很 有意思 ：   $ $   P ( A | B )   =   \\ frac { P ( A   \\ cap   B ) } { P ( B ) }   $ $   维恩 图 基本上 写出 公式 ， 含义 是很 。   ：   $ $   P ( A | B )   P ( B )   =   P ( A   \\ cap   B )   $ $   $ $   P ( A   \\ cap   B )   =   P ( B   \\ cap   A )   =   P ( B | A )   P ( A )   $ $   概率 树来 理解 ， 先 发生 B 发生 A 事件 ， 事件 AB 概率 两个 事件 概率 乘积 ， 困惑 ， AB 事件 BA 事件 两个 概率 ？ （ 针对 古典 概率 模型 ， 到了 顺序 地方   P ( a , b )   符号 ，   P ( a , b )   不 等于   P ( b , a ) 。 ）   互斥 事件 A ， B ， 即不 发生 事件 ， 则有   \\ ( P ( A   \\ cap   B )   = 0 \\ )   全 概率 公式 ：   $ $   P ( B )   =   P ( A )   \\ times   P ( B  |  A )   +   P ( A ' )   \\ times   P ( B  |  A ' )   $ $   贝叶斯 定理 ：   $ $   P ( A | B )   =   \\ frac { P ( B | A )   P ( A ) } { P ( B )   =   P ( A )   \\ times   P ( B  |  A )   +   P ( A ' )   \\ times   P ( B  |  A ' ) }   $ $   贝叶斯 定理 提供 一个 计算 逆 条件 概率 方法 ， 情况 是先 发生   A   再   发生 B   ， 想 B 发生 A 发生 概率 。   贝叶斯 定理 思想 提及 更深 ， 假设   A   事件 ， 机器 人 针对 A 事件 做 推断   B ， 想 推断 B 正确 可能性 有多 大 ， A 事件 发生 概率 ， A 事件 发生 后 B 推断 概率 ， A 事件 发生 B 推断 发生 概率 都 是从 经验 数据 中 学习 。 后验 B 推断 发生 ， A 事件 发生 推断 错误 ， A 事件 发生 推断 正确 ，   \\ ( P ( A | B ) \\ )   常被 统计学家 称为   后验 概率 ， 实际上 逆 概率 ， 计算 过程 贝叶斯 公式 计算 。   参考 资料   深入浅出 统计学   同济大学   概率论 数理 统计   机器学习   周 志华",
            "tags":"math",
            "url":"articles/tong-ji-xue-xue-xi-bi-ji.html"
        },
        {
            "title":"data-input",
            "text":"title :   data - input   In   [   ] :   文本 读取 数据     linux     ! cat   . txt     windows     ! type   . txt   In   [ 5 ] :   In   [ 6 ] :   In   [ 7 ] :   Out [ 7 ] :   a   b   c   d   message   0   1   2   3   4     1   5   6   7   8   world   2   9   10   11   12   foo   header 情况   指定   header = None   ， 将会 自动 分配 0 ,   1 ,   2 等为 header ，   names = [ ' a ' , ' b ' ]   指定 , csv 数据 源有 header ，   skiprows   来跳 不 想要 header 。   In   [ 10 ] :   Out [ 10 ] :   d   c   b   a   info   0   1   2   3   4     1   5   6   7   8   world   2   9   10   11   12   foo   In   [ 15 ] :   读入 excel   读入 微软 excel 文件 , 安装   xlrd   模块 。   In   [ 20 ] :   Out [ 20 ] :   a   b   c   d   message   0   1   2   3   4     1   5   6   7   8   world   2   9   10   11   12   foo   读取 html 文件   ， pandas 还 读取 分析 html 文件   In   [ 56 ] :   In   [   ] :",
            "tags":"others",
            "url":"articles/data-input.html"
        },
        {
            "title":"data-ploting",
            "text":"title :   data - ploting   jupyter   notebook   下 推荐 输入   % matplotlib   notebook   。   In   [ 1 ] :   In   [ 2 ] :   配置 中文 字体 支持   In   [ 3 ] :   折线 图   折线 图是 最 简单 图形 ， 调用 plot 函数 即可 ， 图形 显示 上的 微调 。   In   [ 5 ] :   Out [ 5 ] :   饼图   pie 函数 ， 子图 :   fig1 ,   ax1   =   plt . subplots ( )   autopct   格式   ' % 2.0 f% % '   含义   数字 位数 小数点 位数 。   In   [ 6 ] :   条形 图   垂直 条形 图 ， 类别 很多 水平 条形 图 。 条形 图 用于 定性 数据 。   垂直 条形 图   barh 函数 绘制 垂直 条形 图 。   In   [ 7 ] :   Out [ 7 ] :   In   [ 62 ] :   Out [ 62 ] :   直方 图   直方 图 用于 定量 数据 分组 显示 需求 。 直方 图 长方形 之间 间隔 。   In   [ 8 ] :   散点 图   机器学习 中 ， 散点 图 一种 很 常见 图形 ， 表现 数据 点 分布 。   In   [ 10 ] :   In   [ 19 ] :   Out [ 19 ] :   In   [   ] :",
            "tags":"others",
            "url":"articles/data-ploting.html"
        },
        {
            "title":"人类知识体系纲要序言",
            "text":"序言   天道   道生 ， 一生 二 ， 二生 三 ， 三生 万物 。 万物 负阴 抱 阳 ， 气 。   — — 道德经   物理学 上 宇宙 起源 大 爆炸 ， 宇宙 物质 不 物质 ， 包括 时间 空间 ， 很 久很 久 ， 都 浓缩 一个点 之上 。 点 物理学 上 称之为 奇点 ， 奇点 现有 熟知 物理学 规律 都 失效 。   物理学 宇宙 起源 止步 宇宙 大 爆炸 ， 解释 道在 奇点 时间 不 ， 问 奇点 意义 。 而从 哲学 角度 来说 世界 起源 还要 往前 推 ， 物理学 谈论 万物 万物 活动 舞台 时间 空间 都 有形 世界 ， 有形 世界 ， 万物 还 ， 一个 东西 恒常 ， 此即 天道 。   周易 乾卦 天 ， 天道 。 天道 运行 资生 万物 ， 万物 内部 都有 阴阳 ， 阴阳 之气 运动 变化 万物 运动 变化 。   时间 空间 光   宇宙 大 爆炸 最 早期 阶段 宇宙 时间 空间 光 ， 时间 空间 上演 戏剧 大 舞台 ， 有了 灯光 才能 看清 。 宇宙 大 爆炸 第一 阶段 跑的 光还 快的 粒子 爆发 ， 运动 变化 宇宙 时间 空间 形状 。 宇宙 大 爆炸 第二 阶段 光子 爆发 跑 。   物理 粒子   过程 物理学 解释 不 太 ， 两派 说法 ： 第一 派 宇宙 时间 空间 骨架 ， 宇宙 膨胀 冷却 ， 宇宙 各处 会 越来越 多的 细小 粒子 ； 一派 宇宙 基本粒子 都是 来源于 宇宙 大 爆炸 后续 阶段 。   倾向 第一 派的 说法 ， 奇点 黑洞 ， 想当然 宇宙 奇点 一个 超大型 黑洞 说法 。 夸克 ， 胶子 ， 质子 ， 中子 ， 电子 等极 微小 物理 粒子 ， 都是 宇宙 时间 空间 早期 膨胀 冷却 时期 ， 时空 结构 不 稳 ， 慢慢 宇宙 中 各处 。   阶段 后期 ， 宇宙 形状 大体 类似 观测 到的 星云 形状 ， 宇宙 内部 物理学 规律 基本上 熟知 物理学 规律 。 发展 演化 物理学 上 分歧 多了 。   星云 粒子 氢原子 ， 很 长时间 运动 汇聚 ， 核聚变 ， 更 重的 元素 。 元素 周期表 铁 重元素 还 超新星 爆炸 才能 。   分子   宇宙 发展 历史 中 第一批 行星 类似 地球 重元素 行星 ， 地球 上的 重元素 都 太阳 制造 ， 太阳 重元素 捕获 到了 。 太阳系 至少 是继 第一批 超新星 爆炸 才 慢慢 。 宇宙 中 第一批 星系 行星 都是 类似 木星 气态 行星 ， 行星 地球 上的 生命 形式 天方夜谭 ， 无机物 分子 小 结构 有机物 分子 则是 。 至此 宇宙 中的 化学 视野 。   太阳系   太阳系 宇宙 发展 历史 中 处于 一个 位置 ， 推测 太阳系 第二代 星系 ， 地球 第二代 行星 。 地球 宇宙 地方 类似 地球 重元素 核心 行星 ， 进化 出了 第一代 生命 形式 。 地球 上的 生命 形式 宇宙 发展 历史 上的 第二代 ， 第二代 生命 形式 基于 第一代 生命 形式 ， 有所不同 ， 融合 。 只能 说 地球 上 生命 形式 演化 扩展 中 一种 进化 加速 现象 纯 主观 推断 。   46 亿年 前 ， 观察 到的 地球 月亮 太阳系 样貌就 成型 。   生命 光   也许 宇宙 中 会有 地球 上的 差异 生命 形式 ， 地球 上 观测 来看 ， RNA DNA 分子 标志 宇宙 生命 光 。   太阳系 成型 ， 小行星 撞击 地球 几率 变小 ， 木星 行星 地球 保驾 护航 。 小行星 撞击 带来 热量 ， 地球 运行 轨道 变得 稳定 ， 地球 表面 冷却 ， 水蒸汽 慢慢 降了 ， 下雨 ， 下了 几天 几夜 雨啊 ！ 雨下 下着 海洋 。   地球 水 到底 有了 大 程度 有机 分子 一个 迷 ， 地球 上的 水 很多 都 来自 冰 彗星 ， 冰 彗星 携带 甲烷 ， 携带 蛋白质 ， 携带 DNA RNA 都是 。 有机 分子 来自 第一代 行星 ， 第一代 行星 之上 ， 地球 类似 发生 。 类 统称 作 \" 米勒 - 尤里 \" 。   想象 场景 ， 行星 渐渐 冷却 ， 很 热 ， 火山 喷发 ， 雨水 落下 水蒸气 ， 行星 一层 厚厚的 水蒸气 大气层 翻滚 。 雷电 ， 厚的 水蒸气 大气层 还 分成 好几层 ， 上层 紫外光 照射 ， 氨基酸 分子 水滴 落下 ， 下 一层 ， 该层 水滴 某种 无机 矿物质 可做 酶 介质 。   最终 地球 慢慢 冷却 ， 最 原始 早期 海洋 ， 有机质 ， 有机 分子 程度 几何 ， 水层 翻涌 ， 某种 原始 线粒体 ， 核糖体 ， 某种 原始 细胞 结构 ， 个迷 。 所说 ， 地球 上的 生命 形式 信息 很多 都 来源于 宇宙 地方 ， 地球 上的 生物 进化史 来说 ， 起点 究竟 ， 真的 白手起家 ， 在多 大程度 上 宇宙 中 地方 工作 ， 实在 不得而知 。   生物 进化   接下来 生物学 谈论 生物 进化史 。 生物学 上 很多 东西 课本 上写 清清楚楚 ， 知识 分门别类 井然有序 ， 好像 确定无疑 ， 单细胞 到多 细胞 ， 植物 动物 ， 爬行动物 哺乳动物 ， 所说 ， 起点 本身 扑朔迷离 一个 迷 ， 则其 过程 很难说 一个 万世 不易 真理 。 生物学 定位 一门 分门别类 学问 ， 那种 类似 物理学 基于 时间 逻辑 推演 学科 。   人类   写 篇 文章 ， 我会 大脑 进化 ， 额脑的 崛起 都 单独 列 人类 多么 ， 做 。 人类 单独 列 一章 ， 天地人 以人 为重 。 人类 其内 本质 一种 动物 ， 疑问 。 人类 动物 身上 某种 神性 。   本文 无意 描述 人的 某种 动物 上 浓墨重彩 地填 上 一笔 ， 猩猩 张三 占领 山头 ， 老虎 李四 狩猎 山羊 。 关注点 在于 人的 神性上 ， 关注 于人 基于 神性 世界 认知 ， 世界 探索 ， 世界 模拟 构造 相关 知识 积累 。   很多 人在 谈及 人类 历史 如同 盲 信于 某种 生物 进化 历史 方向 ， 总 试着 人类 历史 安上 方向 ， 提出 方向 上的 观点 很多 都是 值得 商榷 ， 人类 历史 真的 方向 ， 想 基于 人的 神性 。",
            "tags":"thought",
            "url":"articles/ren-lei-zhi-shi-ti-xi-gang-yao-xu-yan.html"
        },
        {
            "title":"人类知识体系纲要引言",
            "text":"引言     思考 起点 承认 认知 边界 ， 有限 生命 ， 目光 人类 认知 领域 内 ， 一个 圆圈 ， 圆圈 外的 都 不 可知 领域 。 不 可知 领域 不 感知 ， 感知 验证 短期 内也 不 可知 领域 。   不 可知 领域 内部 ， 很大 一部分 区域 模糊 半 可知 区域 。 人类 知识 可知 领域 中心 小的 一部分 ， 到了 个体 人 身上 ， 基本上 中心 一个点 。   点 最 核心 一点 确定无疑 ： ， 如是 。   言语 沟通 交流 工具 ， 围绕 描述 ， 才让 沟通 交流 。 设想 两个 世界 体系 ， 世界 体系 内部 都 内部 运作 规律 表达 方式 ， 两个 世界 沟通 交流 ， 两个 世界 体系 之间 言语 沟通 ， 要某 理解 ； 要某 误解 ， 而不 应 归结 于某 一方 理解 过程 上 出了 。 言语 描述 工具 ， 下 一步 才是 言语 发送 方 围绕 正确 描述 言语 接收 方 围绕 去 正确 理解 。   言语 是在 描述 某种 独立 沟通 外在 ， 外在 真实性 确定无疑 ， 言语 交流 都是 徒劳 。 评判 外部 言语 ， 言语 构筑 一个 模型 ， 极大 贴近 外部 ， 请 贴近 词 ， ， 言语 只 去 尽可能 模拟 ， 而不 取代 。   还 数学 上的 度量衡 描述 过程 ， 言语 外部 描述 ， 好像 描述 一个 无理数 ， 无理数 ， 要用 ， 理解 去 描述 无理数 ， 只 一个 无限 逼近 过程 。   类似 言语 还 用于 描述 沟通 一方 内部 世界 ， 评判 描述 作者 内心 世界 言语 ， 一个 描述 如实 内心 构建 世界 ， 故意 捏造 、 装腔作势 、 欺骗 愚昧 不 知己 心的 言语 ， 毫无 价值 。 描述 内在 世界 言语 ， 真诚 第一 要义 。   人类 作品 本质 上都 作者 言语 ， 要某 某种 外部 描述 ， 分类 为非 虚构 类 ； 作者 内在 世界 描述 ， 分类 虚构 类 ， 虚构 类并 指 非 ， ， 某种 程度 上 ， 劣质 非 虚构 类 作品 相比 ， 很多 虚构 类 作品 更 高的 真实 性 ， 如实 作者 内心 构建 世界 。   人 身上 神性   人 身上 某种 神性 ， 神性 来自 宇宙 本身 ， 人 归根结底 宇宙 一部分 ， 神性 人和 宇宙 某种 律动 需求 。 中国 人更 熟悉 词汇 天人合一 精神 需求 。   机器学习 算法 都 给定 一个 标签 ， 就算 将来 高级 机器人 智能 算法 ， 给定 机器人 一个 目的 。 机器人 动物 某种 目的 效益 解释 ， 设计 多种 机器 智能 类似 动物 。 人和 机器 智能 区别 在于 人能 创造 — — 创造 局限 数据 层面 层面 创造 ， 将来 几千年 后的 机器 智能 算法 模拟 。 人和 机器 智能 最 核心 区别 人 创造 意义 ， 未来 几万年 更 远 未来 ， 机器 智能 创造 意义 ， 请让 人类 公民 身份 ， 人的 智能 无 区别 ， ， 神性了 ， 宇宙 上 天大 计划 一部分 。   正是 人的 智能 创造 意义 ， 更 具体来说 ， 目的 追寻 ， 目的 本身 意味着 意义 ， 基于 天人合一 内在 精神 需求 ， 宇宙 发展 角度 出发 ， 某种 美学 角度 出发 ， 更 底层 不 谈及 不 自觉 大脑 活动 ， 创造 活动 ， 最小 理念 模版 ， 起源 原型 ， 变种 原型 再 加工 再 创造 再 整合 ， 内在 精神 需求 — — 是在 看起来 最 乏善可陈 人 身上 不 例外 — — 都 人 谈及 神性 。   人的 创造 活动 要素 都 先起 始于 一个 现实 中 原型 ， 再 修改 加工 ， 解构 重组 。 后续 工作 ， 最 起源 原型 变种 类似 进化 树 ， 变异 创造 活动 作者 世界观 架构 中都 变种 作者 创造 世界 中 融洽 。   谈及 现实 原型 更 确切 表述 起源 原型 ， 就最 原型 人的 创造 。 不 变种 创造 多出 某种 现实性 。 现实 评判 约束 人的 创造 活动 是不 理解 人的 创造 活动 ， 现实 转眼 逝的 特性 显得 很 之外 ， 理解 现实 本身 是要 人的 创造 能力 上的 。   起源 原型 很多 便利 ： 更 易于 别人 接受 ， 创造 消耗 精力 较少 基本上 外在 世界 现有 原型 中 抽取 而成 ， 外在 世界 本身 一个 融洽 体系 ， 起源 原型 内部 组件 融洽 。   起源 原型 再 创造 变种 原型 一个 很 消耗 精力 活动 ， 内部 组件 要素 很 难 融洽 协调 。 创造 一个 成功 变种 原型 会是 一件 很 事 ， 不 避讳 词 ， 创造 正是 人之 人的 之处 。   天言 、 己言和 人 言   言语 分为 三种 ： 天言 ， 己言 ， 人言 。 天 言为 尊 ， 己言 为重 ， 人 言为 轻 。   人言 别人 说 ， 讨论 某种 现象 ， 参考 ， 放在 身上 出错 。 遗憾 日常 接触 最 多的 人言 ， 人 言有 很 多种 表现 形式 ， 书籍 音频 视频 图画 ， 别人 头脑 中的 世界观 造物 都 称之为 人言 。 正是 人言 充斥 世间 ， 芸芸众生 中 愚蠢 乏思之 辈 何其 。   己言 相比 人 言更 值得 重视 ， 是因为 涉及 上 更 情况 ， 还 求人 求己 ， 大 智慧 都是 出自 内心 ， 言语 媒介 说的 再 好 很 难起 作用 。 更 不用 讲 言语 谬误 频出 ， 出于 私心 私欲 言语 ， 更是 误导 害人不浅 。   再 提醒 一点 ， 世间 出名 看起来 很 厉害 科学家 教授 权威 之流 ， 人工智能 — — 一个 能力 超过 三岁 小孩 人工智能 ， 说 不 出个 所以然 。 在座 年龄 超过 三岁 ， 内心 智慧 ， 远远 高过 科学家 教授 之流 言语 中的 智慧 。   个体 人 知识 能力 局限性 ， 己言也 带有 很大 局限性 ； 唯有 天言 ， 无所不知 上天 言语 ， 值得 去 努力 聆听 遵从 。   探求 天言 ， 第一步 更好 做好 己言的 聆听 修行 ， 内心 静谧 ， 才 下 一步 聆听 天言 。 王阳明 提出 心 私欲 阻隔 ， 心中 之理 天理 。 表述 是不 完备 ， 否定 层面 来说 人 内心 私欲 或者说 动物性 移 除的 ， 人 内心 声音 己言是 不可避免 很大 局限性 ； 肯定 层面 来说 人 身上 神性 ，   人 子内 修 己身 ， 天人感应 ， 细察 万物   。 过程 中人 子是 聆听 到天 言的 。   写作 本书   本书 立意 或者说 书名 人生 很早 阶段 想法 ， 气质 擅长 做 整理 研究 性质 工作 ， 是故 头脑 中 才会 萌生 出 欲念 想法 。 言 ， 人 世界 理解 、 构造 、 模拟 是因为 人 神性 ， 神性 发扬光大 ， 将人 内心 天人合一 精神 需求 发扬光大 ， 是人 天地人 三界 天道 运行 中最 修行 。 善哉 ， 人 子作 修行 ， 必 得上 天福 佑 。   说的 ， 本书 言语 读者 都 人言 ， 之于 是很 局限性 己言 ， 读者 学习 ， 查阅 ， 参考 ， 想 知识 ， 寻求 智慧 ， 去 寻问 上天 智慧 内心 声音 。   正是 己言的 本质 ， 伪装 某种 大众 公 知 般的 形状 ， 吝啬 表达 偏向 主观 观点 ， 深知 一个 偏 木讷 人 ， 保证 本书 独有 创新 。   好了 ， 正题 。",
            "tags":"thought",
            "url":"articles/ren-lei-zhi-shi-ti-xi-gang-yao-yin-yan.html"
        },
        {
            "title":"数学的起源",
            "text":"一的   起初 人 见到 苹果 ， 因人 身上 神性 ， 早期 不 自觉 头脑 活动 人 心中 有了 苹果 形象 概念 ， 早期 人类 生存 环境 恶劣 ， 太 多的 空闲 时间 发展 出 一二 纯 数字 概念 。 到了 事物 数量 性质 ， 基于 关系 表述 ：   一只 手 多的 （ 5 ）   人 身上 多的 （ 20 ）   人类 具象 事物 之上 数量 性质 发展 出 纯粹 数学 概念 一是 一个 很 漫长 过程 。 原始 部落 近代 发展 出 数学 上 一的 概念 ， 笼统 地用 类似 一只 手 多来 表达 。 纯粹 数学 概念 一的 表达 表面 上看 一种 言语 精细 化 ， 抽象化 ， 背后 驱动力 来源于 早期 原始 部落 世界 表达 体系 碰撞 。 过程 类似 货币 ， 部落 三 表达 三个 土豆 多的 ， 部落 三 表达 三个 苹果 多的 ， 慢慢 新造 一个 词语 三来 实实在在 表达 事物 三的 性质 — — 纯粹 数学 概念 三 。   早期 纯粹 数学 概念 上的 ， 五 词 ， 还 如同 数字 体系 连续 ， 还 缺少 几个 词 。   进位 加法 数序   进位 概念 是和 数学 上的 一的 概念 时期 ， 说 一堆 12 ， 表达 25 两堆 一个 。 是很 自然 ， 早期 人类 日常 生活 是会 接触 分 战利品 农作物 部落 成员 工作 ， 负责 这部分 工作 人 慢慢 发展 出了 最 简单 自然数 序和 加法 概念 。   比如说 面前 两堆 糖果 ， 一堆 八个 ， 一堆 七个 ， 一个 糖果 右边 一堆 左边 ， 过程 糖果 消失 ， 8 + 7 ， 加法 实质 两堆 糖果 合并 一堆 糖果 ， 更 繁琐 细节 所示 ：   有了 进位 概念 ， 习惯于 10 个为 一堆 ， 执行 8 + 7 会更 写成 形式 ： 8 + 2 + 7 - 2 ， 8 + 7 等于 一堆 5 。   数学 上的 概念 一和 进位 加法 数序 ， 人类 抽象 词汇 描述 模拟 世界 世界 运行 变化 ， 一和 进位 世界 状况 ， 加法 数 序是 世界 运动 变化 。 合并 两堆 糖果 例子 引入 加法 ， 想 一点 ， 数学 上的 概念 运算 都是 人类 更好 模拟 世界 变化 创造 ， 本质 人类 言语 无 本质 ， 说 数学 上的 概念 某种 神秘 抽象性 ， 赋予 某种 神秘 色彩 。   减法 负数 零   讨论 大概 减法 类比 一种 一堆 糖果 分成 两堆 糖果 操作 。 一点 ， 减法 自然 负数 零的 概念 ， 数学 历史 发展 来看 ， 负数 零 都 印度 书记员 记账 速写 。   比如说 5   本子 ， 借 走 3   本子 ， 还 剩 本子 ？ 办法 告诉 有人 借走 本子 ， 本子 就变 少了 ， 记忆 ， 写到 - 3 。 5 + ( - 3 )   等于 2 。   除法 分数   除法 一种 动作 ， 一块 饼干 分成 两份 ， 除以 2 动作 。 类似 慢慢 发展   1 / 3   分数 概念 。 分数 概念 ， 分数 1 / 3 分数 概念 ， 脱离 除法 概念 ， 长 宽了 。   牛顿 时代 ， 算天 算地 分数 ， 社会 0.3333 十进制 小数 概念 表达 。 0.333 … ？ 实际上 涉及 单位 定义 测量 。 比如说 一个 长棒 ， 测量 长度 。 建立 一个 度量 单位 。 1 。 度量 单位 去测 长棒 。 说 长棒 几个 （ 自然数 ） 度量 单位 长 ， 情况 下 长棒 还 剩下 一点 。 度量 单位 缩至 1 / 10 。 0.1 。 再 去 度量 长棒 。 一个 数值 。 比如说 长棒 1 / 3   长 ， 第一次 度量 失败 ， 第二次 度量 3 ， 第三次 度量 33   。   通用 十进制 小数 来源 。 有个 ， 度量 单位 任意 给定 ， 1 / 3   度量 单位 ， 长棒的 长度 一个 单位 。 说 长棒的 长度 1 / 3   长 。   选用 十进制 小数 法则 仅仅 ， 好让 大小 。 1 / 7   2 / 9   间的 大小 。 概念 分数 如是 度量 分数 。 正 ， 分数 概念 很早 ， 早就 接受 分数 一个 如是 ， 数学家 们又 一类 数 ， 表达 分数 形式 ， 类数 命名 无理数 ， 无理数 到底 一个 ， 实际上 数学家 争论不休 。 重点 在于 无理数 概念 更好 理解 世界 模拟 世界 运动 ， 概念 实在 。",
            "tags":"thought",
            "url":"articles/shu-xue-de-qi-yuan.html"
        },
        {
            "title":"redis",
            "text":"redis 基础   redis 简单 来说 一个 基于 内存 k - v 存储 数据库 ， 内容 很 ， 再 慢慢 详细 讨论 。   python 接口     set 操作 都是 很 直观 简单 ， 不 多说 ， 数据 类型 ， 先 字符串 型 即可 ， ， ， redis 存储 数字 1 会 字符串 \" 1 \" 。   一个 简单 获取 redis 连接 函数 所示 ：   看   decode _ responses = True   ， 加上 目的 python 接受 字符串 bytes 型 ， 字符串 型 ， 大部分 来说 都会 希望 返回 字符串 型 。   字典 类型   确切 描述   hash   表 ， 大体 python 字典 类型 。   设置 过期 时间   设置 key 过期 时间 ，   请 参看   expire     pexpire   命令 。",
            "tags":"others",
            "url":"articles/redis.html"
        },
        {
            "title":"计算余弦",
            "text":"计算 余弦     $ $   \\ cos ( \\ theta )   =   \\ frac { \\ vec { a }   \\ cdot   \\ vec { b } } { \\ left  |  \\ vec { a }   \\  |  \\ left  |  \\ vec { b }   \\  |  }   $ $   向量 绝对值 ， 高中 写法 ， 更 确切 写作 形式 ：   $ $   \\ cos ( \\ theta )   =   \\ frac { \\ vec { a }   \\ cdot   \\ vec { b } } { \\ left   \\ |  \\ vec { a }   \\   \\ | _ 2   \\ left   \\ |  \\ vec { b }   \\   \\ | _ 2   }   $ $   向量 l2 范数 ， 向量 欧几里得 距离 。   向量 sklearn   normalize   归一 化 操作 ， 向量 l2 范数 = 1 ， 默认 l2 范数 ， 设置 范数 。 l1 范数 值的 绝对值 相加 等于 1 （ 数据 预处理 中 ， 概率 合计 等于 1 有用 ） 。   余弦 简化 形式 ：   $ $   \\ cos ( \\ theta )   =   \\ vec { a }   \\ cdot   \\ vec { b }   $ $   求 两个 向量 点积 ， 调用   numpy dot 方法 。   验证 normlize 确实 目标 数据 归一 化了 ：   ord   =   2   求 l2 范数 ， ord = 1 求 l1 范数 。",
            "tags":"others",
            "url":"articles/ji-suan-yu-xian.html"
        },
        {
            "title":"高效numpy和pandas",
            "text":"高效 numpy   numpy pandas 快   一个 计算 ， 发现 dataframe values 值 ， numpy 运算 ， 类似 语句 报错 ：   写上   df [ ' a ' ] . values   会让 程序 速度 快上 一点点 。   numpy concatate stack 快   程序 ：   numpy copy 操作 多用 view   https : / / ipython - books . github . io / 45 - understanding - - internals - - numpy - - avoid - unnecessary - array - copying /   高效 Pandas   参考   篇 文章   ， 一系列 更好 pandas 文章 ， 价值 很大 。 关注 上 speed   。   多个 结构 df 合并 推荐 concat append   pandas dataframe 长度 改变 操作 都会 引发 copy 操作 ， 是先 数据 合并 成 一个 多个 dataframe 再 concat 【 不 推荐 append ， 一行行 append 不 推荐 】 。   很多 类似 数据 源 ， 多个 csv 文件 ， 结构 df 合并 操作 。 推荐 concat 来做 ， append ：   pandas nlargest 排序 取前 几个   找 几个 值 ， 推荐 Dataframe nlargest 方法 ， 方法 优化 了的 ， 简单 来说 快速 排序 前半部 分 ， 会更 高效 。   逐个 索引 操作 风格   尽量 apply   向量 操作 风格 最 高效   优化 建议 参看   篇 文章   ， 学习 下这 篇 文章 分析 测速 思路 。   pandas 列的 值 操作 ， 逐个 索引 风格 ：   很 慢 ， 代码 不 。   iterrows   写法 ：   逐个 索引 稍微 好点 ， 不 。 apply 写法 稍微 好点 ， 尽量 不 ：   pandas   最 高效 操作 风格 向量 式 操作 ， 定义 函数 习惯 numpy 那种 ndarray 向量 操作 风格 ， 函数 支持 ：   写法 numpy 东西 ， 向量 操作 很 熟悉 ， pandas Series 对象 传递 即可 。   向量 式 写法 优化 了的 apply 写法 ， 快了 56 倍 。   numpy ndarray 对象 ， 速度 还 提升 4 倍 ：",
            "tags":"others",
            "url":"articles/gao-xiao-numpyhe-pandas.html"
        },
        {
            "title":"pandas模块",
            "text":"本文 pandas 模块 核心 概念 。   入门   pandas 最 核心 两个 数据结构   Series   类和   DataFrame   类 。 DataFrame 会 用的 偏 多一点 ， Series 相当于 一维 情况 下较 简单 DataFrame ， 会 用到 。 本文 重点 讨论 DataFrame 类 。   DataFrame 很 常用 是因为 数据结构 太 常见 ， excel 中 ， csv 中 ， sql 中 ， 来源 数据 都 汇总 DataFrame 数据结构 ， 数据处理 ， 包括 送入 机器学习 深度学习 模型 中 去 。   读写 文件 支持   pandas io 子 模块 写 得很 便捷 ， 实际上 python 程序员 在做 数据处理 ， 都会 调用 下 pandas io 来做 读写 操作 。   大体 函数 ：   read _ csv   _ csv   read _ json   _ json   read _ html   _ html   read _ excel   _ excel   read _ sql   _ sql   ， html 读写 网络 抓取 上 有用 ， 很 强大 ， 推荐 工具 来做 ， sql 操作 简单 点 pandas 接口 ， 稍微 点 推荐 sqlalchemy 来做 ， 写 代码 可读性 更好 ， orm 层 接口 更 便捷 写 ， 代码 全是 大堆 sql 语句 ， 总 太 。   读 csv 文件   实际上 更 常 txt 文件 ，   read _ csv   函数 来读 ， 做 额外 配置 ，     例子 ：   sep   设置 读取 csv 时 字 段的 分隔 ， 默认 逗号 ， 过是   \\ t   分隔符 情况   header   默认 取 csv 第一行 df 数据 列的 列名 ， 设置   names   ， 手动 指定 列名 ， header 相当于 设置 None ， header 设置 None ， 读取 第一行 列名 。   read _ csv   很多 选项 ， 应付 初步 加载 csv 数据 df 内是 没 。   读 excel 文件   利用 pd . read _ excel 来读 excel 文件 数据 ， 功能 安装   xlrd   模块 。   读取 html 网页   读取 html 网页 分析 网页 table 标签 所在 ， 刷 table 数据 填充 df 去 。   read _ html   一个 是它 会 自动 分析 数值 并将 转 成 整型 、 浮点 型等 ， 网页 数据 很 规范 ， 自动 转换 很 不合 心意 。   情况 后 ， 分析 源码 后 发现   read _ html   函数 接受 额外 参数 ，   dtypes   传递 进去 ， 有个 过程 会 判断 dtypes   传递 进来 ， 自动 试着 判断 数据 类型 ， 数值 型 。 定制 read _ html 函数 ， 简单 来说 copy 原 代码 加上   * * kwargs   传递   _ parse   。 ：   控制 数据 都是 字符串 ， 参考   网页   。   执行 sql 查询 语句   pd . read _ sql   来从 sql 查询 语句 中 获取 数据 ， 第二个 必 填 参数 conn ， 利用 sqlalchemy ：   创建 DataFrame 对象   从文件 读写 创建 DataFrame 对象 外 ， 还 DataFrame 类来 生成 DataFrame 对象 ， 所示 ：   加载 python 对象   支持 python 对象 字典 ， DataFrame 。   操作 DataFrame 思路 更 偏向 一行 一行 ， 类似 numpy ndarray 结构 数据 转成 DataFrame 对象 ：   再 ：   新建 一个 随机数 填充 DataFrame   新建 一个 DataFrame 对象 ， 随机数 填充 6 行 4 列 ， 列名   [ ' a ' , ' b ' , ' c ' , ' d ' ]   。   例子 还 演示 列名 不用 默认 0   1   ， 去 指定 。   选择 合适 时机 转入 DataFrame   选择 一个 合适 时机 python 数据 转入 DataFrame 中 ， 越早 越 好 。 DataFrame 更 快更 适合 矩阵 操作 ， 元素 都要 操作 。 python 数据 ， 更改 操作 ， 一行 ， 一列 操作 ， DataFrame 会 发现 很 不 。   DataFrame 基础   DataFrame 转 ndarray   计算 希望 ndarray （ numpy ） 形式 （ 引入 DataFrame 是因为 label 列 数据 含义 功能 ， 到了 底层 算法 ， 特征 1234 ， 不再 关心 特征 名字 ， 数据 退化 numpy ndarray 数据 类型 就很 ， 底层 算法 层不 在意 ， 第二 numpy ndarray 对象 常见 算法 包括 新 tensorflow 很 对接 。 ）   ， 简单 ：   参考   网页   。   DataFrame 列重 命名   创建 DataFrame 对象 时   columns   参数 设置 列名 ， DataFrame 对象 创建 ， 还 所示 修改 列名 。   DataFrame append 操作   现有 Datafrme 额外 添加 一行 几行 数据 ， 操作 很 。   字典 形式 ， 带上   ignore _ index = True   参数 。 还 append   pandas   Series 对象 ， Series 对象 属性 ， 插入 新的 一行 index 名字 ， 带上   ignore _ index = True   参数 。   索引   列名 选择   定义 列名 ， 选择 一列 列名 是最 直观 ：   返回 Series 对象 ， 原 DataFrame 对象 index 保留 ， DataFrame index 是有 名字 ， 索引 名字 。   引用 用于 添加 一列 删除 一列 ：   列名 选择 多个 列   一个 copy ！   iloc 方法   喜欢 矩阵 那种 几行 几列 单元 格的 描述 ， 很 喜欢   df . iloc [ i ] [ j ]   形式 索引 单元 格的 数据 ， i 行 j 列 ， column 指定 数字 ， 0 ， 引用 0 就会 索引 异常 【 列名 数字 类型 】 。   唯一 线性 代数 行列式 下标 有所不同 ， 索引 都 是从 0 计数 。   索引 选择 多个 列   选择 多个 列 【 切片 式 】   种 写法 【 列举 式 】 ：   对某 特征 列 运算   DataFrame 中的 特征 列 ， 其为 Series 对象 ， 推荐   map   方法 :   参考   网页   ， apply 方法 作用 方向 为行 列 ， apply 方法 针对 dataframe 对象 整体 操作 。   搜索 语句   DataFrame 搜索 语句 来对 针对 特征 列的 值 判断 ， 过滤 掉 行 。   行 排序   列 排序   绘图 相关   绘制 散点 图   数据 记录   x   列 （ x 参数 指定 ）   y   列 （ y 参数 指定 ） 一一对应 数据 ， 绘制 散点 图 。",
            "tags":"others",
            "url":"articles/pandasmo-kuai.html"
        },
        {
            "title":"tensorflow模块",
            "text":"前言   文档 记录 tensorflow 模块 学习 中的 东西 。   tensorflow 通用 数据流 计算 图 框架 ， 都会 写上 一个 简单   world 例子 简单 目标 框架 ：   tf . constant   一个 常量 ， 简单 理解 相当于 一个 输出 数值 节点 。 hw 两个 常量 相加 ， 相当于 连接 两个 节点 执行 相加 操作 。 tensorflow 有个 计算 图的 概念 ， 计算 图中 ， 计算 session 回话   run   才会 执行 ：   神经网络 结构   神经元 中的 数据 ， 输入 ， 常数 ， 其后 神经元 数据 则是 数据 流动 中 生成 。   神经元 连接 权重 矩阵 ， 节点 神经元 中的 数据 值   =   前 输入 层   *   权重 矩阵 ， 数学 公式 表达 更好 ：   $ $   data   =   \\ begin { bmatrix }   x1   &   x2   &   x3   \\ end { bmatrix }   \\ begin { bmatrix }   w1 \\ \\   w2 \\ \\   w3   \\ end { bmatrix }   $ $   第二个 神经元 权重 第二 列 展开 ，   一层 一层 之间 连接 矩阵 乘法 ，   前 一层 输出 后 一层 第一个 输入 参数 。   变量     tf . Variable   定义 一个 变量 ， 变量 相当于 一个 节点 其内 数据 值是 变动 。   tf . assign   手动 变量 赋值 。   placeholder   tf . placeholder   占位 节点 ， 常量 相比 节点 暂时 还 数据 ， 是等 session   启动   feed _ dict   数据 塞 进去 。 外面 数据流 输入 输入 placeholder 。   tf . placeholder ( dtype ,   [ None ,   dim ] )   None 是不 输入 数据 ， dim 指定 输入 数据 个数 。   初始 变量",
            "tags":"others",
            "url":"articles/tensorflowmo-kuai.html"
        },
        {
            "title":"sklearn模块",
            "text":"前言   sklearn 很多 内容 机器学习 相关 文章 中都 提及 ， 拾遗 性质 。   sklearn pipeline   Pipeline   用来 创建 sklearn 数据处理 流 模型 ， FeatureUnion 整合 多个 特征 。   sklearn pipeline 数据处理 管道 流的 万能 灵药 ， 说 数据处理 流都 写成 pipeline 模式 。 实际上 pipeline transformer estimator 都有 限定 ， 贯穿 数据处理 始终 ， 是很 不 。   pipeline 组件 接受 X ， 机器学习 中 数据处理 核心 数据 矩阵   调用 pipeline   fit     predict 方法 一套 固定 作业 模式 ， 简单 来说 机器学习 中 常见 训练 测试 数据 格式 模式 。 fit ,   transformer     fit     transform 方法 都要 执行 ， 两个 方法 接受 X   ， transformer transform 方法 返回 X 是下 一个 transformer fit 接受 X 。 pipeline predict 方法 ， transformer transform 方法 都会 执行 ， 再 执行 estimator predict 方法 。   套 固定 作业 模式 ， 机器学习 监督 学习 ， 普适 性的 ， 利用 pipeline ， 数据 预处理 缩放 整合 进来 ， 调用 pipeline 大 模型 predict 方法 ， 输入 原始 test 数据 即可 ， 是很 便捷 。 脱离 领域 ， 数据处理 需求 ， 再 来死 套 作业 模式 ， 不合时宜 。   用上 sklearn pipeline 建模 核心 算法 ， 不得不 提   GridSearchCV   参数 优化 选模 。   train _ test _ split   跟着 老 旧 教材 学习 ， 就会 发现 sklearn   train _ test _ split   函数 真的 。 函数 很 实用 ， 后期 引入 pipeline 概念 ， 都 先 训练集 测试集 分开 ， 才是 机器学习 核心 算法 。   值得一提的是 ：   train _ test _ split   输入 dataset pandas DataFrame ， 返回 train _ data   pandas DataFrame 数据 类型 。   K 折 验证   sklearn 提供 K 折 验证 很 实用 。   K 折 验证集   K 数据 输入 组合 ， 组合 一部分 验证集 ， 训练集 ， 验证 训练 比例 1 :   k - 1   组合 间 验证集 选择   选定 好 K 折的 系数 K ,   输入 数据 集 。   交叉 验证",
            "tags":"others",
            "url":"articles/sklearnmo-kuai.html"
        },
        {
            "title":"alembic模块",
            "text":"alembic 模块 ， 读者 熟悉 django ， 类比 django makemigrations migrate 相关 命令 ， 简单 来说 ， 管理 数据库 版本 ， 数据库 迁移 工作 。 数据库 操作 频繁 ， 读者 就会 慢慢 感受 数据库 迁移 管理 必要性 ， 实际上 读者 会从 不 东西 代码 版本 控制 ， 主动 要将 代码 版本 控制 。   更 alembic 请 参看 官方 文档 ， 概念 说 。     初始化 alembic 项目   当前目录 下会多 一个   alembic . ini   文件 ， 配置 文件 很多 配置 ，   sqlalchemy . url   是必 配的 。   models . py   类似 django   models . py   文件 定义 模型 ， 利用 sqlalchemy 模块 定义 模型 文件 ， 模型 文件 定义 ， 利用 alembic 自动 数据库 更改 ：   定义 好   alembic   文件 下的   env . py     target _ metadata   变量 ：   其会 自动 生成 版本 控制 py 文件 ，   upgrade     downgrade   操作 。   升级   管理 多个 模型 文件 ， 多个 表格 对象 ， 更 细节 请 参看 官方 文档 ， 时间 本文 会 详细 补充 。   TODO 。",
            "tags":"others",
            "url":"articles/alembicmo-kuai.html"
        },
        {
            "title":"matplotlib模块",
            "text":"前言   数据 绘图 一文 简单 介绍 了下 jupyter   notebook   下 绘制 简单 直线 图 、 饼图 ， 本文 matplotlib 模块 绘图 综合性 简要 介绍 。   简单 例子 ， 画出 散 点图 ， 简单 直白 大堆 参数 调配 都 ， 人 迷惑 。 matplotlib 模块 还 PyQt wxpython 等后 端 高级 功能 ， 最 急切 想要 理解 matplotlib 模块 到底 做 事情 ， 常规 操作 ， 对外 数据 接口 。   调配 中文 字体 支持 ， matplotlib 模块 外围 操作 ， 绘图 前 就要 调配 ：   pandas 绘图 接口 操作 发现 ， 传递 x ， y 数值 进去 外 ， 还 传 一个   ax   变量 ， ax 变量 matplotlib 绘图 中   axes   概念 。 matplotlib 绘图 是先 一个 figure   图表 对象 ， 一个 figure 一个 多个 axes   坐标系 。 一个 axes x   y   多个 axis   坐标轴 。   官方 教程 给出 ， 说 需求 ， 数据 绘制 大致 图形 ， 推荐 函数 编写 风格 ：   外围 ax 输出 采用 语法 ：   一幅 图含 一个 坐标系 ， ：   一幅 图含 两个 坐标系 ， 坐标系 布局 1row ， 2   col   。   一幅 图含 两个 坐标系 ， 坐标系 布局 2row ， 1col   。   常   plt . show ( )   外围 语句 ， 是将 图形 屏幕 上 显示 ， 设置 好 backend ， 比如说 jupyter   notebook   上 设置 好 ：   不用 一句 图形 会 显示 。   建议 查看   Axes   源码 参考 定制 ：   写的 如同 内置 方法 ， 更 多的 情况 简化 定制 ， 会更 实用 。   一个 简单 折线 图 函数   ：   数据 绘图 基本上 分离 。   看下 两个 坐标系 情况 ：   所示 ， matplotlib 越玩 越 熟悉 ， 不再 推荐 pandas 绘图 接口 ， 统一 到你 定制 接口 中 去 ， 慢慢 绘图 函数 ， 参数 调配 风格 ， 会 越来越 是你 喜欢 那种 样子 了的 。   接触 几个 绘图 都转 成 通用 函数 风格 学习 matplotlib 绘图 入门 。   饼图   水平 条形 图   直方 图   散点 图",
            "tags":"others",
            "url":"articles/matplotlibmo-kuai.html"
        },
        {
            "title":"奇点书虫",
            "text":"屏幕 上 汇出 轨道 路线图 ， 竟然 横跨 大半个 星系 ， 终点 一个 漩涡 般的 奇点 。   开启 光速 运动 模式 ， 休眠 仓 。 飞船 好像 道光 打出 一个 完美 椭圆 轨道 线 。   飞船 很 靠近 漩涡 般的 奇点 。   开启 手动 飞行 ， ， 成功 穿过 奇点 一件 令人 提心吊胆 事情 。   精神 高度 紧张 ， 眼睛 浮现 技术 参数 ， 时不时 飞行 上的 调整 。   飞船 晃了 ， 变得 好像 飞行 方向 漫无 目的地 漂游 。   飞船 上的 重力 系统 失效 ， 实际上 穿越 奇点 最 关键 几秒 飞船 上的 智能 程序 会将 飞船 都调 停电 状态 。 慢慢 飞船 上的 智能 程序 打开 路灯 。 安提 娜 说道 ： 长官 ， 飞船 系统 都 运行 ， 重力 系统 将在 几分钟 后 恢复 ， 穿越 奇点 很 顺利 。   颗 悬 着的 心 变得 愉悦 ， 回应 ： ， 谢谢 ， 安提 娜 。   飞船 重力 系统 启动 ， 站 正 去喝 杯 饮料 ， 一个 东西 撞了 飞船 ， 声音 很 沉重 。   奇点 书 虫的 相遇 ， 很 偶然 ， 称之为 奇点 书 虫的 缘分 。   还 名字 ， 实际上 不 官方 名字 ， 看 形状 一个 老 乌龟 ， 一个 惯于 沉默 老 乌龟 。 一个 太空 中 漂浮 着的 老 乌龟 ， 上天 旨意 ， 客厅 养了 ， 马上 到它 一个 神奇 能力 ， 飞船 客厅 变得 很大 很大 ， 飞船 外面 来看 ， 安提 娜 报告 飞行 数据 来看 异样 。   老 乌龟 刚上 飞船 都很 好奇 ， 左 东 闻闻 ， 安分 不少 ， 安提 娜 说话 抬起 头很 感兴趣 样子 ， 过了 一段 时间 倦怠 。 客厅 上 读书 ， 老 乌龟 竟然 凑了 上了 ， 边听 还 显得 很 兴奋 地摇 尾巴 ， 好玩 。   奇点 上的 观察 繁重 ， 无暇 顾及 老 乌龟 ， 偶尔 老 乌龟 倦怠 懒 懒的 样子 ， 不 太 在意 ， 穿过 客厅 ， 听到 一个 奇怪 声音 ， 声音 好像 飞船 外面 传 ， 吓了 跳 ： \" 人类 ， 读书 听 ， 信息 ， 信息 。 \"   相处 时光 中 ， 很 艰难 地和 只 老 乌龟 交流 ， 终于 拼凑 出 事实 ： 大概 很 久很 久 ， 估计 不 太 ， 两个 环绕 运动 行星 ， 轨道 竟然 发生 偏离 发生 碰撞 ， 碰撞 过后 两个 行星 环绕 而行 ， 撒 下了 一圈 行星 带 ， 老 乌龟 行星 带 一个 石头 。   发现 老 乌龟 世界 信息 很 痴迷 ， 痴迷 不 像是 一种 喜好 ， 更 像是 吃 东西 。 老 乌龟 长时间 吃 不到 信息 就会 陷入 类似 石头 那种 都不 动的 状态 ， 吃 到了 很多 信息 ， 精神 会变 好 ， 还 变得 很 健谈 ， 健谈 指的 于他 来说 。 而从 安提 娜的 扫描 数据 来看 ， 吃 信息 身体 石头 般的 构造 多了 类似 血管 般的 东西 ， 流动 。   到了 ， 说的 世界 信息 ， 包括 世界 过了 小说 电影 都是 ， 那种 世界 相 违背 信息 ， 随便 胡诌 自相矛盾 话语 ， 扫描 数据 来看 效果 。 提出 一个 假说 ， 只 乌龟 吸收 信息 都会 汇总 ， 慢慢 一个 信息 世界 ， 信息 世界 聚集 成 一股 信息 能量 ， 体内 流动 东西 。 信息 世界 兼容 信息 汇聚 不 。 会 特别 挑食 ， 只 吃 世界 信息 ， 不 太 ， 也许 缘分 。   说起 老 乌龟 取 名字 ， 大概 是在 教 安提 娜 互动 ， 有趣 发现 整晚 整晚 地在 听 书 ， 加上 想到 吃 信息 这件 事 ， 实在 配的 上书 虫 称号 。   这次 奇点 世界 科考 还 算 顺利 ， 分配 探测 繁杂 枯燥 ， 帮 科学家 坐在 办公室 喝着 咖啡 ， 聊聊天 ， 数据 ， 随便 折腾 几下 一篇 论文 发表 ， 说 ， 这次 探测 报酬 还 行 ， 。   带着 奇点 书虫 回来 马上 发现 奇点 书 虫的 妙用 ， 飞船 荷载 量 翻了 几倍 ， ， 客厅 改造 成了 园林 ！ 假山 ， 喷泉 。 还 腾了 很大 一部分 空间 用于 飞船 仓库 ， 运输 快递 收入 都翻 倍了 。 成本 ， 会 饶有 趣味 主动 奇点 书虫 说话 ， 谈谈 世界 事情 。   段时间 奇点 书虫 打交道 很 频繁 ， 发现 奇点 书 虫在 吃 很多 世界 信息 表皮 变得 不 石头 皮肉 ， 扫描 数据 来看 奇点 书虫 体内 血管 般的 管道 错综复杂 细化 遍布 全身 。 血肉 化的 过程 紧张 ， 加上 奇点 书 虫给 带来 好处 ， 怕 过程 会让 奇点 书虫 一个 类似 世界 常见 那种 生物 乌龟 ， 很 自私 奇点 书 虫的 信息 摄入量 。   不想 辩解 ， 不 血肉 化 表象 暂时 ， 读者 ， 看重 利益 ， 利欲熏心 ， 如果说 奇点 书 虫的 未来 ， 希望 再过 段时间 再 奇点 书虫 送回 奇点 去 ， 才 家和 归宿 。",
            "tags":"novel",
            "url":"articles/qi-dian-shu-chong.html"
        },
        {
            "title":"C语言学习笔记",
            "text":"前言   教程 参考   github 样例 项目   阅读 更 。   C 语言 开发 环境   windows 下 推荐 visual   studio ， C ++ 开发 环境 ， C ++ C 语言 超 集 ， 支持 。 选择 新建 空的 C ++ 项目 ， 添加 项的 记得 默认 后缀   . cpp   改为   . c   。   不想 visual   studio ， 老实 说 初学者 真的 不 推荐 立刻 入手 visual   studio ， mingw 官网 下载 mingw ， 提供 gcc windows 移植 版 。   本来 打算 一块 再 讨论 ， gcc   编译   链接 知识 ， ， 越 积累 越 多了 。 假设 读者 安装 mingw ， 设置 好   PATH   系统 变量 。 读者 cmd powershell 输入 gcc 是有 。   一个 简单 helloworld 程序 一般来说 稍微 熟悉 下 gcc 出 ：   本文 讨论会 提到 编写 头 文件   myhead . h     myhead . c   ， 这块 会 讨论 ， 最 简单 程序 ：   gcc 编译 报错 找 不到   print _ name2   函数 。   myhead . h   myhead . c   都在 文件夹 下的 ， 道理 gcc 编译器 include 是没 出 ， 报错 说了 ld 链接 出了 。   一个 C 程序 源码 编译 机器 码 ， 是将 机器 码 文件 链接 可执行文件 。 简单 来说 一个 C 程序 编译 链接 两个 过程 才能 一个 可执行文件 。 visual   studio 不 做 调配 ， 会 自动   myhead . c   编译 进去 ， gcc 不行 。 ：   编译 成功 ， 太 丑陋 。 官方 内置   stdio include 一个头 文件 ， c 文件 不 编译 ？ 操作系统 内置 库的 c 源文件 都 编译 成库了 ， 有的是 静态 库 ， 有的是 动态 库 ， 讨论 中 重点 。 静态 库 举例 ， 过程 ：   ar 命令 时间 再 ， 简单 理解 一个 打包 程序 ， c 源码 文件 编译 成了 o 机器 码 文件 ， ar 命令 o 机器 码 文件 打包 一个 静态 库 文件 。 静态 库 文件 名字   libwhat . a     lib     . a   都是 固定   ， 等下 链接 静态 文件 就要 gcc 上 加上 选项 ：   - l   myhead   。 实际上 gcc 本来 支持 多种 来源 混合 输入 ：   gcc 编译 命令 ：   选项 都写 ， 纠结 好久 ， 才 发现 选项 写在 gcc 刷 参数 正确 。 ， 讨论 。   - L   .   告诉 gcc 新 库的 搜索 路径 ， 工作 路径 管的 。   stdio . h 正确 工作 ， 库 本来 默认 搜索 路径 上的 ，   - l   库 加载 默认 会 自动 去 加载 ， 动态 库 。   做 修改 ， 模仿 mingw 文件夹 结构 ， 定义 头 文件 放入   include   文件夹 下 ， 生成 静态 文件 放入   lib   文件夹 下 ， 编译 命令 成了 【   - I   选项 告诉 gcc 额外 include 搜索 路径 。 】 ：   code 编辑器 ， 希望 一种 效果 ， 随便 写 一个   helloworld . c   文件 ， 编译 运行 。 默认   cpp 插件   调配 执行 编译 动作 ， 更 细节 请 参看 插件 官方 文档 ， 推荐   code   runner   插件 ， 说到底 希望 一行 命令 更 快捷 生成 执行 ， 默认 cpp 插件 麻烦 。 c 大概 做 修改 ：   右 键就 run   code 菜 单项 。   ， 会 编写 很多 c 源码 文件 h 头 文件 ， 源码 h 头 文件 include 进去 ， 实际上 编译 阶段 头 文件 include 进去 指示 头 文件 找到 ， 基本上 做的 事情 内容 copy 进来 ， 编译 动作 很少 ， 头 文件 预处理 相关 声明 。 预期 程序 中 包含 进来 c 源码 文件   gcc   - c   编译 成 o 文件 ， 说 动作 很多 库 早就 做 。   下 一步 链接 ， 收集 整理 o 文件 ld 链接 ， 提及 库 也许 gcc ， 链接 进来 ， 链接 进来 程序 预期 内容 就会 缺失 。   在将 段 叙述 完 改 主意 ， 学习 C 语言 都 先将 过程 详细 。   helloworld   最 简单 最 简单 版本 ：   定义 一个 函数 ， 函数 名 ，   main   ， 默认 程序 入口 函数 名 。 利用 printf 函数 打印 一个 字符串 ， printf 函数 引入 stdio 包 。   版本 稍微 做 修改 ： 相 helloworld 程序 多了 system 函数 ， 是让 屏幕 暂停 ， 屏幕 会 一闪而过 ， 会看 不 清 打印 字 。   C11 标准 推荐 main 函数 采用 写法 ：   头 文件   C 语言 源码 到可 执行程序   操作系统 平台 上 细节 ， 总会 分为 编译 阶段 【 C 语言 代码 转成 汇编语言 代码 】   链接 阶段 【 汇编语言 代码 汇总 】 ， 关注 编译 阶段 即可 。   编译 阶段 C 语言 编译器 写的 C 语言 源码 过程 ， 过程 中 ， C 语言 编译器 会 很多 工作 ， 推荐 C 语言 编译器 相关 工作 代码 汇总 写入 头 文件 中 。     #   开头 命令 都是 C 语言 编译器 预处理 过程 相关 命令 ，   # include   。   定义 宏   # define   命令 定义 一个 宏 ， 一个 简单 C 语言 编译器 预处理 阶段 文本 替换 操作 ， ：   提醒 一点 ， PI C 语言 中 讨论 常量 变量 ， 一个 文本 替换 操作 ， ：   实际上 源码 预处理 ：   python 类 动态 语言 很大 。   编写 头 文件   新建 一个   myhead . h   头 文件 ， 内容 ：   两个 包 反正 ， 先 一并 包含 进来 。   主 程序   main . c   ：   读者   # include   写法 上 差异 ， 简单 来说 尖 括号 包围 标准 库 系统 标准 目录 找到 ； 双引号 包围 先从 当前目录 寻找 ， 找 不到 再在 标准 系统 目录 下找 ， 操作系统 标准 目录 定义 略过 讨论 。   定义 函数   helloworld 程序 包含 很多 信息 ， 至少 刚 接触 C 语言 读者 来说 。 看完 helloworld 程序 ， 读者 C 语言 函数 写法 ：   更 多的 细节 再 慢慢 讨论 ， C 语言 一个 很 简单 语言 。   C90 新增 函数 原型 概念 ， ：   函数 原型 ：   函数 原型 函数 声明 ， 告诉 编译器 函数 ， 函数 声明 语句 放在 头 文件 中 。   头 文件 函数 原型   描述 ，   myhead . h   文件 加上 ：   新建 一个   myhead . c   文件 ， 函数 定义 ：   main . c   定义 add 函数 即可 。   数据 类型       printf 输出   int   整型   % d   float   浮点 型   % f   【 % e 指数 】   char   单 字符 型   % c   long   长整 型   % ld   double   双 浮点 型   % f   【 % e 指数 】   _ Bool   布尔 型   % d   C 语言 char 单 字符 型是 用单 引号 ：   C99 新增 _ Bool 布尔 型 ， 实际上 一种 整数 型 ， 0 false ； 1 true 。   自动 类型 转换   C 语言 数据 类型 运算 ， 会 发生 自动 类型 转换 情况   char   - >   int   int   - >   double   ， 包括   char   - >   double   。   强制 类型 转换   强制 类型 转换 不 影响 原 变量 ， 运算 时的 截取 操作 ， 四 舍五 入 。   计算 最大公约数   除法 求 余数   演示 下 除法 求 余数 ， 加法 减法 乘法 很 直白 。   取 余数 ：   a   %   b     b   %   a   返回   a b 两个 数中 最小 更 小的 数 ， 假设 a b 大 ，   a   %   b   相当于   a   -   b   一个 正数 ，     b   %   a   返回   最小   b 。   欧几里得 算法   小节 参考 维 基 百科   欧几里得 算法 ， 程序 很 ， 关键 理解 算法 思想 。 欧几里得 算法 最 核心 思想 ：   两个 数的 最大公约数 等于 小的 数和 两个 数的 差的 最大公约数 。   简要 证明 ：   过程 记作 ：     b 小的 ，   a - b   小的 ， 过程 会 两个 数 越来越 小 。   举例 ：   递归 写法 是最 直观 写法 ， 基本上 定义 程序 ：     a   %   b   取余 保证 最小 更 小的 数 ， 。   辗转 相 除法 ， 网上 有了 ：   基础 知识   加减乘除 不 说了 ， 语言 ， 简单 下 即可 。   sizeof 函数   返回 目标 对象 bytes 大小 ， 返回   size _ t   类型 ， 实际上   unsigned   int   类型 ：   布尔 值   推荐 stdbool 包 ， bool 称为 _ Bool 别名 ， 还 true false 。 再 0 1 布尔 值了 。   fabs 函数   fabs 函数   math . h   库 ， 接受 一个 浮点 数 ， 返回 浮点 数的 绝对值 。   规范 循环 语句   python 语言 引入 迭代 对象 概念 循环 语句 简单 ， 常规 语言 语句 都 建议 写法 上 遵循 规范 ：   目标 对象 索引 计数 规范 都 是从 0   终止 判断 小于 目标 对象 索引 长度   标准 写法 ， 一个 目标 对象 索引 0 一位 循环 。   getchar 函数 putchar 函数   两个 函数 来自   stdio . h   库 ， 一个 接受 一个 字符 ； 一个 打印 一个 字符 ， 相当于 scanf printf 针对 字符 精简 mini 版本 。   ctypes . h 库   ctypes . h   库 提供 单个 字符 测试 函数 ：   isalnum   是否是 字母 数字   isalpha   是否是 字母   isblank   是否是 空白 字符 【 空格   水平 制表 符   换行符 本地化 空白 字符 】   isdigit   是否是 数字   islower   是否是 小写   isupper   是否是 大写   isspace   是否是 空白 字符 【 空格   换行符   换页符   回车 符   垂直 制表 符   水平 制表 符或 本地化 空白 字符 】   isprint   是否是 打印 字符   ispunct   是否是 标点符号   转换 字符 函数 ：   tolower   转成 小写 字母   toupper   转成 大写字母   字符串 数据 类型   字符串 确切 来说 一个 字符 型 数组 ，   ' \\ 0 '   结束 ，   \" sam \"   存储 值 所示 ：   C 语言 数组 初始化 支持 形式 写法 ：   C 语言 数组 初始化 支持 自动 计算 数组 大小 ， 代码 还 简化 ：   双引号 括 内容   字符串 常量     字符串 字面 量   ， 编译器 会 自动 加上   \\ 0   字符 。 字符串 常量 用法 ：   编译器 字符串 常量 会将 存入 内存 ， 只 存 ， 存储 静态 存储 区 。 程序 代码 ， 会 新建 一个 数组 ， 才 静态 存储 区 字符串 常量 数据 拷贝 。 C 语言 一种 利用 指针 方法 ：   是将 字符串 常量 地址 拷贝 指针 ， 内存 两个 拷贝 。   分析 看的 数组 数组 ， 指针 指针 ， 好 纠结 ， 总 喜欢 讨论 数组 名 指针 ， 上 ， 最 简单 回答 ， 数组 名 存放 地址 固定 ， 指针 存放 地址 随意 变动 。 没什么 好 纠结 。   两种 表达 选择 ， 参考 资料 1 给出 建议 字符串 修改 操作 ， 数组 表达 方式 。   strlen 函数   strlen 函数   < string . h >   包 提供 ， 会 返回 字符串 长度 ， 所说 长度 是不 包括   \\ 0   字符 。   printf 函数   转换   % d   整型   % ld   long 长整 型   % o   八 进制 整数   % x   十六 进制 整数   % f   浮点 型   十进制   % e   浮点 型   e 记数 法   % c   单 字符   % s   字符串   % p   指针   %%   打印 一个 百分 号   printf 函数 格式 字符串 类似 python format ， 内容 挺 ， 再 慢慢 。 列出 几个 简单 实用 例子 ：   \" % 3.1 f \"   打印 一个 浮点 数 ， 字符串 宽度 3 ， 小数点 后 位数 1 位 。   \" % 10d \"   打印 一个 整数 ， 字符串 宽度 10 ， 左侧 空白 。   \" % 010d \"   打印 一个 整数 ， 字符串 宽度 10 ， 左侧 填充 0 。   scanf 函数   visual   studio scanf 会抛 出 错误 ：     myhead . h   加上 一行   ：   scanf 函数 两条 ：   读取 变量 类型 值 ， 变量 名 加上   &   读取 字符串 字符 数组 ，   &   ， 数组 名 即可 。   scanf 函数 接受 多个 输入 ， 空白 分隔 ， 读取 指定 数目 为止 。   % c   会把 空白 字符 读取 进来 。   转换   % c   字符 型   % d   整型   % e   % f   都 会转 成 浮点 型   % p   指针   % s   字符串   scanf 函数 类似 printf 支持 格式 修饰 符 ， scanf 函数 用的 特别 ， 实践 中 推荐   getchar     fgets   两个 函数 。   返回 值   scanf 函数 返回 值 ：   成功 读取 ， 返回 读取 项数 【 请求 输入 一个 % d ， 返回 1 】   读取 项 用户 输入 不 合乎 规范 返回 0 ,   scranf 检测 EOF 文件 结尾 ， 返回 EOF 【 - 1 】   指针   指针 一个 存储 内存 地址 变量 。 int 类型 存储 整数 ， pointer 类型 存储 内存 地址 。 指针 声明 ：   * 变量 是个 指针 ， int 指针 指向 地址 上的 值是 一个 int 值 。   相关 运算 符   &   运算 符是 用于 变量 内存 地址 ；   *   运算 符 用于 内存 地址 指针 名来 指针 指向 地址 上的 值 。   swap 函数   swap 函数 接受 两个 变量 值 ， 交换 两个 变量 值 ， 函数 C 语言 用到 指针 。   函数 值 是不 指针 参数 ， 目标 函数 改变 外围 调用 环境 中的 变量 值 ， 采用 指针 参数 形式 。   C   Primer   Plus 段说 好 ：   变量 值 量 ， 地址   &   运算 符 派生 量 ； 指针 地址 量 ， 值   *   运算 符 派生 量 。   假设 p1 指针 指向 变量 x ， ：     看做 等价 ， 说 指针 指向 变量 ， 暗含   * p   名字   x   一个 别名 。   数组   多维 数组   C 语言 支持 形式   matrix [ 3 ] [ 4 ]   多维 数组 ， 值得 。   c   int   x [ 3 ] [ 2 ]   =   {   { 1 , 2 } ,   { 1 , 2 } ,   { 1 , 2 }   } ;   本来 打算 编写 一个 简单 函数 先 打印 二维 数组 ， 竟 发现 还 很 。 一维 数组 情况 都行 ， 数组 名你 看做 一个 指针 ：   二维 数组 不 数组 名和 指针 无缝 转换 ， 建立 一种 二维 指针 数组 ， 过程 引入 太 多的 复杂度 ， 实在 一个 明智 选项 ； 就算 建立 函数 ， 二维 数组 列数 写死 。   变长 数组   概念 ，   变长 数组   visual   studio   是不 支持 ， 支持 计划 ， 特性 最新 C 语言 标准 打算 废弃 。     网页   一种   malloc   函数   自动 分配 二维 指针 数组 内存 方法 ， 其内 本质 二维 指针 数组 过于 东西 ， 不 喜欢 ， 玩法 还 引入   int   * *   p   东西 ， C 语言 指针 很 厌倦 ， 还 弄 两个 指针 ， 玩法 过于 不 推荐 。   一个 解决 方案 ， 方案 利用 C 语言 struct 结构 ， 优美 解决 方案 【 也许 一维 表达 很 丑 ， 实际上 计算机 内存 存储 一维 表达 结构 】 。 方案 抛弃 C 语言   x [ 3 ] [ 2 ]   表达 ， 回归 一维 数组 本源 ， 扩展 支持 方法 进一步 表达 分组 分行 内部 属性 。   结构 体在 函数 中是 传递 地址 ， 数组 名 数组 首 元素 地址 ， 一维 数组 传递 数组 名 对象 指向 指针 没 。 结构 体 看做 一种 内部 长度 不 一的 一维 数组 形式 ， 理解 做 可行 。 结构 体的 指针 引用 内部 对象 采用   m - > cols   写法 。 二维 数组 不行 是因为 计算机 只 传递 首 元素 地址 内部 数据 类型 ， 几行 几列 信息 丢失 了的 。   Flexible   array   member     structure   小节 参看   篇 文章   。 结构 体   int   data [ 0 ]   C99 引入 新 特性 ， Flexible   array   member ， 其在 一个 结构 体 ， 结构 体的 一个 成员 。 结构 体 lexible   array   member 之外 还 成员 。   NOTICE :   声明   int   data [ ]   写法 visual   studio ， gcc 默认 gnu11 试了 只能   int   data [ 0 ]   写法 才行 。   再谈 指针   谈论 ， 数组 名 数组 首 元素 地址 ， 编程 中 很多 指针 操作 都 作用 数组 名 ， 说 数组 名 指针 来说 存储 内存 地址 是不 变动 。 指针 操作 包括 ：   指针 加一   内存 地址 偏移 值是 增加 一个 存储单元 【 一个 数据 对象 】 ， int 加 4 字节 ， double 加 8 字节 【 讨论 数值 一个 假设 】 。 指针 声明 包含 类型 声明 ， 指针 偏移 计算 偏移 。 假设 一个 结构 体 指针 加一 ， 偏移 值 会 大 ， 偏移 一个 结构 体 数据 。   指针 减 类似 指针 加一 讨论 ， 不 赘述 。   利用 数组 名来 编程 中的 指针 偏移 操作 是很 ， 指针 数组 中的 两个 指向 指针 ， 相减 差的 绝对值 数组 中 两个 数据 之间 索引 差 。   C 语言 代码 编写 指针 滥用 ， 数组 名的 操作 ， 上 讨论 情况 ， 尽情 。     arr [ 1 ]     * ( arr + 1 )   一个 ，   arr [ 0 ]     * arr   一个 ， 行了 。   计算 数组 长度   C 语言 涉及 数组 操作 传递 一个 额外 长度 参数 ， 利用 宏 来将 第二个 参数 计算 工作 丢 程序 。   一个 带 参数 宏 ， ：   替换 ：   ， y 改为 结构 体 数组 不行 ， sizeof 函数 。   Matrix2D   不 大 ，   rows * cols   即可 。   const 保护 数组 中的 数据   数组 函数 中 传递 指针 ， 数组 修改 动作 修改 原 数组 ， 新建 一个 数组 副本 。 保护 数组 数据 不 修改 ， 修饰 符   const   。   字符串 操作   puts   _ s 函数   scanf 字符串 空格 就会 停止 ， 函数 用于 读取 整 行的 字符串 输入 ， 不 再 函数 ， 用户 输入 行的 字符串 【 未知 】 超过 程序 中 声明 存储 目的地 声明 长度 ， 就会 导致 缓冲区 溢出 错误 。 _ s 函数 相当于 版本 函数 ， 一个 简单 演示 例子 ：   参考 资料 1   谈到 行 输入 过长 ， 利用 fgets 函数 一个 函数 ， fgets 更 多的 针对 文件 io 读取 操作 ， 谈论 行 输入 大材小用 ， 利用 getchar 函数 一个 函数 ：   num 含义 字符 不 包括   \\ n   长度 ， 用户 角度 理解 看做 字符 数 。   strcat 函数   接受 两个 字符串 参数 ， 将后 一个 字符串 附加 到前 一个 字符串 上 ， 返回 前 一个 字符串 指针 ， 附加 动作 超过 前 一个 字符串 容纳 空间 。   strcmp 函数   两个 字符串 内容 ， 多余   \\ 0   会被 容忍 ， 内容 返回 0 ， 返回 非 0 。   strcpy 函数   接受 两个 字符串 参数 ， 将后 一个 字符串 内容 拷贝 到前 一个 字符串 上 ， 执行 拷贝 动作 内容 超过 前 一个 字符串 容纳 空间 。   字符串 排序   一个   strsort 函数 ， 接受 一个 字符串 数组 参数 数组 长度 ， 内部 动作 会把 字符串 数组 排序 。   strcmp 函数 返回 大于 0 值 第一个 字符串 机器 排序 【 字母 顺序 排序 】 在后 一个 字符串 。 一个 临时 排序 方案 ， 重点 。 排序 算法 选择 排序 ， 基本上 一轮 轮找 序列 最 值 ， 放置 。   特别 值得一提 一点   char   *   strings [ ]   叫法 字符串 指针 数组 ， 实际上 C 语言 字符串 数组 说法 ， 字符串 长度 不 不 C 语言 数组 。 字符串 指针 数组 实际上 存储 一系列 指针 ， 正是 ， 上 面试 一种 通用 交换 两个 指针 值得 swap _ pointer   函数 。 空 指针 操作 值得 特别 。   例子 swap _ int ， 是不 规范 ， 恰好 int 型 存储 指针 。 写   strings [ i ]   ， 不 规范 ， 打印 字符串 显示 ， 感到 奇怪 字符串 字符 数组 指针 指向 修改 ，   char   *   st     char   st [ ]   还 真的 没 区别 ， 程序员 自我 约束 下 ， 例子 来说 逻辑 清晰 角度 出发 ， 是要 传递 指向 字符串 指针 地址 进去 。   空 指针   一行 声明 一个 指针 ， 值是 0 【 0 指针 内存 存储 位置 ， 程序 分配 】 。   C 语言 编写 函数 如同 声明   void   *   void 类型 指针 ：   接受 随便 指向 类型 指针 。 函数 ， 接下来 针对 空 类型 指针 强制 类型 转换 ， ：     swap _ pointer   函数 例子 来说 ，   int   *   随便 选的 ， 操作 都是 针对 指针 存储 值 ， 指针 映射 值 。   进制 转换 例子   字符串 转成 数字 推荐   stdlib . h     strtol   函数 【 转成 long 类型 】 ，   strtoul   函数 【 转成 unsigned   long 类型 】 ，   strtod   函数 【 转成 double 类型 】 。 函数 相比 原   atoi   函数 ， 函数 还 指定 进制 位数 。   例子 引入 一个 ， 函数 返回 字符串 。 C 语言 字符串 操作 来说 ， 如同 strsort 函数 演示 ， 字符串 指针 传递 进来 ， 所示 ， 方案 是最 简单 ， 方案 。   一种 方法 ， 函数 内部 新 定义 字符串 ， 带来 一个 ， 函数 内部 块 声明 字符串 定义 ， 出了 函数 不 访问 了的 ， 返回 字符串 指针 ， C 语言 默认 变量 自动 变量 ， 访问 权限 熟悉 编程 语言 那种 块 作用 域 ， 伴随 块 作用 域 随之而来 是在 内存 管理 上 ， 变量 是被 自动 分配 释放 ， 简言之 ， 熟悉 那种 局部变量 概念 。 函数 内部 声明 字符串 ， 出了 函数 字符串 内存 清洗 掉了 ， 指针 访问 一个 内存 莫名 数据 。   看 函数 第二个 版本 ：   函数 版本 真的 返回 字符串 ， 字符串 是在 函数 内部 声明 ， 出了 函数 字符串 内存 没 清洗 掉 ， 是因为 加上   static   关键词 ， result 变量 成了   静态 变量   。 静态 变量 程序 运行 时 内在 内存 保留 着的 。   静态 变量 ， C 语言 跳出 变量 声明 传统 语法 ， 指定 内存 空间 。 内存 控制 浅 到深 C 语言 威力 所在 一把 双刃剑 ， 真的 明白 做 ， 做 更好 方法 ， 才 做 ， 默认 自动 变量 工作 ， 是不 纯粹 炫 技而 编写 那种 代码 。   文件 作用 域   讨论 ， 函数 内部 声明 局部变量 来说 【 C 语言 说法 块 作用 域 ， 写上 一个 花 括号 块 ， 声明 一个 变量 ， 变量 作用 域都 只 局限 块 ， 讨论 简单 ， 简单 说为 函数 内部 声明 局部变量 。 】 ， 程序员 变量 访问 域和 规则 都是 很 熟悉 。 一块 编程 语言 差别 不 大 。   C 语言 链接 过程 上的 差异 ， 两个 变量 声明 ：   两个 变量 都是 文件 作用 域 ，   giants   文件 都是 访问 ， 简单 称作 全局 变量 。   dodgers   文件 作用 域的 静态 变量 ， 一个 专业 称呼 内部 链接 ， 只 文件 函数 访问 ， 文件 内部 私有 。   一点 值得一提 ，   dodgers   文件 声明 ：   则该 变量 成了 外部 链接 变量 ，   extern   声明 告诉 编译器 变量 地方 声明 ， 程序 链接 过程 中就 会有 。   dodgers   文件 中也 访问 。   提到 全局 变量 情况 文件 ， 做法 推荐 加上   extern   关键词 ， 增加 程序 清晰 性 。   寄存器 变量   寄存器 变量 声明 告诉 C 编译器 变量 会 频繁 用到 ， 放入 寄存器 ， 仅仅 加速 用的 ， 变量 属性 等同于   int   c   。   malloc free   malloc 函数 手工 声明 一个 内存 空间 ， 记得 free 内存 空间 。 本文 暂时 略过 ， ， 那种 确实 不得不 malloc 函数 情况 才 。   命令 行 参数   编写 程序 上 编写 接受 命令 行 参数 ， argc 接受 参数 个数 ， argv 参数 字符串 指针 数组 ， argv [ 0 ]   程序 名字 ， 参数 。 命令 行 参数 写法 对接 都 熟悉 通用 接口 ，   Github 项目   给出 一个 版本 。 做 简化 。   简化 getopt 逻辑 挺 多的 ， 刷 参数 接口 。   初看 项目 代码 知识 补充 ， 头 文件 ：   C 语言 预处理 条件 编译 语句 。   一种 常用 本宏 包 只 加载 手段 。   声明 是让 C ++ C 风格 声明 。   统计 文件 字数 程序   getopt 刷 参数 函数 编写 一个 简单 模仿 linux 系统 wc 命令 行 工具 ， 提供 三个 参数 选项 ：   - c   打印 字符 数和   - l   打印 行数和   - w   打印 词数 ，   - f   指定 输入 文件 。   例子 附带 介绍 C 语言 文件 操作 ， 很多 文件 操作 函数 ，   fprintf   函数 提到 过的   fgets     fputs   函数 ， 简单 即可 。   结构 体   结构 体的   结构 体 声明 才能 ：   声明 ，   struct   book   类似   int   声明 变量 ：   结构 体的 变量 初始化 所示 ：   C99 C11 还 提供 初始化 语法 ：   访问 结构 体的 成员 变量 采用   .   运算 符 ：   函数 参数 上 传递 结构 体 传递 结构 体 指针 ， 传递 结构 体 指针 采用 语法 访问 结构 体 成员 变量 ：   typedef   typedef   为某 类型 声明 一个 别名 ， ：   typedef 定义 结构 体 类型 会很 好用 ：   链表   LISP 语言 中 常见 链表 数据结构 ， 小节 参考   参考 资料 4   。 结构 定义 写法 很 清晰 ：   基础 上 ， 参考 资料 4 做 灵活性 拓展 ， 做 修改 有了   list . h   文件 ：   参数   # define   宏 介绍   SIZEOF   提到 。   list . c   文件 所示 ：   运行 文件 ：   链表 操作 动作 函数 ， 后续 时间 补上 。 定义 一个 数据结构 ， 一般来说 针对 数据结构 排序 查找 相关 动作 都要 配套 函数 跟上 。 面向对象 编程 风格 优点 缺点 。 优点 基础 配套 函数 写好 操作 接口 会很 简单 ， 缺点 引入 一个 新的 对象 数据结构 ， 就会 带来 一系列 代码 量和 工作量 ， 提升 项目 复杂度 。     enum   union   联合   一种 数据 类型 ， 能在 内存 空间 中 存储 数据 类型 ， ：   联合 数据 类型 存储 一个 int 类型 一个 double 数据 类型 。 分配 内存 空间 占用 空间 数据 类型 来的 。   更 声明   指向 函数 指针   参考 资料   C   Primer   Plus   第六 版 中文版   Practical   C   programming   Steve   Oualline   菜鸟 教程   计算机科学 基础   Alfred   V .   Aho   Jeffrey   D .   Ullman",
            "tags":"c_and_cpp",
            "url":"articles/c-language-learning-notes.html"
        },
        {
            "title":"hash分桶操作",
            "text":"hashlib md5 算法 实践 级别 算法 一个 很大 输出 位数 长度 固定 ， 很 下 一步 输出 再 分桶 操作 ：   个位数 相加 参考   网站   ， 个位数 相加 保证 分桶的 均匀 性 ， 老实 说 是不 大 确切 ， 做 一个 简单 测试 ：   初步 随机 生成 各种各样 字符串 最终 分桶 基本上 均匀 。 md5 算法 保证 位数 上的 随机 ， ord 数字 ， 相加 再 取模 ， 保证 均匀 性的 ， 只能 说 猜的 ， 数学 证明 。",
            "tags":"algorithm",
            "url":"articles/hashfen-tong-cao-zuo.html"
        },
        {
            "title":"安德鲁",
            "text":"机场 候车室 ， 正 接听 一个 电话 ， 一个 男孩 放 行李 座椅 上 ， 漫 无尽 心地 升了 一个 懒腰 ， 大衣 顺势 张开 。 太 多的 ， 但等 男孩 走了 一会 ， 发现 座椅 上的 毛衣 不见 。   赶忙 去追 男孩 ， 好在 男孩 还 没 跑 远 ， 拐角处 他了 。 大声 叫喊 着抓 小偷 ， 追 好久 ， 大概 是我 叫喊 周边 巡警 ， 一个 游乐场 店铺 ， 一个 警察 抓着 一个 正 。   警察 问 回事 ， 说 男孩 偷了 毛衣 ， 看 男孩 大衣 还 鼓鼓的 ， 伸手 打开 男孩 毛衣 ， 掏出 东西 ， 却 发现 一个 白色 未曾 见过 围巾 。 再 仔细 打量 男孩 时 ， 断然 找 不到 第二个 藏 毛衣 地方 。   就在 警察 摆 出 一脸 疑惑 神情 四处 张望 ， 游乐场 警察 ， 开着 碰碰 车 ， 碰碰 车的 有个 无比 轮胎 ， 占了 车子 一半 大小 ， 问 警察 干什么 。   警察 说 ， ， 平时 执勤 挺 辛苦 ， 会 玩玩 推 推 球的 游戏 。   警察 说 ， 算了 ， 没事 ， 刚才 看 错了 。   等那 警察 走了 ， 去 洗手间 ， 男孩 跟着 。 完 问 男孩 ， 。   男孩 说 来自 一个 地方 ， 地方 有个 狮子 雕像 ， 住的 地方 有个 花园 ， 花园 有个 喷泉 ， 整天 都在 喷水 。   说 ， ， 新加坡 。   问 男孩 ， 名字 。   说 安德鲁 ， 很小 离开 家乡 ， 闯荡 世界 ， 立志 偷 遍 全世界 。   说 句 要偷 遍 全世界 坚定 目光 竟然 感动 。 男孩 不 毛衣 掏 ， 接过 毛衣 ， 笑道 ： 地方 人 从小 教育 循规蹈矩 ， 厌倦 ， ， 请让 偷 遍 全世界 。",
            "tags":"novel",
            "url":"articles/an-de-lu.html"
        },
        {
            "title":"克里克",
            "text":"克里克 独自 面对 眼前 堆积如山 文献 遐想 ， 还 为他 研究生 论文 素材 。 想 老爹 没想到 克里克 考上 研究生 ， 克里克 研究生 快要 读完 ， 克里克 几年 研究 中也 确实 学到 不少 东西 ， 原本 那种 内向 气质 上又 加上 少许 木讷 ， 看上去 更 学者 味道 。 再 克里克 陷入 沉思 。   就读 观察 晶石 观察 文献 专业 ， 观察 晶石 几千年 前 人类 最 发现 ， 发现 散落 宇宙 中的 晶石 ， 晶莹剔透 ， 时不时 会 透出 景象 。 时间 空间 地点 未知 ， 观察 景象 呈现 出 一种 迷雾 般的 神秘 。 不 为人 关注 ， 早期 一代 一代 学者 做 针对 观察 晶石 中的 景象 观察 记录 工作 ， 一千年 前 ， 距离 观察 晶石 发现 两三千 年 ， 学者 艾伯特 浩瀚 史料 中 ， 时代 ， 观察 晶石 相关 文献 成了 史料 而被 记载 着了 。 发现 观察 晶石 景象 无 意义 幻象 ， 呈现 大 宇宙 中 无数个 小 宇宙 中 某处 发生 过的 景象 ， 提出 一种 假说 ， 光的 景象 信息 大 宇宙 中会 传递 ， 传递 遵从 某种 宇宙 时空 规律 ， 观察 晶石 无意 中 捕捉 到了 光的 景象 。   发现 学者 艾伯特 假说 反证 ， 观察 景象 一个 都在 科技 上 超过 时代 ， 时代 地方 发生 事情 。 学术界 对待 观察 晶石 景象 ， 与之 各种各样 研究 专业 ， 观察 文献 专业 算是 一个 热门 专业 。 针对 景象 中的 历史 文献 标的物 ， 汇总 整理 信息 试图 完整 复现 历史 文献 。 观察 晶石 研究 专业 说来 一门 历史 学科 ， 学者 艾伯特 做的 突破性 贡献 在于 ， 历史 史料 中 出了 大 宇宙 运行 规律 。 大 宇宙 运行 规律 ， 再来 定向 观察 历史 景象 时代 即将 发生 事情 做出 更好 预测 判断 。 讨论 涉及 到的 数学 公式 克里克 一知半解 ， 大概 宇宙观 学者 艾伯特 发生 改变 ， 宇宙 中的 一个 信息 景象 都是 相互 关联 ， 观察 晶石 中的 不起眼 事件 会和 一个 观察 晶石 一个 事件 。   克里克 想他 研究 课题 ， 研究 课题 中古 时代 学者 写的 著作 ， 著作 讨论 皇帝 皇后 妻妾 数量 之间 关系 学问 。 老实 说 克里克 不 著作 重要性 可言 ， 导师 课题 ， 说 复现 这本 文献 就算 研究 课题 ， 更 深刻 含义 是加 分项 。   克里克 研究 课题 相 算 简单 ， 来看 观察 晶石 呈现 学者 写得 篇 文献 前 几页 来看 ， 语言 宇宙 中古 英语 变种 034 号 。 克里克 运气 好 ， 人很 面对 一个 未知 变种 型号 ， a 符号 成了 奇怪 符号 ， 更 糟糕 差异性 更 大的 ， 偏离 宇宙 中古 英语 语法 都 ， 成了 未知 语言 ， 还 找 观察 晶石 语种 研究 人员 去 帮忙 。   研究生 毕业 课题 简单 一点 ， 克里克 心想 。 不 意味着 克里克 高枕无忧 睡 大 觉了 ， 完整 复现 观察 晶石 中的 一本 文献 一项 繁重 工作 ， 研究 人员 翻阅 观察 晶石 研究 同仁 著作 论文 。 会 意外 发现 观察 晶石 历史 资料 中 ， 恰恰 学者 书写 篇 著作 几页 景象 ， ， 观察 晶石 学 标准 论证 方法 去 证明 两段 观察 晶石 景象 相关性 。   观察 晶石 景象 是并 宇宙 次元 标的 ， 时空 标的 ， 一个 新的 观察 晶石 做的 第一个 工作 加上 宇宙 次元 标的 时空 标的 。 说 标的 描述 景象 真实 宇宙 次元和 时空 所在 ， 大致 参考 。 具体来说 针对 观察 晶石 中的 景象 一个 细节 扫描 ， 涉及 专业 资料 分析 索引 ， 好在 基本上 标准化 程序化 ， 新的 观察 晶石 景象 ， 克里克 只 国际 通用 程序 扫描 即可 。 一个 新的 观察 晶石 景象 都会 自动 上 传到 国际 晶石 学术 研究 资料库 ， 保证 程序 扫描 分析 宇宙 次元和 时空 标的 正确 ， 研究 人员 资料 分析 纠错 工作 ， 克里克 来说 资料库 说是 宇宙 次元和 时空 标的 ， 。   克里克 第一步 整理 工作 ， 中古 时代 学者 生平 景象 汇总 ， 克里克 做 完 。 克里克 查看 毕业 论文 第一章 工作 。   学者 写 第二部 著作 ， 克里克 研究 课题 《 皇帝 妻妾 数量 还 发表 一部 著作 ， 上古 时代 奴隶 角斗场 ， 大概 讨论 上古 时代 奴隶 角斗场 上的 表现 地位 分层 ， 克里克 半点 兴趣 ， 实际上 研究 课题 这本 著作 没什么 兴趣 。 第一章 工作 整理 汇总 ， 大概 简单 这部 著作 说的 个啥 ， 大概 皇帝 谨慎 选择 妻妾 数量 ， 太少 ， 太多 。 太少 不足以 彰显 皇家 威严 ， 太多 会 消耗 皇帝 精力 ， 床上 生活 上的 过于 内耗 ， 无暇 好 政事 ， 危及 国家 安危 。   克里克 翻阅 写 论文 ， 第二章 后世 学者 针对 学者 著作 讨论 ， 补全 著作 。 这部分 克里克 基本上 写完 。   克里克 往下 翻 ， 停止 鼠标 滚动 ， 第三章 算是 困难 ， 提到 观察 晶石 景象 有了 宇宙 次元和 时空 标的 ， 定位 准确 。 比如说 克里克 两个 学者 写作 第一章 序言 景象 ， 两个 景象 第一章 序言 文字 不尽 ， 研究者 做出 解释 。 克里克 写道 ：   \" 两个 景象 文字 对比 来看 ， 行文 含义 ， 辞藻 表述 上的 差异 ， 认定 两个 版本 两个 宇宙 两个 变种 版本 宇宙 中 作者 做出 表述 都是 。 \"   克里克 站 起身 活动 身子 ， 就要 面对 一个 难点 。 学者 第二章 里的 一段 文字 中 差异 ， 第一个 景象 写道   图库 纳斯 国王 皇帝 妻妾 数量 过少 大臣 宰相 娶 过多的 妻妾 ， 皇帝 心怀 不满 ， 参考 资料 46 5 章的 论述 佐证   ， 第二个 景象 写道   图库 纳斯 国王 皇帝 妻妾 数量 过多 疏于 政务 大臣 宰相 们对 心怀 不满 ， 参考 资料 46 5 章的 论述 佐证   。 来自 两个 宇宙 次元的 作者 写作 景象 ， 表述 差异 很大 ， 不 影响 两个 宇宙 次元 作者 写作 这本 著作 大的 思想 表述 ， 参考 资料 46 图库 纳斯 国王 讨论 截然不同 论证 。   克里克 写道 ： \" 图库 纳斯 国王 参考 资料 23 论述 一个 勤于 政务 皇帝 ， 后 一个 景象 某种 宇宙 变种 ， 参考 资料 23 3 章中 论述 ， 宇宙 次元 景象 标志性 差异 现象 观察 晶石 景象 XB120221 中 描绘 贪 狼 星的 亮度 徒增 现象 ， 宇宙 次元和 主流 宇宙 次元 差异 ， 图库 纳斯 国王 性情 大变 ， 变得 纵欲 荒废 政务 。 \"   克里克 写道 ： \" 观察 晶石 景象 CZ501051 中 作者 基尔 纳斯 写作 针对 参考 资料 46 引用 上的 差异 显示 观察 晶石 景象 处于 观察 晶石 景象 XB120221 一个 宇宙 次元 轻微 变种 中 。 \"   克里克 伸了 伸懒腰 ， 满意 地扫 一遍 刚才 写的 东西 ， 写的 差不多 。",
            "tags":"novel",
            "url":"articles/ke-li-ke.html"
        },
        {
            "title":"伟大的我",
            "text":"来到 一个 小 村落 ， 小 村落 旁 绿水 环绕 ， 远处 一座 小 山丘 ， 风景 甚 不错 。 迎面 跑来 一个 小女孩 ， 嘴里 时不时 喊着 ： \" 赫 米特 王 希望 ， 赫 米特 王 力量 \" 。 巴掌 小女孩 扇翻 ， 贱的 小女孩 ， 灵魂 早已 恶 势力 污染 ， 容忍 。 ， 村子 中央 有个 扩音 喇叭 ， 还 宣讲 ， 开头 两句 。 发射 一个 寒冰 箭 ， 小 技能 ， 随便 扩音 喇叭 摧毁 。   村民 渐渐 聚拢 ， 都在 高声 欢呼 ： \" ， ， ， 下 有救 \" ， \" ， 请向 宣示 ， 宣示 贵若 黄金 真理 \" 。   示意 安静 ， 说道 ：   \" 人人 皆 ， 感受 不到 内心 ， 是因为 出生 之日起 ， 不 ！ 娘胎 里起 ， 周遭 恶 势力 污染 ， 到来 来帮 铲除 恶 势力 。 到恶 势力 铲除 日 ， 亦将 ， 充满 力量 ， 使不 完 技能 ， 世界 历史 因果 皆 头脑 念 之间 ， ， 将都 。 \"   村民 再 发出 欢呼 ： \" 来了 ， 得救 \" ， \" 不 亏是 ， 善的 真理 \" ...... 人群 中 有人 眼中 饱含 热泪 。   ， 不远处 一个 村干部 带着 三四个 当地 恶霸 拿着 棍棒 赶了 ， 为首 高喊 ： \" 抓住 ， 抓住 反叛 分子 ， 重重 有赏 \" 。 人群 四散 逃 开了 ， 定了 定 准星 ， 一个 寒冰 箭 ， 倒了 一个 。 一个 寒冰 箭 ， 再倒 一个 。 村干部 跑到 身旁 ， 挥棒 ， 一个 招架 ， 再 发了 一个 寒冰 箭 ， 一个 喽 啰 倒 。 顺势 劈 砍 干部 ， 干部 一个 踉跄 ， 一个 寒冰 箭 ， 倒 。 剩下 来的 喽 啰 发觉 形势 不妙 ， 太迟 ， 一个 寒冰 箭 ， 倒地 不 起了 。   村民 再 慢慢 聚拢 ， 有个 年纪 稍 大的 说道 ： \" 感谢 ， ， 消灭 村里 恶霸 ， 仗势欺人 ， 无恶不作 ， 总算 报应 。 \"   说道 ： \" 还 报应 ， 报应 是下 十八层 地狱 。 \"   村民 回 道 ： \" ， 一事 相求 ， 就在 村子 东边 不远处 ， 一个 山洞 ， 住着 一个 怪物 ， 滋扰 村民 ， 抢夺 村民 庄稼 收成 ， 还 抢夺 村民 畜养 家畜 ， 害得 村民 夜不能寐 ， 希望 帮忙 消灭 怪物 。 \"   回 道 ： \" \" ， 接了 上路 。   去 东边 路上 小怪 ， 不值一提 ， 提到 小 山丘 ， 确实 有个 山洞 。 山洞 人造 一个 隧道 ， 早 年 失修 ， 大革命 时期 战争 时期 留下来 。 再 进去 一团漆黑 ， 点燃 火把 ， 山洞 滴 滴的 滴水 ， 甚 潮湿 ， 再 进去 一点 ， 周遭 墙壁 痕迹 来看 ， 动物 爪子 常年 累月刨 。   到了 一个 稍微 宽敞 点的 洞穴 ， 正 四处 打量 时 ， 只 听见 震耳 怪物 说话声 ： \" ？ \"   ， \" 来了 ？ \" 。 一个 寒冰 箭射 ， 正中 怪物 大 肚皮 ， 怪物 恼怒 ， 挥舞 一个 无比 皮鞭 ， 喊讲 着冲 ： \" 不 听话 ， 不 听话 ...... \" 。 不 ， 皮鞭 抽 中了 ， 很 疼 。 再 细看 ， 怪样 貌甚 丑陋 ， 似人 非人 样子 ， 皮鞭 抽 。 山洞 本来 地方 就不 大 ， 皮鞭 呼的 盖住 洞穴 四分之一 样子 ， 甚 棘手 。 再发 一个 寒冰 箭 ， 打中 怪物 大 肚皮 ， 怪物 肚皮 大呢 。 怪物 恼怒 叫喊 一声 ， 震耳 叫喊 脑袋 晕 晕的 ， 仿佛 有人 脑子 低语 ： \" 真 没用 ， 没用 东西 \" 。 才 雕虫小技 干扰 心智 ， 施了 一个 定神 法 ， 目标 ， 再发 一个 寒冰 箭 ， 打动 头部 ， 正中 要害 ， 怪物 就地 轰的 倒下 ， 化作 一堆 灰尘 ， 只 留下 一地 怪物 不 收集 来的 金币 装备 ， 竟然 一个 金黄色 装备 ， 不错 不错 。   回到 村子 ， 黄昏 时分 ， 年长 村民 回 交了 ， 说了 感谢 ， 邀请 家里 上 一夜 ， 答应 。   黑夜 时分 ， 炉前 对话 ， 年长 村民 提到 担忧 ， 担忧 赫 米特 王会 派兵 报复 村子 。 安慰 道 ： \" 一路 北上 ， 直捣 赫 米特 王的 老巢 ， 赫 米特 王将 没 工夫 来管 远处 小村子 事情 \" 。   第二天 村民 再次 聚集 ， 手里 捧 土特产 ， 年长 村民 说道 ： \" ， 感谢 做的 ， 村民 一点 心意 ， 请您 收下 。 祝您 北上 征途 中 胜利 走向 胜利 。 \"   接受 村民 好意 ， 说道 ： \" 村民 ， 谢谢 。 平时 厉兵秣马 ， 随时 备战 才行 。 大 变革 时代 就要 到来 ， 人人 皆 机会 ， 成就 自我 ， 风险 。 今日 ， 就做 自我 ， 做 事情 。 \"",
            "tags":"novel",
            "url":"articles/wei-da-de-wo.html"
        },
        {
            "title":"2019随笔",
            "text":"12 - 20   想我 死了 ， 活着 ， 类似 薛定谔 猫 ， 处于 一种 死或 生的 状态 。 无 区别 ， ， 死了 。   12 - 19   外部 世界 意义 ， 意义 一个 精神 领域 东西 只 于你 内心 世界 。   目的 ， 凡 想做 事情 这件 事情 意义 所在 。   外在 物质 世界 一个 很 令人 沮丧 特性 ， 它和 人的 快感 都是 易逝 多变 ， 越来越 人 乏味 厌倦 。 人 内在 精神 世界 扎根 物质 世界 之上 ， 人生 都 显得 令人 乏味 厌倦 。 仅仅 内在 精神 需求 赋予 意义 为之 兴奋 活着 人 ， 愿 称之为 天才 。 人 ， 精神 世界 需求 冲动 都 某种 程度 上和 物质 世界 发生 关系 ， 我会 辩解 说 ， 生存 ， 就算 生存 无忧 是达 不到 境界 。 天才 们是 未来 公民 。   如果说 人类 社会 还 一种 过渡 阶段 ， 一个 金字塔 社会 过渡 阶段 ， 即在 一时期 内 ， 选拔 手段 天才 选拔 ， 给予 发挥 才能 条件 环境 。 如果说 抨击 中国 高考 制度 国外 差 ， 一点 上 ， 高考 只 关心 人的 智力 ， 而不 关心 天才 们的 内在 精神 世界 。 天才 们的 智力 不 差 ， 智力 高的 不 天才 。   12 - 16   人是 一种 可爱 动物 ， 百种 方式 来让 忘记 现实 世界 无 意义 。   如果说 一百个 人 十个 人 坦然 接受 生死 ， 很难说 一个 人 坦然 接受 现实 世界 无 意义 。   文学 小说 故事 都有 一个 核心 价值 ， 主人公 脱离 世界 无 意义 苦恼 ， 一个 充满 邪恶 造物 世界 ， 一个 邪恶 野心 大 魔王 世界 。 是最 现实 文学 ， 文学 世界 主人公 面临 生存 亦 面临 世界 无 意义 苦恼 ， 都 要做 事 。 是最 糟糕 文学 故事 套上 一个 大的 设定 ， 会 显出 某种 迷人 成分 ； 文学 亦 是在 基础 上 手段 来让 世界 显得 真实 。   看 工作狂 ， 看 痴迷 TODO 计划 人 ， 一个 痴迷 文学 世界 人有 。 评判 一方 ， ， 正是 现实 世界 无 意义 本质 ， 才让 人 创造 显出 一种 可爱 成分 。 太 极端 病态 东西 【 极端 病态 东西 是因为 拒 不 承认 现实 世界 无 意义 本质 ， 非得 强要 现实 世界 某种 意义 ， 头脑 中 创造 世界 现实 世界 混淆 】 ， 想说 都在 淡淡地 显出 一种 美 。 ， 未来 ， 怀疑 人工智能 发展 出 东西 。   站在 议会 大厅 下 ， 大声 慷慨激昂 说道 ： 尊敬 天马 星人 ， 也许 地球 人在 眼中 都 ， 如同 一只 蚂蚁 捏 死 。 想过 ， 地球 上的 一百二十 亿人 也许 一百二十 亿的 无 意义 ， 人都 生活 故事 ， 地球 上 至少 一百二十 亿个 故事 ， 残忍 地将 一百二十 亿个 故事 宇宙 中 清除 ？   议会 里的 天马 星人 东张西望 ， 更 多的 人在 注视 眼前 屏幕 若有所思 ， 打着 字 。   过了 一会儿 ， 议长 说道 ： earth   man ,     made     point .   老实 说 地球 人不 感兴趣 ， 天马 星人 最 爱的 一个 好 故事 ， 刚才 说的 一百二十 亿的 故事 真的 。   千真万确 ， 假包 换 。   天马 星人 同意 不 消灭 太阳系 ， ， 都 要向 进贡 一个 好 故事 ， 拖 更 ， 立马 地球 扔 进 黑洞 去 ， 做的 到吗 。   喜出望外 地鞠 躬 ， ， ， 尊敬 天马 星 议长 。   12 - 03   写作 技巧 学习 ， 一个 作者 最 写作 欲望 冲动 。   更 作家 称为 建筑师 ， 理念 世界 建筑师 。 谈论 梦 东西 ， 不 现实 世界 缺少 真实性 性 。 柏拉图 来说 ， 理念 世界 。 流动 世界 中 ， 内在 外部 同等 地位 【 理念 世界 高于 现实 世界 ， 艺术 高于 生活 ， 此持 保留 意见 】 。   写作 第一 要义 真诚 ， 忠于 内心 。 ， 别无 规则 。   12 - 8   若论 ， 中心 必 先是 我心 。 若论 ， 必 先是 我心 再有 外物 。 若论 喧嚣 ， 尘世 再 喧嚣 归于 我心 。 外物 皆 不 ， 我心 必 。 外物 ， 时间 变化 常理 ， 我心 必 永远 拥有 。 尘世 喧嚣 终归 平淡 宁静 ， 我心 。 问 人生 意义 人 拥有 外物 ， 盛名 ， 永存 ， 内心 还 ， 永远 都在 。   我心 ， 感受 到某 一个点 阴暗 悲观 ， 潜藏 内心 ， 想要 自杀 ， 想要 远离 ， 想要 否定 。 更 多的 ， 光明 ， 平和 。 我心 ， 做 别人 看的 哀伤 ， 做 别人 看的 欢快 。   一般来说 心很 受外 物的 影响 ， 最起码 心会在 某种 程度 上 身体 血液 流动 激素 分泌 影响 。 说起 故事 ， 王阳明 临死 之际 ， 那种 身体 状态 下 ， 说道 ， 吾心 光明 ， 亦 复何 言 。 王阳明 在说 一生 光明磊落 大话 ， 是在 简单 地说 ， 心是 光明 ， 也许 下 一刻 王阳明 会 浮现 出 阴暗 黑暗 想法 ， ？ 故事 震撼 心灵 。   还 法国 贵妇 摇尾乞怜 卢梭 写的 《 忏悔录 真诚 性 ， 晚年 孤独 山路 间 遐想 漫步 卢梭 写的 一个 孤独 漫步 者的 遐想 真诚 性 。   9 - 19   老师 学生 犯下 罪 内心 一种 执 念 ， 世间 事都 一个 标准 答案 。 父母 孩子 犯下 罪 内心 一种 执 念 ， 一件 事情 没 预期 发展 ， 还 努力 ， 做的 还 好 。   9 - 13   人 不知 人 ， 不知 天 。 除去 内心 人的 喜好 感情 ， 人不 石头 更 感 。 人 也许 不知 人 ， 天 必定 知你 。 是最 荒诞 虚无主义 者也 是要 表达 人和 石头 区别 ， 从不 影响 上天 ， 上天 赋予 感和 意义 感 。 如同 石头 ， 世间 一块 石头 ， 就在 上天 照看 中 。   4 - 12   闲暇 时光 人生 精华 。 — — 叔本 华 ， 人生 智慧   3 - 21   生命 意义 书的 作者 品味 道理 是被 关进 集中营 ， 精神 满满的 理好 胡须 。 犹太 民族 优秀 在于 。 太多 装逼 大师 ， 拉比 老师 ， 整天 教导 ， 饭前 先 洗手 简单 生活 道理 。",
            "tags":"essay",
            "url":"articles/2019-essay.html"
        },
        {
            "title":"ansible",
            "text":"ansible 一个 自动化 运维 工具 ， 学习 ， 就会 发现 只 写 一个 简单 web   app ， 远程 计算机 环境 很多 配置 ， 后台 脚本 执行 ， nginx 配置 服务 静态 文件 。 都 手工   ssh   端来 操作 低 效率 ， 繁多 ， 环境 重复 部署 。 ansible 解决 。   第一个 例子 ： 假设 免 密钥 登录 一个 远程 服务器 ，   / / ansible / hosts   文件 服务器 名字 加 进去 ， 执行 :   其将 返回   SUCESS   信息 ， 证明 ansible 连通 远程 服务器 。   hosts 文件 配置   讨论   / / ansible / hosts   文件 默认   inventory   文件 ， 默认 inventory 配置 文件 之外 ， 还 写 很多 配置 文件 。 配置 文件 内容 大体 :   [ webservers ]   字段 定义 主 机组 概念 ， 随便 写 主机 没 主 机组 ， 一个 主 机组 还 一个 主 机组 ， 。 主 机组 主机 统一 管理 ， 。   主机 变量 设置   组的 变量 情况 请看 文档 ， 主机 变量 大体 写上 值 ， 变量 定义 后 playbooks ， playbooks 无疑 重头戏 ， 值得 提 。   主机 参数 控制   大多 ssh 连接 配置 ， :   ansible _ ssh _ host   没 好 设置 ， 主机 名很 长 ， 设置 连接 主机 名 。 写的   _ host   主机 别名 。 ansible 版本号 大于 2 ， 推荐   ansible _ host   。   ansible _ ssh _ port   端口号 ， 默认 不 配置 。 ansible 版本号 大于 2 ， 推荐   ansible _ port   。   ansible _ ssh _ user   ssh 登录 用户名 ， 默认 是你 电脑 登录 用户名 ， 情况 下 配置 。 ansible 版本号 大于 2 ， 推荐   ansible _ user   。   ansible _ ssh _ pass   登录 密码 ， 免 密钥 登录 不 配置 。 文档 说不 推荐 。   playbooks 熟悉 yaml   简单 下 yaml 语法 ， 一个 简单 例子 :   yaml 文件 都要 加上 :   ---   。   注释   #   缩进 级别   -   开头 一个 列表 ， 键值 字典 ， 大体 。   playbook 入门   是最 简单 一个 例子 ， 新建 一个   . yaml   文件 :   执行 :   简单 ping   pong   ， 配置 简单 内容 主机   work   ， 是在 提到   / / ansible / hosts   文件 里 定义 。 主机 执行   tasks   。 一个 列表 清单 ，   描述 ， 文字 随意 。 执行   ping   模块 。   确保 nginx 重启 :   确保 nginx 服务 运行 着的 :   playbook 最佳 实践   hosts 文件   项目 文件夹 下 新建 一个 hosts 文件 ， 类似 讨论   / / ansible / hosts   文件 ， 本地 语法 引入 ：   ​   site . yml   刷 脚本 主 入口   tags 单独 运行 子   roles 文件夹 新建 一个 common 文件夹 ， common 文件夹 新建 一个 tasks 文件夹 ， tasks 文件夹 定义 一个 main . yml ， 文件 内容 大体 :   site . yml 定义 ：   只 运行 子 利用 tags 。   ​   临时 加上   tags     role 全局 参数   全局 参数 放在   group _ vars   文件夹     文件 ， 其也 一个 简单 yaml 文件 。   role 里的 局部 参数   参数 推荐 site . yml 文件 role 定义 ， 所示 定义 一个   folder _   变量   ：   ansible - playbook 就最 配置 编写 很 简单 ， 关键 熟悉 好 特定 模块 。   playbook 模块   官方 模块 很多 ， 内容 很 ， 不 赘述 ， 请 参看 官方 文档 。   本地 安装   hosts 添加 一行 ：   本地 安装 不 提供 ssh 用户名 密码 ， 不 上传 ssh   key ， 上传 操作 加上 一行 ：   ​   压缩 包 解压 包 远程 机器 目标 点   值得一提 unarchive 模块 才 支持   remote _ src   模式 ， 推荐 采用 本地 压缩 包 源 解压 方式 。   rsync 风格 文件夹 复制   不 利用 copy 模块 ， scp 文件夹 结构 稍微 点就 会很 慢 ， 推荐   synchronize   模块 ：   值得一提的是 ， rsync 远程 机器 免 密码 ssh 连接 ， 输入 密码 ， 推荐 playbook 就将 pub 密钥 传 ， rsync 功能 远程 机 装了 libselinux - python   rsync   两个 软件包 。   user 登录 远程 机器 用户名 。   远程 机器 更 参数 信息   ansible   setup   模块 远程 机器 很多 有用 信息 ， 远程 机器 运行 虚拟 机 软件 。 更 信息 ， 远程 机器 默认 python 版本 ， 方式 ：   register 注册 执行 命令 command 返回 ， ansible 运行 时里 都 ， 还   python _ version _ check . stdout   方式 。   command   shell 区别   command shell 很多 情况 下 都 区别 ， shell 意义 上 来讲 类似 于你 shell 中 执行 命令 ， bash 环境 变量 ， 没事 会 优先 shell 模块 。   pip 虚拟 环境 下 工作   参考   网页   ， 示是 目标 虚拟 环境 文件夹 下 requirements . txt 文件夹 描述 安装 目标 python 模块 虚拟 环境 中 。   安装 本地 rpm 包   兴趣 看 ansible   yum   模块 ， 免 网络 利用 本地 下载 rpm 包来 安装 模块 很 好用 ， 很 好地 模块 之间 依赖 。 推荐 调用 shell 模块 ， 所示 ：   rpm 包 base ， 推荐 ：   下载 。 来自 epel ， 推荐   pkgs . org   搜 名字 ，   网站   下载 。   删除 文件 文件夹   删除 文件 文件夹 推荐   file   模块 调用 rm 命令 ， 所示 ：   微调 配置 文件   配置 文件 远程 机器 上 有个 原样 ， 几行 修改 ， lineinfile 模块 微调 配置 很 适宜 。   例子   regexp   匹配 目标 行 ，   替换 内容   line   。 insertafter 匹配 ， 则将 line 插入 该行 。   例子 插入 一行   line ：   template 模块 利用 本地 模板 文件 （ jinja2 模块 系统 ） 生成 一个 配置 文件 。   只 版本 操作系统 下才 执行 动作       语句 表达 ， 是只 远程 机器 操作系统 CentOS 版本号 7.2 时才 执行 动作 （ 参考   网页   。   ansible _ distribution   还   Ubuntu   ， Debian   ，   Red   Hat   Enterprise   Linux   。   register 用法   比如说 写上 一个 简单   test . yml   文件 ， 内容 ：   运行 ：   运行 显示 运行 date 命令 注册 ansible 全局 变量 池 去了 ， 名字 register 赋值 ， jinja2 模板 系统 中都 调用 。   _ items 用法   请 参看 官方 文档     。   换行 写 一行 写   个小 细节 ， 官方 文档 看了 就会 两种 形式 ， 不 多说 。   lookup 用法   lookup 上传 ssh   key 用到 ，   ansible 一个 高级 。   command   模块 skip 判断   加上   creates   参数 command 跳 过的 判断 标准 ， 文件 command 执行 过了 会跳 。   local _ action   local _ action     delegate _ :   127.0 . 0.1   缩写 ， 简单 来说 只 机或 说 操作 机上 执行 动作 。 顺便 提   delegate _   含义 ， 指定 主机 执行 动作 ， 脱离 ansible 默认 inventory 输出 几个 hosts ，   delegate _   主机 默认 几个 hosts 中的 一个 ， 主机 。   handlers   会在 playbook role hanlders 文件夹 ， 简单 来说 执行 （ 跳 过的 不算 ， 执行 changed   state 返回 ） ， 执行 notify :   定义 hanlders 。   参考 资料   ansible 官方 文档   ， 有个 翻译   中文 ansible 官方 文档   。   - - - ansible   篇 文章 写了 ansible 东西 写得 挺 。",
            "tags":"linux",
            "url":"articles/ansible.html"
        },
        {
            "title":"bash脚本学习笔记",
            "text":"前言   简单 讲   bash   shell   脚本 知识 ， 点到为止 。 日常 linux 作业 中 很 有用 。 一个 蹩脚 编程 语言 【 抱歉 说 】 不 推荐 编写 bash 脚本 代码 ， 这块 需求 ， 工具 。   变量   赋值 上所 示 ， 编程 语言 变量 赋值 大体 类似 ，   特别 变量 值 之间 的等 号是 相连 ， 空格 隔开   。 变量 符号 字母 数字 ， 加 下划线 。 声明 变量 局部变量 ， shell 中 。 创建 全局 变量 export 命令 。   变量 加上   $   符号 ， 变量 字符 字符 组合 成 一个 新的 字符 ， 用花 括号 变量 名 包围 。 形式   $ { i }   。 一般来说 变量 都 推荐   $ { }   形式 。   ： 修改 终端 前缀   利用 export 命令 变量 变为 全局 变量 （ 全局 变量 指 子 shell 继承 父 shell 变量 。 ） ， shell 脚本 都 通用 。   代码 放入 你家 目录   . bashrc   文件 ， 每次 终端 启动 都会 自动 加载 文件 。 开启 终端 前缀 都会   = >   形式 。   节省 点 屏幕 空间 。 pwd 命令 查看 ， 都 影响 。   PS1 终端 一级 前缀 符号 ， PS2 进一步 输入 提示 符号 。 换成 形式 ：   echo 命令   echo 命令 接触 很多 ， 不 赘述 。 echo 命令 用于 查看 变量 值 输出 一行 字符串 。   unset 命令   取消 bash 变量 赋值 。   read 命令   请求 用户 输入 变量 值   bash 符号   分号 bash 编程 语言 都 大体 类似 ， 一行 结束 。 bash 很多 符号 ， 讲 ， 符号 搜索 都不 太 好 搜索 。   更 信息 请 参阅   网页   。   $ 0   命令 名字 ， shell 脚本 成了 脚本 名字 。   $ 1   $ 2   ...   命令 接受 参数   $ @   参数 ：   { $ 1 ,   $ 2 ,   $ 3   ... }   ， 其是 一个 array 。   $   上 一个 命令 返回 状态 ， 0 成功 。   $ !   上 一个 命令 运行 进程 号   &&     cmd1   &&   cmd2   是前 一个 命令 执行 成功 再 执行 第二个 命令   &   命令   &   结尾 ， 命令 将是 异步 ， 后台 执行 。 （ PS ： ， 远程 连接 服务器 创建 命令 ， 远程 关闭 后台 进程 自动 关闭 。 nohup screen 。 ）   条件 判断   条件 语句 格式 ：   短小 shell 命令 行 ， 写成 一行 格式 ， 分 号 换行 。   还 值得 提醒 ： 条件 判断 语句 （ test   expression ） 要和 方括号 [ ] 一个 空格 分开 ， （ 上古 神器 都有 怪僻 ， 淡 定就 好 ） 。   ： 确认 文件夹   - d   检测 文件夹 ，   !   符号 逻辑 否 操作 。 workspace 不 ， 新建 workspace 文件夹 。   循环   小节 参考   bash     loop   篇 文章 ， bash 编程 循环 讲的 很 详细 。   循环 语句 格式 ：   ， 写成 一行 样子 ：   ​   加分 号的 地方 多行 格式 下 换行 地方 。   ： 小数点 递加 输出 流   seq 命令 简单 说下 ， 请     查阅 信息 ：   ： 批量 创建 文件   文件夹 输入 命令 ：   ： 批量 缩小 图片 大小   一个 多行 脚本 ， 用于 批量 缩小 图片 大小 。   ： 批量 重 命名 文件   调用 子 命令 返回 值   几个 例子 中 ， 形式 ：   $ ( cmd )   ， 其将 执行 子 shell 命令 ， 返回 字符串 值 。   array   shell 编程 过多 涉及 编程 内容 ， 是很 痛苦 ， 情况 下你 array 概念 。 演示 一个 例子 ， 需求 一个 自动 备份 程序 之上 再 加上 自动 删除 逻辑 。   程序 逻辑 创建 一个 名字   whatdump _ DATE   备份 文件 （ crontab 控制 好 运行 ） ， 希望 目标 文件 只 保留 三十天 文件 。 逻辑 较为 ， 本来 打算   DATE   参数传递 python 脚本 来做 接下来 工作 ， date 命令 强大 人类 友好 日期 时间 表达 功能 （ 请 参考     ） ， 文件名 都 传递 进 python 脚本 中 去 。   兴趣 下 date 命令 - d 选项 灵活 表达 支持 ，   date   - d   \"   - 3days \"   三天 日期 时间 ，   date   - d   \" + 3weeks \"   三周 日期 时间 。 兴趣 下 ， date 命令 - d 选项 真的 好 强大 。   好了 详细 讲 array 涉及 到的 语法 。   赋值 引用   表达 常见 那种 数组 概念 相近 ， 记得 索引 0 惯例 即可 。 赋值 :     $ { arrayname [ @ ] }   表达 方式 引用 array ，   $ { # arrayname [ @ ] }   表达 返回 array 长度 。   句 :   收集 到的 文件名 array 传递 进 python 脚本 中 去了 。 python 脚本 中 一个 粗糙 做法 引用   array 传递 进 args 去了 ， 读者 兴趣 试 ， args python 中 一个 列表 对象 。 python 更 逻辑 都 很快 写 ， 不 说了 。   大概 类似 所示 ， pathlib python3.4 才会 ， pip 安装 。   date 命令   date 命令 放在 一章 是因为 date 命令 单独 一个 命令 ， 打印 显示 日期 意义 很大 。 bash 脚本 中 ， 管道 中 ， date 命令 却 变得 有用 。 读者     查看 信息 ， 命令 预想 还要 ， 输出 格式 参数 控制 语法 ， 到了 编程 语言 中也 有用 （ python time 模块 中的 strftime 函数 ） 。   date 返回 日期 字符   date 命令 返回 特定 格式 日期 shell 脚本 中很 有用 ， 所示 一个 简单 例子 ：   date 命令 已 谈到 一点 ， 更 信息 请 参看   篇 文章   。 不 赘述 。   xargs 多行 转 一行   一个 批量 删除 空 文件夹 命令 ， 假设 空 文件夹 数目 很多 。   ls   - U   单纯 列 ， 管道 导向   head   只 打印 最 几行 ， 管道 导向   xargs   命令 ， 多行 转成 一行 ，   rmdir   参数 。",
            "tags":"linux",
            "url":"articles/bash-learning-notes.html"
        },
        {
            "title":"beautifulsoup模块",
            "text":"简介   BeautifulSoup 模块 python 网页 分析 一块 是很 有名 一个 模块 ， 确实 网页 分析 变得 轻松 easy 。 本文 将对 bs4 模块 简单 介绍 ， 更 细节 请 参看   官方 文档   。   安装   安装 简单 pip 命令 安装 :   第一个 例子   上 python2 python3 urllib 相关 改动 很大 ， 加上 urllib 上 很 友好 ， 推荐 requests 模块 相关 操作 。 beautifulsoup 引入 语句 所示 :   最 简单 的和 requests 组合 所示 :   soup . title 返回 一个 标签 对象 。 标签 对象 标签 点号 索引 标签 :   读者 想 ， 文档 p 标签 很多 ， soup 会 返回 ？   soup 返回 第一个 p 标签 ， 看作 要讲 find 方法 简化 css 索引 形式 。   find 方法   示最 简单 find 定位 实际上 类似   soup . p   用法 。 find 方法 有更 内容 。   find 方法 找 不到 返回 None ， 找到 返回 目标 标签 元素 。   过滤器   find 方法 最 常用 形式 接受 一个 参数 ， 参数 过滤器 参数 。 过滤器 字符串 正则表达式 列表 ， 列表 元素 基于 谈及 字符串 正则表达式 ， 逻辑 ， 符合 一个 匹配 条件 匹配 。   第一个 参量 参量 针对 tag 操作 ， 简单 字符串 够用 ， 正则表达式 ， 则是   . compile ( \" &# 94 ; b \" )   形式 ， 其内 正则表达式   match   方法 （ 稍 作 测试 ， . search 。 ） 。   额外 一提 过滤器   True   ， 其会 匹配 值 ， 比如说   id = True   ， 将会 匹配 id 属性 标签 。   class _ 参量     class _ =   过滤 标签 class 属性 ， python class 关键词 区分 ， 加上 一个 下划线 ， 接受 一个 过滤器 。   id 参量     id =   定位 网页 中的 id ， 接受 一个 过滤器 。   text 参量   网页 标签 内的 字符串 过滤 操作 ， 提及 过滤器 都 ， 字符串 精确 匹配 估计 用得 会 少 。 尽可能 地用 正则表达式 。 单独 text 参量   标签 字符串 会被 搜索 ， 返回 不 标准 标签 元素 对象 ， 很 不好 。 推荐 采用 形式 :   返回 必定 标签 元素 ， text 必定 只 搜索 标签 text 字符串 内容 ， 更 易于 理解 。   搜索 完 定位 到的 小 标签 ，   < b >   ， 目标 标签 元素   . parent   ， 则将 返回 更 高 一级 标签 元素 ， 会很 有用 :   keywords   标签 属性 都 类似 关键词 加上 过滤器 搜索 。   recursive 参量   recursive 默认 True ， 检索 tag 子孙 节点 ， 只 想 搜索 tag 第一级 子 节点 ，   recursive = False   。   limit 参量   只 find _ 才有 意义 ， 返回 几个 元素 。   find _ 方法   find _ find 方法 API 类似 ， find _ 返回 一系列 匹配 标签 元素 列表 。 顺便 提 ， find 方法 find _ 方法 接受 多个 参数 限定 ， 限定 条件 看作 逻辑 关系 。   标签 元素 对象   标签 元素 见 例子 :   :   标签 对象 标签 名字   string :   返回 NavigableString 对象 ， 暂时 先 略过 讨论 。   text :   返回 标签 包含 文本 对象 。   _ text ( ) :   最新 bs4 文档 来看 ， 官方 文档 推荐 tag 获取 其内 文本 内容 都用   _ text   方法 ，   thetag . text   形式 。   [ ' class ' ] :   属性 值 索引 ， \" class \" 属性 返回 一个 列表 ， 多值 属性 。   基于 标签 附加 查找     find     find _   找到 标签 对象 ， bs4 还给 标签 对象 加上 辅助 查找 方法 ， 基于 标签 对象 进一步 查找 ， 返回 标签 对象 。   平行 级别 标签   平行 级别 标签 是指 例子 :   标签   标签 一个 html 文档 缩进 深度 ， 一个 层次 平行 标签 。     平行 标签 ，     。   平行 级别 下 标签   才外 返回 标签 对象 （ find _ 方法 ） 方法 :   例子 :   方法 用法 谈及   find     find _   类似 ， 令人 沮丧 ， beautifulsoup 换行符 干扰 ，   篇 网页   中 提到 预处理 网页 换行符 都 换成 空格 ， 标签 之间 空格 符号 都 删除 解决 方案 ， 很 完美 ， 解决 接受 ， 网络 抓取 实际上 进来 网页 简化 预处理 要做 一步 工作 。   平行 级别 上 标签   平行 级别 上 标签 类似 描述 ， 往上 走 ， 不 赘述 。   返回 标签 对象 （ find _ 方法 ） 方法 :   非 平行 级别 标签   find _ parents ( ,   attrs ,   string ,   limit ,   * * kwargs )   find _ parent ( ,   attrs ,   string ,   * * kwargs )   find _ _ ( ,   attrs ,   string ,   limit ,   * * kwargs )   find _ ( ,   attrs ,   string ,   * * kwargs )   find _ _ previous ( ,   attrs ,   string ,   limit ,   * * kwargs )   find _ previous ( ,   attrs ,   string ,   * * kwargs )   . contents     . children   select 方法   select 方法 CSS 选择 器来 标签 元素 选择 。 原则上 谈论 方法 大部分 需求 ， 再 加上 针对 网站 网页 css 布局 抓取 ， 抓取 方法 是很 不 灵活 很 局限性 ， select 方法 用户 备选 方案 。   移除 标签   解析 文档 提升 效率   请 函数 ， 用途 是将 webpage a 连接 href 属性 链接 收集 。   :   parse _   参数 用于 控制 BeautifulSoup 刷 文档 时 创建 标签 元素 对象 ， 只 刷 标签 过滤 操作 ， 节省 工作量 。 参数 创建 一个   SoupStrainer   对象 ， 接受 过滤器 语法 叙述 。",
            "tags":"python_companion",
            "url":"articles/beautifulsoup-module.html"
        },
        {
            "title":"click模块",
            "text":"简介   click 模块 一个 类似 getopt argparse python 第三方 模块 ， 简单 ， 简直 python 快速 创建 命令 行 工具 类似 requests 之于 urllib ， writed   human - friendly 。 click 官方 文档     ， 就让 学习 一个 模块 。   官方 文档 第一个 例子 :   都是 很 直观 明了 ，   @ click . command ( )   用来 装饰 一个 函数 ，   @ click . option   添加 命令 行 选项 。 第一个 命令 行 选项 名字 ，     ，   default   意义 （ 类似   type   控制数据 类型 ） 。 选项 请求 输入 值的 。   click . echo   打印 操作 （ print 函数 更好 python2 3 兼容性 ， 随意 ， print 函数 ） 。   脚本 运行 情况 所示 :   函数   __ doc __   文档 成了 命令 行的 描述性 文档 。   更 棒的   prompt   机制 命令 行 输入 参数 兼容 :   必 填 参数 ， 文件 操作 测试   必 填 参数   @ click . argument ( )   装饰 添加 ， 所示 :     click . File ( )   接受 一个 文件名 ， 打开 ， 函数 一个 文件 对象 。 文件 推荐 click 模块 类型 ， 其对 Unicode bytes 较好 ， 优化 。   click . Path   类型 ， 其在 函数 相当于 一个 优化 Path 文件名 ， 提供 Unicode bytes 兼容 支持 。   例子 中 脚本 写上 :   脚本 测试 :   更好 做法 是用 测试 式 开发 风格 :   新建 一个   CliRunner   对象 ， 调用   invoke   方法 执行 命令 ，   Result   对象   exit _ code     output   属性 。   result . output   屏幕 回 显的 文字 。   标准 输入 标准 输出   值得一提的是 标准 输入 标准 输出   -   简单 。 例子 :   标准 输入 例子 下   Ctrl - D   结束 文件 流 。   分组 多个 子 命令   click 模块 分组 建立 多个 子 命令 功能 上也 设计 得很 简洁 :     @ click . group   定义 命令 组 ， 命令 组 函数 command 方法   @ cli . command ( )   添加 子 命令 。   命令 行 选项 详解   click 模块 必 填 参数   argument ( )   引入 ， 可选 参数   option ( )   引入 ， 值得一提的是 两个 函数 参数 不 ， 比如说 option   prompt   选 参数 输入 ， 请求 输入 ； argument 无 概念 。 更 细节 请 参看 请求 输入 小节 。   default   设置 默认 值 ， argument 必 填 参数 无 概念 。   type   控制数据 类型 ， 都有 。   接受 多个 输入   nargs   设置 大于 等于 1 值 ， 命令 行中 刷入 多值 ， argparse 模块 类似 ， 不 定量 多个 值的 情况   nargs = - 1   ， 相当于 内置 模块 argparse   *   。 argparse   +   要有 一个 值的 情况 ， 额外 加上   required = True   控制 。   count   option ， 某种 情景 下 很 有用 。   布尔 值   默认   default = True   设置 ， 默认 存储 布尔 值了 ， 实际上 暗含 加上   _ flag = True   。 设置 default ，   _ flag   控制 存储 布尔 值 。   短名 选项 长名 选项 布尔 值     /   分割 语句 创建 多个 flag 布尔 值 控制 ，   /   左边 True ， 右边 False ， 短名 选项 跟着 写入 。     例子 短名 情况 空格 少的 。   想要 效果 ， 不 输入 flag flag 值 False ， 输入 则是 True 。 ：   多个 choice 选项 用法   请求 输入 prompt 控制   option 才 概念 。 最 简单 情况 所示 :   弹出 提示 输入   =   给出 值时 才会 。   请求 输入 密码   所示 :   额外 加上 两个 选项 控制 :   hide _ input = True     confirmation _ prompt = True   。 组合 简单 写为 :   请求 默认 值 控制   请求 prompt   default   设置 默认 值的 ， 那种 情况 下你 下 Enter 相当于 输入 默认 值了 。 还 获取 系统 环境 下的 值 默认 值 。   click 模块 还 提供 prompt 快捷 请求 输入 命令 。     confirm   函数 很 有用 :   Press     Key     continue   终端 显示 稍微 停留 一会 ， 显示   Press     Key     continue   ， 随便 个键 再 退出 ， 好让 用户 终端 显示 信息 。 click 很 简单 效果 ：   callback   callback 是很 有用 一个 特性 ， 命令 行有 主 流程 之外 动作 ， 打印 软件 版本号 软件 主 流程 无关 小动作 ， 小动作 执行 完 退出 程序 。 小动作 推荐 ：     _ eager = True   参数 参数     callback   参数 完 会 调用 函数 。 调用 函数 写法 演示 。   expose _ = False   参数 传递 函数 ， click 默认 写法 跟上   version   参数 。   callback 函数 ctx 上下文 ， param 参数 选项 值 ， 参数 值 ，   True   。   上下文   resilient _ parsing   click 尽可能 确保 不 失败 默认 值将 忽略 ，   return   回调 函数 流程 传递 click ，   ctx . exit ( )   退出 程序 。 简单 来说 ， 加上 句 话 ， 指定 选项 ， 执行 回调 函数 ， 选项 ， 干扰 原 函数 流程 。   带 颜色 终端 回显   click 借助 python 模块   colorama   力量 有在 终端 显示 带 颜色 字体 功能 ， 确认   colorama   :   简单 :   fg 前景 颜色 ， 说 字体 颜色 ， 颜色 选项 :   bg 背景 颜色 :   style :   dim 淡化 ， bold 是加 粗 ， blink 闪烁 ， 没 效果 。 underline 下划线 ， reverse 前景色 背景 色 翻转 。",
            "tags":"python_companion",
            "url":"articles/click-module.html"
        },
        {
            "title":"多个行星中某些会采用不同的历法",
            "text":"小时 定义 物理 范畴 ， 是在 行星 都是 通用 ， 改变 。   基于 时间 建立 历史 事件 刻度 统一 。 说 时间 点在 地方 发生 事件 ， 时间 点的 历史 上 不 似 物理学 上 严苛 ， 歧义 。   讨论 超过 太阳系 ， 年的 定义 争议 ， 年总 定义 地球 绕 太阳 一周 时间 。 说 公元 3066 年某 某某 出生 ， 大体 都 地球 上 居民 公认 那种 历法 时间 计算 来的 。   讨论 超过 太阳系 ， 人 会说 星系 都 会有 年的 概念 ， 不 大 ， 年 概念 历史 表述 太 过于 ， 星系 行星 很 接近 太阳系 ， 该类 行星 居民 人数 超过 地球 ， 行星 都 采用 地球 计年法 。 将来 地球 不 ， 地球 计年法 会 某种 文化 遗产 天文学 定义 固定 而全 星系 通用 。 想象 文化圈 人 ， 基于 语言 最 简 表述 原则 ， 表达 某某 科学家 出 生于 公元 3066 年 ， 要啰啰嗦嗦说 大堆 东西 。   再来 讨论 天的 定义 ， 就要 提及 一点 因素 ， 地球 白天 黑夜 概念 近似 一种 文化 术语 ， 一个 人说 起床 工作 总 假定 时间 早晨 ， 说 中午 吃 中饭 假定 白天 工作 时间 正 中午 。 对此 举证 宇航员 作息时间 工作 8 小时 ， 起床 早餐 工作 中餐 工作 休息 生活 习惯 都是 改变 。   星系 类地 行星 ， 该类 行星 居住 居民 ， 上 讨论 生活 时间 概念 就会 变得 很 ， 说 早上 太阳 当地 早上 ， 说 晚上 太阳 落下 当地 晚上 ， 推 ， 当地 概念 当地 类地 行星 自转 定义 。 星系 类地 星系 或者说 天的 那种 文化 含义 意义 ， 会和 地球 类地 行星 公用 天的 定义 。   下 ：   年的 定义 地球 计年法 【 文明 不 地球 文明 不 讨论 ， 其将 采用 核心 行星 计年法 】   天的 定义 类地 行星 本地 天的 定义 ， 地球 差异 ， 天的 白天 黑夜 概念 很 模糊 ， 采用 类似 文化圈 核心 类地 行星 天的 定义 。   年的 定义 唯一 ， 当地 天的 定义 则是 多样 ， 西 莫夫 一个 银河 标准 时间 ， 同意 ， 诸多 行星 会 自转 速率 日夜 颠倒 不便 ， 不 同意 。 实际上 想 地球 上时 区的 概念 ， 当地 时区的 概念 照顾 当地 居民 白天 文化 概念 。   推断 行星 间会 多种 历法 。 历法 建立 中心 类地 行星 名字 命名 ， 川 陀 ， 则会 一个 当地 川 陀 历法 。 历法 一年 天数 等于 川陀星在 地球 年内 自转 圈数 ， 历法 几月 几号 概念 ， 还 不 大 确切 新 历法 会 确立 。",
            "tags":"thought",
            "url":"articles/duo-ge-xing-xing-zhong-mou-xie-hui-cai-yong-bu-tong-de-li-fa.html"
        },
        {
            "title":"动态规划",
            "text":"动态规划 算法 采用 分治 思想 ， 大 分解 小 。 贪婪 算法 小 求解 局部 最 优 即可 ， 动态规划 朴素 解法 ， 要试 尝试 组合 情况 ， 采用 记忆 策略 ， 来将 类似 子 一并 解决 。 动态规划 算法 第一 ， 子 某种 类似 性 ； 第二 ， 对子 解答 一种 记忆 策略 。   算法 图解 动态规划 算法 采用 一种 网格 思路 ， 最长 公共 子 序列 很 适合 ：   最长 公共 子 序列",
            "tags":"algorithm",
            "url":"articles/dynamic-programming.html"
        },
        {
            "title":"faker模块",
            "text":"简介   faker 模块 一个 很 特色 模块 ， 其在 github 上 star 较多 。 用来 生成 伪 数据 ， 用来 做 测试 用途 。 github 项目 地址     。   项目 支持 pip 安装 :   很 简单 ， 大概 所示 :   中文 名字 例子 ， Factory create 方法 指定 语言 locale （ 默认 \" en _ EN \" ） :   faker 所含 方法 清单   address ( ) :   地址   text ( ) :   显示 一段 随机 文本 ， 中 文化 。   mime _ type ( ) :   model / x3d + xml   chrome ( ) :   随机 user _ agent   ,   很 有用 。   firefox ( ) :   火 狐 随机 user _ agent   internet _ explorer ( ) :   随意 user _ agent   opera ( ) :   opera   safari ( ) :   safari   user _ agent ( ) :   浏览器 随意 user _ agent   phone _ number ( ) :   随意 电话号码   boolean ( ) :   随意 bool 值   country _ code ( ) :   城市 代码   language _ code ( ) :   en   locale ( ) :   zh _ CN   md5 ( ) :   随意 md5 值   null _ boolean ( ) :   None     True     False   sha1 ( ) :   sha1 值   sha256 ( ) :   随意 sha256 值   :   设置 随机 种子   语言 locale 代码",
            "tags":"python_companion",
            "url":"articles/faker-module.html"
        },
        {
            "title":"git版本控制",
            "text":"前言   git 强大 工具 刚 用于 代码 版本 控制 ， 想到 一个 简单 线上 Git 服务商 起步 Github 发展 地步 ， Github 成就 很大 一部分 是因为 Git 强大 工具 能力 局限 代码 版本 控制 ， 文档 任意 文本 版本 控制 它都 胜任 。   git 基础   git 命令 流程 ：   远程 仓库 文件 本地   网上 创建 项目 ， 网上 存档 下载 本地 ， 希望 下载 地点 ， 打开 终端 ：   初始化 本地 仓库   git   init   命令 用于 初始化 本地 仓库 ，   git   clone   仓库 文件 初始化 ，   origin   远程 服务器 名字 加上 去了 。   本地 仓库 索引   先用   git   status   命令 查看 仓库 改动 情况 ， 文件 不想 改动 ，   git   checkout     放弃 更改 ， 项 改动 想 提交 ， 则用   git   add     目标 文件 索引 。 add 命令 跟上 文件夹 名 ， 则该 文件夹 下 文件 都将 跟踪 。 本地 删除 文件 ， 希望 仓库 删除 文件 ， 加上     选项 ：   索引 改动 提交 本地 仓库   文字 信息 这次 更改 注释 ， 不 加上   - m   选项 ， 编辑器 写上 信息 。   本地 仓库 改动 提交 远程 仓库   第一次 提交 远程 服务器 取个 简单 点的 名字 ：     origin   远程 服务器 简称 ， 按理 来说 名字 随便 取的 ， 都是 origin ， github 上 clone 仓库 默认 远程 服务器 名字 大多   origin 。   都 简单 命令 更新 ：   最新 git 版本 简单 写作   git   push   。   远程 仓库 改动 更新 本地   命令 git 文件 操作 合并 式的 ， 替换 最新 改动 文件 。 希望 远程 仓库 改动 包括 删除 更新 本地 ， 选项       （ 是个 删除 动作 选项 ， 想要 删除 文件 git   rm   命令 git 仓库 才会 记录 这次 删除 动作 ， 本地 远程 仓库 都 跟踪 这次 删除 动作 ）   。   最新 版本 git   简单 写上   git   pull   ， 内部 智能 判断 分支 参数 。   情况 下就   add   commit   push   三步 。 日常 维护 提交 流程 。 网站 上对 远程 仓库 做 修改 ， 记得 先用 pull 命令 远程 仓库 改动 更新 本地 。   第一次 配置   设置 名字 email ：   git 全局 设置 ， 项目 无关 。 打开 家 目录 下的   . gitconfig   文件 看 。   . gitignore 文件   github 创建 项目 选择 好了 项目 语言 ， 就会 自动 创建 一个   . gitignore   文件 ， 文件 语法 很 简单 ，   * .   项目 内 后缀 文件 都 索引 。   推荐   gitignore 项目   看 。   初始化 仓库   git   init   即在 工作 目录 下 初始化 git 管理 仓库 ， 打开 查看 隐藏 文件 ， 会 一个   . git   文件夹 ， git 用于 管理 项目 文件 存放 ， 会 用到   config   文件 。   是在 github 上 创建 项目 ， 项目 克隆 （ 创建 一个 文件 ） ， 不 再 执行 init 命令 ， 远程 仓库 执行 。 打开 config 文件 会 remote   origin   定义 好了 。   clone http 连接 ， 想 ssh 连接 ， config 文件 下 修改 即可 。   删除 文件 动作 跟踪   本地 删除 文件 ， 希望 远程 仓库 删除 文件 ， 先看   git   status   文件 改动 。     跟踪 目标 文件 删除 动作 。     git   add   文件夹 ， 加上     选项 ， 文件夹 内的 文件 删除 动作 会 自动 跟踪 。   查看 git 仓库 文件 改动 情况   查看 git 仓库 更改 记录   git   log   命令 查看 本地 仓库 更改 记录 。 git   log 很多 设置 ， 个最 简单 例子 （ 参考 githowtu 网页 ） ：   创建 一个 别名 ， 家 目录   . gitconfig   文件 写上 ：   git 命令 别名 功能   提到 修改 家 目录   . gitconfig   文件 输入   git   hist   就很 git 仓库 更改 记录 好看 打印 信息 。     命令 实际上 修改 主 文件夹 . gitconfig 文件 ， 打开 看 。   切换 版本   切 回到 一个 版本 中 去 ：   commit hash 值 可用 git   log 查看 ， 命令 会将 本地 文件夹 返回 特定 版本 状态 。   取消 文件 修改   修改 文件 ， 还 add commit ， 修改 不 满意 ， 想 舍弃 。 上 checkout 文件 文件夹 取消 修改 ， 文件 回 滚到 commit 时未 修改 样子 。   commit 更改   提交 一个 commit ， 发现 地方 修改 ， commit 附加 信息 不 满意 ， :   来覆 写上 commit 记录 ， amend 改进 修正 。 只能 amend 那次 commit ， 运行 命令 ， 等于 上 commit 都被 取消 掉了 ， 做 修改 ， 再 一个 commit 。   取消 add 了的 文件   不 小心   add   .   文件 ， 文件 不想 add ， 取消 add 操作 。   分支 功能   git 分支 功能 特别 强大 ， 推荐 灵活 开发 。 git 保存 文件 差异 变化 量 一系列 文件 快照 。 git commit ， 相关 提交 信息 之外 ， 一个 指向 棵 树的 指针 。 git 中的 分支 本质 上 仅仅 是个 指向 commit 对象 可变 指针 。   git   branch   testing   新建 一个 分支 ， commit 对象 上又 新建 一个 分支 指针 。 git 还 保存 一个 名叫   HEAD   特别 指针 ， 指向 工作 本地 分支 。 运行 git   branch 仅仅 新建 一个 分支 ， 系统 自动 切换 分支 ， 切换 分支   git   checkout   testing   命令 。 master 分支 testing 分支 向前 commit 推 ， 一个 分支 样貌就 图所 示 :   上 图 HEAD 工作 分支 点在 ， master 默认 主 分支 ， 上 图 一个 testing 分支 。 上 图 是在 f30ab 开了 一个 testing 分支 ， testing 分支 commit ， master 分支 推 ， 本地 文件夹 工作 分支 是在 master 。     pro   git   书的 说法 ， Git 中的 分支 实际上 仅是 一个 包含 所指 对象 校验 （ 40   字符 长度   SHA - 1   字串 ） 文件 ， 创建 销毁 一个 分支 廉价 ， 切换 快 。 Git 鼓励 开发者 频繁 分支 。   新建 分支   新建 一个 git 分支 ：   ​   额外 提醒 新建 一个 git 分支 ， 还 checkout 命令 切换 分支 ， 停留 分支 上的 。   查看 分支   git   branch   用于 查看 分支 状态 。 加上 选项   - a   还 会 显示 远程 分支 状态 。   ​   切换 分支   ​   克隆 分支   git   clone 项目 只 想 克隆 分支 ， 加上   - b   选项 来只 clone 远程 仓库 分支 ：   ​   合并 分支   比如说 testing 分支 master 分支 想 合并 。 切换 master 分支 ， git   merge 合并 分支 ， 所示 :   合并 策略 新建 ， 迭加 合并 ， 文件 冲突 手工 。   删除 本地 分支   小节 参考   网页   。   删除 远程 分支   分支 分支 推送   本地 一个 dev 分支 ， 推送 远程 dev 分支 。 删除 远程 分支 语法 类似 ， 冒号 指定 本地 分支 。   一种 很 不 规范 做法 :   是将 本地 dev 分支 推送 远程 master 分支 ， 不 推荐 做 ， 尽量 本地 分支 远程 分支 名字 ， 免得 弄 混 。   tag 功能   github 上有 release 栏 基于 git tag 功能   ， 命令 推送 一个 release 或者说 提交 一个 tag 。 修改 额外 信息 额外 附加 bin exe 文件 ， 要到 github 上 网页 操作 。   查看 tag   添加 tag   tag 推送 远程   commit 几次 后悔   commit 几次 ， 几次 commit 都不 太 满意 ， 想回 滚到 commit 下 。 ：   hard   强制 回 滚到 版本 ， 重设 索引 ， 本地 文件 修改 会 丢失 。   soft   是你 做 本地 修改 索引 都不 更改 ， 说 git 回 滚到 版本 。   mixed   默认 选项 ， 重设 索引 ， 本地 文件 修改 都会 保留 。   很 远程 仓库 commit 推送 ， 加上   force   选项 。   子 模块 功能   git 项目 添加 子 模块   一个 git 仓库 文件夹 一个 git 仓库 ， 称该 git 仓库 为子 模块 ， 内容 添加 子 模块 管理 ：   将会 多出 一个   . gitmodules   文件 ， 存放 项目 子 模块 信息 。   子 模块 还 内容 ， 还 运行 ：   获取 子 模块 内容 。   clone 包括 子 git 模块   项目 有子 git 模块 ， 简单 git   clone 命令 内容 下载 。 参考   网页   。   加上   recursive   选项 就会 下载 项目 子 git 模块 。   clone 带有 子 模块 项目 子 模块 clone ， 想 clone ， 命令 ：   日常 子 模块 操作   子 模块 一个 git 项目 ， 子 模块 文件夹 ， 常规 git 操作 。 主 项目 指向 版本号 子 模块 ， 操作 在主 模块 上 生效 。   要主 项目 指向 子 模块 最新 版本 操作 ：   中文 乱码   参考   网页   。   用户 家 目录 下的   . gitconfig   文件 设置 ， 读者 参考 下 ：     autocrlf   =   false   git     windows 一个 设置 ， Linux 换行符 windows 换行符 关闭 ；   safecrlf = true   设置 ， git     windows 不 做 更改 。   quotepath   是把 git 路径 默认 转义 关闭 。   设置 utf8 编码 。   ​   参考 资料   git 简明 指南   git   howto   图解 git   git   community   book 中文版   pro   git 第二 版",
            "tags":"software",
            "url":"articles/git.html"
        },
        {
            "title":"github pages",
            "text":"  github 上 新建 一个   _ . github . io   项目 ， 内容 一个 静态 网站 生成 工具 输出 内容 。   定义域 名   简单 来说 写 一个   CNAME   文件 ， 实际上 github   settings 还 提供 功能 ， 做的 工作 创建 一个   CNAME   文件 。   定义域 名 https 支持   小节 参考   篇 文章   。 简单 来说 利用   cloudflare   提供 服务 。 提供 DNS 域名 解析 服务 ， 还 做 很多 额外 工作 ， 缓存 ， 统计 ， https 支持 。   设置 得很 详细 ， 很多 键式 设置 ， 东西 很 ，   SSL   模式 推荐 选择   Flexible     Full   支持 github   pages 不得而知 ， 设置 后 好等 好几个 小时 才能 生效 。     Automatic   HTTPS   Rewrites     Always     HTTPS   推荐 选上 ， 篇 文章 提到   page   rules   设置 下 ， 勾 选了   Always     HTTPS   总 选项 ， 不 重复 设置 。   挂上 gitbook 内容   WARNING :   小节 内容 年久失修 过时 。   参考   网页     create - react - app   分支 管理 建议   ， 综合 更好 解决 方案 ：   yarn   init   读者 yarn   npm 不 太 熟悉 ， 都   Enter   。   yarn   add   gh - pages     packages . json   加上   （ PS :   json 语法 object 一项 带 逗号 ） ：   运行   gitbook   deploy   好了 ， gitbook 挂载   _ . github . io / project   。",
            "tags":"others",
            "url":"articles/github-pages.html"
        },
        {
            "title":"贪婪算法",
            "text":"总 暴力 穷举 算法 求解 ， 组合 数 情况 太 多了 ， ， 快速 算法 ， NP 。 试着 近似 算法 快速 找到 一个 近似 解 。 贪婪 算法 一个 近似 解 。   贪婪 算法 某种 算法 ， 更 像是 写 算法 时的 一种 思路 参考 。 解决问题 ， 分解 多个 步骤 ， 寻找 步的 局部 最 优 解 ，   近似   目标 全局 最 优 解 。 （ 贪婪 算法 不 保证 解 全局 最 优 解 ， 解是 很 靠近 全局 最 优 解了 。 ）   一个 ， 贪婪 算法 ， 贪婪 算法 解决 算法 。   背包   版本 还 扩展 出 函数 最小 重量 价值 / 重量 ， 理解 贪婪 算法 思想 即可 。   参考 资料   算法 图解   Aditya   Bhargava   著",
            "tags":"algorithm",
            "url":"articles/greedy-algorithm.html"
        },
        {
            "title":"古墓丽影崛起女巫洞窟攻略",
            "text":"本文 古墓 丽影 崛起 ， 女巫 洞窟 ， 芭 芭 雅 ： 女巫 神庙 攻略 ， 讨论 两个 难点 。   利用 绳索 洞窟 内部   先射 对面 滚轮 ， 固定 滚轮 ， 再射 对面 滚轮 固定 旁边 固定 柱上 ， 调整 好 两个 平台 高度 ， 好让 爬 右边 高 地上 。   爬 右边 高地 射 滚轮 ， 固定 到高 地上 滚轮 ， 人滑 。   再射 对面 滚轮 ， 固定 滚轮 ， 再射 对面 滚轮 固定 旁边 固定 柱上 ， 这次 调整 两个 平台 高度 是要 右边 高 地上 左边 高 地上 。   对面 小 平台 ， 跳 绳索 上 ， 等到 右边 高地   转 右边 高地 滚轮 ， C 脱离 ， 过程 要快 跑 ， 跳 平台 ， 跑 左边 高地 ， 跳 平台 ， 连跳 爬 。   BOSS   最 核心 打法 站在 滚轮 旁 ， 射 BOSS 飞船 ， 滚轮 自动 BOSS 拉 【 一层 不用 射箭 ， 二层 三层 BOSS 射一 箭 ， 不 射准 ， BOSS AI ， 射 ， 躲 ， BOSS 烧 绳子 】   拉 ， 打开 锅炉 盖 ， 烧 BOSS 。 是最 关键 点 ， 清 小兵 不用说 。   一层 两个 烧完 ， 上 二层 ， 二层 两个 烧完 ， 做 平台 转 。   三层 一个 ， 是坐 最高层 转 平台 ， 平台 一个 小 隔间 E 行了 。",
            "tags":"game",
            "url":"articles/gu-mu-li-ying-jue-qi-nu-wu-dong-ku-gong-lue.html"
        },
        {
            "title":"关于中国人无信仰的观点是站不住脚的",
            "text":"时代 未知 中 寻求 确 知的 信仰 ， 一部分 信仰 人 称为 宗教 ， 一部分 信仰 人 称为 迷信 ， 信仰 深藏 人的 内心 ， 触摸 人以 潜意识 谈及 ， 而更 多的 不 为人 识 。   确知 到确 知的 科学 。 称 当今 时代 为后 牛顿 时代 ， 后 牛顿 时代 科学 相比 前 牛顿 时代 有了 很大 发展 ， ， 未知 已知 比例 基本上 太大 改变 。 说 ， 多了 ， 人所 感知 未知 比重 更 大了 。 科学 讨论 领域 确切 感知 很小 一部分 ， 很多 讨论 是有 局限性 。   哲学 ， 理解 明智 之学 去 勇敢 拥抱 已知 勇敢 承认 未知 未知 。 理性 讨论 ， 人有 很大 不 理性 成分 ， 内心 最 本质 ， 未知 ， 抱有 一种 情绪 。 上帝 赐予 情绪 ， 情绪 来了 如同 未知 ， 值得 正视 。 面对 股 情绪 ， 哲学 是有 局限性 ， 安抚 股 情绪 ， 宗教 ， 迷信 ， 文学 潜意识 有很 疗效 。   中国 时期 内 实际上 诞生 不少 宗教 ， 时期 内也 如同 古希腊 百家争鸣 哲学 大 繁荣 时期 ， 中国 时期 内也 外来 宗教 佛教 大 扩散 占 主导 地位 时期 ， 讨论 中国 人 宗教 信仰 ， 中国 一个 连续 文明 有别于 历史 上 一个 文明 。 正 历史 复杂性 ， 造就 文明 是很 难用 一种 单一 宗教 哲学 或者说 解释 。   分析 中国 人的 信仰 ， 发现 谈论 中国 人的 无 信仰 观点 站不住脚 ， 信仰 某种 未知 当做 已知 ， 中国 人 纯粹 哲学 ， 实际上 中国 人有 很多 迷信 ， 中国 人也 很多 不 科学 偏见 和执 念 。   发现 中国 人 ， 周易 历朝历代 哲学家 文学家 ， 基本上 都 一种 \" 天人感应 \" 学说 。 天人感应 ， 周易 预测 学都 立脚 石的 ， 天人感应 ， 中国 人的 很多 哲学家 观念 谈论 都将 变得 理解 ， 孔子 老子 ， 很大 都在 谈论 天道 人 顺从 天道 。 包括 皇帝 ， 说 命令 是顺 承 上天 旨意 。 天人感应 学说 简单 白话 说 ：   人生 一场 修行 ， 修行 目的 更好 理解 天意 ， 天意 行事 。 修行 足够 好 【 周易 一种 理解 天意 术 ， 修行 不好 ， 上天 不 天意 昭示 于你 ， 周易 学得 再 好也 没用 ， 周易 义理 派 关注 周易 哲学 道理 修行 。 佛教 思想 进来 实际上 观念 上 加上 修行 善的 指导 ， 术 ， 佛教 术 ， 中国 人 更好 修行 为善 ， 更好 上天 垂 见 ， 实际上 老子 天道 无 亲 常与 善人 思想 在说 】 ， 上天 会将 天意 昭示 于我 ， 天意 行事 ， 人生 天命 【 请 中国 人 天 行事 ， 天 行事 好运 ， 不 天 行事 尘世 荣华富贵 】 。   天人感应 学说 再 详细 谈论 ， 想再 谈论 一个 很 有趣 现象 ： 中国 人对 生死 不 感兴趣 态度 。 孔子 说 ： 不知 生焉 知 死 ， 孔子 表达 ， 中国 人的 思想 观念 ， 对比 古 埃及 生存 意识形态 ， 显明 。 死后 情况 一个 很大 未知 ， 宗教 很 核心 一个 解决 死 。 儒教 道教 都是 不 承认 宗教 很大 一个 原因 ， 不 试图 解决 。 佛教 进来 ， 中国 人 如同 看 小说 很 兴趣 听 轮回 ， 死 后的 地狱 观点 ， 笑了 笑 ， 回过 头就 好像 忘了 ， 变得 不 感兴趣 。 来了 兴致 ， 故事 添油加醋 加上 很多 东西 ， 好让 葬礼 变得 有趣 ， 改动 估计 佛教 都不 佛教 ， 说 道教 东西 ， 老实 说 老子 庄子 承认 。 仪式 ， 会让 外国人 中国 人还 保有 原有 祖先 崇拜 信仰 ， 一种 误解 。 如同 孔子 说的 ， 操办 仪式 隆重 庄严 ， 失了 礼节 ， 真的 中国 人 真的 仪式 上 投入 感情 ， 错了 。 中国 人从 骨子里 就对 死 后的 情况 不 感兴趣 。   不 感兴趣 态度 个很 难解 谜 题 ， 有人 说 中国 人是 一群 极致 世俗 主义者 ， 想这 大体 正确 ， 说 中国 人是 唯利是图 ， 至少 比不上 犹太人 ， 人人 都是 趋利避害 ， 本性 ， 人的 本性 东西 不到 国民 性格 程度 上 。 历史 上的 证据 证明 中国 人在 尘世 活得 很 艰难 活得 很 优越 关注 尘世 ， 中国 人 简单 骨子里 就对 死 后的 情况 不 感兴趣 。 不 涉及 哲学 宗教 ， 未知 ， 潜意识 讨论 ， 不 感兴趣 。   非得 提出 一个 观点 ， 大概 中国 人 语言 缘故 更 偏向 视觉 实在 ， 西方 民族 语言 基于 发音 缘故 而更 偏向 听觉 实在 。 中国 人 死 后的 情况 讨论 ， 都 一种 淡淡的 态度 ， ， ， ， 。 过后 忘了 。 解释 不怎么 站得住脚 ， 古 埃及 苏美尔 象形文字 ， 一个 解释 是因为 实际上 都 演变 成 表音 文字 ， 本质 区别 。 发现 文化 情况 更 确切 来说 统治阶级 文化 情况 ， 统治 阶层 很多 都是 外来 入侵者 。",
            "tags":"thought",
            "url":"articles/guan-yu-zhong-guo-ren-wu-xin-yang-de-guan-dian-shi-zhan-bu-zhu-jiao-de.html"
        },
        {
            "title":"html5代码规范",
            "text":"html5 代码 规范   本文 参考   篇 文章     篇 文章   。   指出 都是 代码 建议 ， 大头 开蛋 小 头开 蛋的 ， 到底 是空 四个 空格 两个 空格 ， 分歧 不 写 ， 读者 自行 。   总的 原则   团队 人数 ， 代码 看起来 好像 一个 人 写的 。 — — 原则 公认 。   文件名 推荐 小写 字母 加 下划线 。 （ 小写 字母 加连 字符 ， 不 推荐 带上 空格 ）   html   缩进 ， 一个 编辑器 会 提供 自动 缩进 功能 。   属性 名 小写 ，   -   隔开 。   属性 定义   双引号   包围 。   < hr >   < img   src = ... >   不用 加个   /   号了 。   关闭 标签 省略   < li > ... < / li >   疑问 。   开头 格式 都是 ：   < ! DOCTYPE   html >   语言 指定 遵循 规范   ，   < html   lang = \" zh - cn \" >   字符 编码 推荐 指定 utf8 ，   < meta   charset = \" utf - 8 \" >   IE 兼容 模式 ， 推荐 加上 一行 ：   引用 css javascript ， 所示 （ 再 加上 杂七杂八 东西 ， 尽可能 代码 简洁 。 ） ：   属性 顺序 ：   1 )   class   2 )   id     3 )   data -   4 )   src     type   href     5 )   title   alt   6 )   role   aria -   布尔 属性 ， html 规范 原文 ：   The   values   \" true \"     \" false \"       allowed     boolean   attributes .   To   represent   a   false   ,     attribute         omitted   altogether .   布尔 属性 true ， 不 取值 false 。   代码 简洁 简洁 ， 尽可能 减少 标签 数量 。 疑问 。   css   css 代码 规范 兴趣 请 参看 提到 过的 参考 文章 ， 不 太 感兴趣 ， 老实 说 css 本来 可读性 偏 低吧 ， 代码 规范 做 。",
            "tags":"html5_tutorial",
            "url":"articles/html5-style-guide.html"
        },
        {
            "title":"html5学习教程三bootstrap篇",
            "text":"bootstrap   本文 点到为止 讲解 ， 读者 简单 即可 ， 练手 学习 。   安装   本文 加载 ：   viewport 元 数据 声明   确保 绘制 触屏 缩放 ， 加上 viewport 元 数据 声明 :   container 类   container   class   div   一个 固定 宽度 响应 式 容器 。   container 类 。   栅格 系统   栅格 系统 bootstrap 框架 很 有用 一个 特性 ， 思路 :   一行   row   类都 放在 谈及   container   类 。   一行 row 类 （ 类 实际上 该类 属性 div 盒子 ） 再 添加 行类 。   行类 很 多种 ， 请 参看   网页   官方 文档     设计 。   container 类 。   col - md - 8 盒子 ， 黄色 row 盒子 。   col - md - 4 盒子 ， 8 + 4 = 12 ， bootstrap 最 12 列 。   常规 css 设置   常规 css 设置 比如说 h1 - h6 字体 大小 ， 常规 标签 字体 大小 颜色 代码 背景 设置 ， 都 浏览器 开发者 工具 查看 css 代码 设置 ， 默认 设置 不好 再 弄 css 文件 重载 ， 不 多说 。   bootstrap 提供   text - lowercase   ,   text - uppercase   ,   text - capitalize   class :   HELLO   world     world     world   控制 文本 对齐 方式   作用 p 段落 盒子 属性 支持 :   text - left   ,   text - center   ,   text -   ,   text - justify   ,   text - nowrap   。   css 都很 简单 :   lead 盒子   都 约定 ，   lead 盒子   是指 class 属性 lead div 标签 ， :     ， lead 盒子 ， 边框 额外 加上 去的 。 用来 特别 。   jumbotron 盒子   bootstrap 提供 jumbotron 盒子 首页 用于 展示 特别 希望 读者 阅读 信息 。   好 ， jumbotron 盒子 。   pull - left pull -   bootstrap class 属性 来左 对齐 右 对齐 标签 元素 。   tabs 制作   利用 bootstrap 制作 tabs ， 建立 一个 ul 无序 列表 ， class 属性 设置   nav   nav - tabs   ， 制作 一个 简单 tabs 。   Features   Details   pill 形状 tabs 制作   Features   Details   list - inline   ul ol 加上   list - inline   属性 ， 来是 li 列表 元素 水平 inline - block 显示 ， 所示 :   第一个 li   第二个 li   kbd 标签   kbd 标签 用来 显示 按键 组合 :   Ctrl + X   制作 一个   Bootstrap   风格 带 链接 按钮   bootstrap 默认 button 制作 标签 ， 点击 动作 还 额外 onclick 去 定制 ， 动作 仅仅 打开 网页 ， a 标签 会更 合适 ， 还 a 标签 看上去 一个 按钮 ， 会 好看 ， 参看   网页   ， 代码 所示 ：   Click   !",
            "tags":"html5_tutorial",
            "url":"articles/html5-tutorial-bootstrap.html"
        },
        {
            "title":"html5学习教程二css篇",
            "text":"写法   谈到 inline   css 肯定 作用 于本 标签 ， 写法 简化 ， style 引入 属性 即可 。 谈到 外部 css ， 写法 都是 所示 :   第一个 元素 简单 称之为 css 选择 器 ， 网络 抓取 中也 类似 概念 。 花 括号 类似   inline   css   格式 ， 用分 号 隔开 ， 换行 不 换行 都是 无所谓 ， 美观 都 一个 属性 占 一行 。   css 选择 器   html5 例 ， html5 内置 标签 都是 引用 ， body ， article ， video ， table ， figure 。 css 中 引用 section ， 文档 section 标签 元素 选中 。   html5 中   class   属性 来将 元素 归于 一类 ， 假设 :     p . emph   选中 p 标签 class 属性 emph 标签 。   css 中 形式 ：   完整 形式   * . hightlight   ， class 属性 hightlight 元素 都将 选中 。   id 属性 可用 定义 标签 唯一 id ， 就用   # idname   选中 标签 即可 。   子 选择 器   h1   >   strong   ， 只 选择 h1 标签 下   第一个   strong 标签 ， 下是 意义 上的 父子 标签 包含 关系 下 ， strong 标签 em 标签 ， em 标签 h1 标签 ， 则该 strong 元素 逐级 选择 选中 。   后代 选择 器   figure   p   选择 figure 标签 元素     p 标签 元素 。 谈及 标签 元素 方法 都 用的 ，   # footer   . emph   选择 id footer 标签 class 属性 emph 标签 。   更 css 选择 信息 请 参看 w3school   css 元素 选择 详解   ， 一块 弄 得太 。 实际上 选择 逻辑 弄 得越 css 代码 维护 越 困难 ， 实践   class     id   管理 css 属性 。   带上 属性 选择   href 属性 a 标签 才 样式 :   href 属性 title 属性 a 标签 才 样式 :   属性 值也 指定 :   伪类 选定   带 : 冒号 跟着 标签 伪类 ， 是值 标签 某种 状态 ， 最 常见 a 标签 状态 ， 所示 :   - child 伪类   是父 标签 第一个 子 标签 元素 才会被 选定 。   nth - child 伪类   是父 标签 几个 子 标签 元素 才会被 选定 。   css 选择权 值   标签 多个 css 语句 选定 ， 权值 ：   css 样式 层叠 优先级   内联 样式   >   嵌入 样式   >   外部 样式   ! important   用法   css 设置 不可避免 会 发生 样式 重叠 覆盖 ， 尽可能 统一 css 设置 ， 嫌 麻烦 懒得 弄了 ，   ! important   手工 提高 css 设置 优先级 ( 参考   网页   。 ) 。 所示 ：   控制 表格 各项 都 居中 对齐 。   css 长度 单位   css 很多 长度 单位 ， 单位 熟悉   ( \\ LaTeX )   会对 单位 很 眼熟 。 长度 单位 ： 1in   =   2.54 cm   =   25.4 mm   =   72pt   =   6pc   ， 不 推荐 。   篇 网页   推荐   px   ，   em     %   长度 单位 。 \" px \" \" % \" css 特有 ， 其会 显示屏 变动 ， 1em 字体 M 宽度 （ TeX 情况 ） 。 px 值得 ， 其会 显示 设备 而有 很 调整 ， 更 信息 请 参看 提到 参考 网页 。   css 盒子 模型   html 显示 布局   ( TeX )   显示 布局 采用 浮动 盒子 模型 ， 上 到下 ， 左 到右 ， 一个个 盒子 排 ，   ( TeX )   更 ， 一个 分 页 算法 。 简言之 一个 标签 元素 都是 一个 盒子 ( 还 不 太 一个个 字 一个 盒子 ，   ( TeX )   一个个 字都 一个 盒子 。 )   。   图片 来自   网页   。   篇 文章   讲解 得很 好 ， 简要 介绍 ， 放在 短 代码 环境 都 用作 css 属性 。 盒子 最 中心 content 区域 ， 盒子   box - sizing   默认 值 ，   width   控制 content 区域 宽度 。   box - sizing   设置   border - box   ，   width   盒子 宽度 。 一点 简单 数学 加减法 把戏 ， 没什么 大不了 。   类似   height   默认 控制 content 区域 高度 ，   min - width   ,   min - height   控制 盒子 content 区域 最小 宽度 最小 高度 ，   max - width   ,   max - height   控制 盒子 content 区域 宽度 高度 ， 类似 几个 属性   box - sizing   设置   border - box   ， 都 盒子 宽度 高度 。   content 区域 外围 padding 区域 ， padding 区域 透明 ， 盒子 设置   background - color     backgroud - image   ， 会 。 padding 区域 属性 控制 左边 右边 长度 :   padding - top   ,   padding - bottom   ,   padding - left   ,   padding -   。   一个 简便 写法   padding   ， 写法 设置 一个 值 控制 四个 量 很 ， 还 接 多个 值 ， 顺序 ， 不 太 喜欢 用法 。   padding 区域 外面 border 区域 ， 网页 中 一条 条 边框 线 它了 ，     border - width   控制 边框 线的 宽度 。 实际上 一个 简写 ， 类似   padding   ， 四个 值 :   上 ， 右 ， 下 ， 左 :   三个 值 :   上 ， 右和 左 ， 下 :   两个 值 :   ， :   :   border - top - width   上 宽度 ，   border - bottom - width   。   border 区域 外面 margin 边距 区域 。 属性 ， 含义 一看 明白 :   margin - top   ,   margin - bottom   ,   margin - left   ,   margin -   ,   margin   。   border 属性   border 属性 跟上 三个 值 ， :   border - width   border - style   border - color   border - style 情况 ， 常见   solid   实线   dashed   虚线   double   双线   dotted   点线等 ， 更 请 参看   网页   。   css 布局   网站 介绍   css 布局   ， 深入浅出 讲的 很 ， css 布局 css 很 课题 ， 建立 学习 。   display 属性   block   块级 元素 ， 占 满 右边 行的 行 空间 。   div 元素 p 默认 block 元素 ， display 属性   block   。   inline   span 元素 默认   inline   。   占据 宽度 ， 盒子 元素 填满 一行 。   :   无序 列表 有序 列表 item 一行 。 默认   display : list - item ;   。   inline - block   inline - block 块 级 元素 块级 元素 ， 几个 块级 元素 对外 排布   inline   模式 排布 ， css 较新 一个 特性 。 块状 元素 设置 display 属性   inline   ， 块状 元素 都会 内部 尺寸 布局 ， 想要 。     元素 显示 。   visibility : hidden   区别 本该 显示 空间 保留 。   float 属性   元素 居右 放置   clear 属性   两侧 都 浮动 元素   position 属性   css 布局 控制 中 ， positon 一个 很 关键 属性 。 参考   网页     网页   。 position 属性 四个 值 设置 :   static   static 默认 值 ， 额外 位置 调整 ， \" positioned \" 。   relative   relative static 类似 ， 属性 设置 。   top   ,     ,   bottom   ,   left   属性 调整 ， 含义 原本 在的 地方 。 调整 留下来 地方 会被 保留 ， 后续 动作 。   fixed   fixed 元素 显示 页面 上 ， 比如说 弹窗 广告 。   top   ,     ,   bottom   ,   left   属性 辅助 调整 弹窗 位置 。   absolute   absolute 类似 fixed ， 视窗 固定 ， 页面 固定 。 设置 :   是个 目录 ， 放在 正文 左边 ， 不用 absolute 布局 ， 右边 空间 释放 。 请 参看   网页 nav 标签 元素   。",
            "tags":"html5_tutorial",
            "url":"articles/html5-tutorial-css.html"
        },
        {
            "title":"html5学习教程一html篇",
            "text":"If       a   english   reader ,   I   recommend     article       html5   starting   point .   第一个 模板   doctype 声明   html5 doctype 声明 简单 ， 开头 简单 一行 即可 :     html   标签 ，   head   标签 ， head 标签 内容 显示 网页 上 ， 网页 配置 信息 。   字符集 设置 utf - 8   html5 更 简洁 语法 :     body   标签 存放 显示 网页 内容 。   第二个 例子   html5 新 很多 文档 结构 标签 ， 标签 布局 含义 ， 相当于 一个 自带 名字 div ， 默认 标签 。 作用 html 内容 分组 ( group ) 。   常用 标签 含义 ， 中 ， 尽量 规范 标签 。   header :   一个 网页 总 要有 个头 ， 推荐 都 标签 。   nav :   目录 导航 菜单 。   section :   是本 网页 主体 信息 主 页面 — — 类似 GUI 显示 窗口 。   article :   section 独立 内容 。   :   网页 主体 信息 不 太 相关 信息 。   footer :   作者 ， 版权 脚 注等 信息 。   都 div 取代 ， 中 默认 标签 需求 ， html5 默认 标签 。   例子 标签 ， 很 常用 标签 ， 承接 所讲 补充 常用 html 标签 清单 。   常用 html 标签 清单   ul :   不 编号 列表 ， 无序 列表 （ Unordered   list ） 。 item   li   标签 封装 。   ol :   编号 列表 ， 有序 列表 （ Ordered   list ） 。 item   li   标签 封装 。   h1 , h2 , h3   ...   标题 标签 ， 数字 标题 层级 。   p :   段落 标签 。   b :   文字 加粗   i :   文字 斜体   br   换行   hr   水平线   img   图片 ， 最 常用 属性   src   ， 指明 图片 引用 地址 。   建立 一个 链接   a :   引用 链接 标签 ， 常用 属性   href   ， 指明 引用 地址 ，   title   悬浮 提示 文字 。   一个 链接 用来 下载 文件 ，   download   属性 指定 默认 保存 文件名 。   连接   target = \" _ blank \"   属性 ， 目标 连接 会在 浏览器 新 标签 页 打开 。   创建 一个 电子 邮箱 链接 ：   文字 html5 规范   html5 提出 规范 ， 不 推荐   < b >   标签 文字 用途 （ 文字 加粗 词 提醒 读者 词 特别 记忆 ） 。 推荐   < em >   标签 一级 ，   < strong >   标签 更进一步 。 默认 样式 中 ，   < em >   斜体 ，   < strong >   是粗 体 。 html5 是将 表达 文字 样式 标签   < b > < i >   尽可能 不用 废弃 ， 文字 都 推荐   < em >     < strong >   标签 。 设计 思路 html 一个 描述 文档 内容 结构 标签 系统 ， 而不 带有 内容 表现 形式 东西 。 推荐 html5 规范 ， 少用   < b >   标签   < i >   标签 。 请 参看   网页   讨论 。   注释   有序 列表 带 无序 列表   无序 列表 嵌套 进去 即可 。   table   table 表格 用于 布局 ， 不 推荐 风格 ， html 标签 尽可能 文本 结构 层而 非 表现 形式 层 。 一个 完整 table 模板 所示 :   表格 标题 caption 标签   标签   fullname     tr   table   row   表格 中的 一行     table   head   表格 列名   td   table   data   表格 展示 数据   大体 html 上画 表格 如上 示了 ， 更 漂亮 表格 制作 都是 css ， 先 略过 。   div span   div （ division ） html 标记 语言 中 区块 。 html 页面 显示 元素 好比 一个个 盒子 排布 ，   div   看作 一个 定义 盒子 。 html 中有 两种 显示 风格 盒子 ， 一种 块状 区块 ， p 段落 标签 ； 一种 inline 盒子 ， 比如说 em 标签 ， 换行 。   div 标签 更 确切 表达 块状 区块 ， 看作 display 属性   block   （ 不 ， 推荐 接受 设定 ） ； inline 区块 ，   span   标签 元素 ， 理解 为改 标签 元素 display 属性   inline   。   inline   css   最 css 属性 inline   css 模式 html 标签 中   style   属性 加上 。 所示 ：   font - size   字体 大小   color   字体 颜色 ，   css 支持   color 关键词 清单   。   font - family   字族 ，   css 支持   字族 信息   。   文字 标签 都 三个 属性 控制 其内 文字 大小 ， 颜色 字族 。 都 推荐 css 控制 ， 思路 顺序 优先 inline   css ， 太过 情况 下才 单独 css 控制 。   background - color   背景 颜色 。 读者 熟悉 LaTeX 排版 系统 ， 都 LaTeX 排版 很 核心 一个 概念 盒子 。 html ， 一个个 标签 看作 一个个 排版 用的 盒子 。 background - color 控制 一个 盒子 背景 颜色 。   text - align   文字 标签 盒子 里的 对齐 方式 。 可选 参数 :   left ,   ,   center 。   外部 css   一种 说法 ， 是将 放在 html   < head >   标签 css 外部 css 文件 引用 区分 开来 ， 区别 不 大吧 。 网络 上 一种 说法 html   < head >   标签 多用 id css 定义 ， 外部 css 文件 只用 class 定义 好 普适 性 ， 削足适履 。   一个 总的 原则 推荐 class ， 元素 才用 id 属性 控制 。   放在   < head >   标签 css 大致 格式 引入 进来 :   引入 外部 文件 css :   外部 css 文件 还 进一步 引用 css 文件 【 参考   网页   。 】 :   设置 背景 图片   设置 背景 图片 位置   设置 背景 图片 位置 ， 值有 top ， center ， ， left ， top ， bottom ， 所示 :   只 给出 一个 值 ， 第二个 值是 默认 值 center 。   设置 背景 图片 重复   默认 repeat ， 设置   - repeat   ， 背景 图片 重复 以铺 满 背景 。   设置 背景 图片 不 页面 滚动   设置 背景 图片 尺寸   设置   cover   ， 背景 图片 会 拉伸 足够 大 ， 覆盖 区域 ， 图片 部位 显示 背景 中 。   设置     ， 背景 图片 会 拉伸 长度 宽度 不 超过 背景 为止 。   还 指定 宽高 ， 是宽 100px ， 高 150px :   设置 背景 颜色   html 标签 盒子 背景 颜色 ， color 设置 字体 颜色 。   控制 文本 大小写   所示 ， 依次 :   大写 ， 首 字母 大写 ， 小写 。   边框 画 一个 圆   边框 一个 圆了 。   z - index 属性   css 中 标签 盒子 设置 z - index 属性 ， 影响 标签 盒子 堆叠 顺序 。 比如说 header 标签   z - index   属性 设置 1 ， 都 不 设置 ， 保证 header 网页 头 第一个 先 堆放 。 :   表单   html 中的 表单 情况 ， 详细 。 表单 是指   form   标签 加上 其内 包含   input   元素 。 input 元素 熟知 文本 输入 框 ， 下 拉 列表 ， 单选 框 ， 复选 框 。   表单 元素 类型 input 标签   type   元素 定义 ， 详细 :   单行 文本 输入   单行 文本 输入 input 标签 ， type 类型   text   ， 文字 推荐   label   标签 。   input     属性 很 ， 值 文本 输入 值的 变量 名 （ python wsgi 机制 就将 刷成   form . yourname   引用 ） 。   :   多行 文本 输入   多行 文本 输入   textarea   标签 生成 ， 先 简单 下 即可 。     textarea         加上 action   表单 form 标签 上 加上 action 属性 ， 表单 内 定义 submit 按钮 input 元素 ， 点击 会将 数据 发送 action 去 ， 方法 method 属性 定义 ， 默认 GET 。   required   加上 requird 属性 ， 字段 填 上值 。   placeholder   预 显示 文字   按钮   html 好几种 方法 创建 一个 按钮 ， w3school 不 推荐 button 标签 ， 推荐 示的 input 标签 形式 :       属性 定义 按钮 上 显示 文字 。 跳 转 form 标签   action   属性 定义 ， 还 定义   method   属性 定义 HTTP method ， 一个 表单 提交 例子 :   :   password :   还 一个 新的 type 类型   password   ， 类似 单行 文本 输入 ， 是在 输入 密码 ， 屏幕 上 显示 。   重置 按钮   按钮 会将 表单 内容 清空 。   单选 按钮   Male   Female   新   checked   ， 默认 单选 按钮 复选 按钮 选中 ， 设置   \" checked \"   默认 选中 。   复选 按钮   喜欢 吃的 水果 :   apple   banana   pear   label 标签   标签 用户 输入 框的 内容 ， 一个 用途 ， 改进 鼠标 用户 可用性 ， 用户 点击 标签 ， 将会 聚焦 目标 表单 对象 上 ， 只 设置 ：   响应 式 布局   提示 ： 推荐 bootstrap 响应 式 设计 ， 内容 有助于 理解 bootstrap 内部 响应 式 布局 。   请 读者 先 阅读   篇 文章   。 篇刚   Ethan   Marccote   给出 例子 有个 信息 ， 设备 像素 分级 :   大于 1300 像素   600 1300 像素   400 600 像素   小于 400 像素   像素 分级 设备 css 设置 提供 参考 。   网页 都要 加上 一行 :   网页 默认 宽度 设备 宽度 ， 原始 缩放 1 。   元素 宽度   width :   xxx   px   写死 了的 css 设置 ，   %     auto   。 字体 大小 都 推荐   em   大小 。   h1   默认 大小   1.5 em   。   small   默认   0.875 em   。   流动 式 布局 ， 区块 位置 都是 浮动 ， 情况 下会   position :   absolute   ， 会 带来 很多 麻烦 ， 尽量 少用 。   屏幕 响应 式 多个 css 配置 :   【 css 很多 通用 配置 是多 设备 皆 ， 屏幕 响应 css 放在 css 文件 面 。 】   参看   篇 文章   ， 提到 流行   mobile -   设计 思路 ， 有限 照顾 手机 小 屏幕 设备 设计 流程 。 先写 好 通用 css 配置 ， css 文件 面 设置 屏幕 响应 css 设置 。 最小 屏幕 照顾 :     min - width   是指 设备 宽度 至少 大于 值 ，   max - width   是指 设置 宽度 小于 值 。 例子 ， 假设 设备 750px ， 第一个 第二个 配置 都 ， css 覆盖 配置 ， 定制 生效 ， 先调 手机 端的 mobile - 思路 。   图片 ， 设置 宽度 。   - js   class   说 class 用来 设置 情况 下 javascript 禁用 css 。",
            "tags":"html5_tutorial",
            "url":"articles/html5-tutorial-html.html"
        },
        {
            "title":"http知识",
            "text":"HTTP 知识   URL 结构   URL 结构 :   :   scheme :   描述 访问 服务器 协议 ， 获取 资源 ， 最 常见 http ， ftp 。   user : password :   用于 http 认证   host :   获取 资源   port :   连接 端口号   path :   访问 资源 path   query :   额外 参数   fragment :   片段 ， client 。 一个 params 不 太 常用 。   URL 是只 支持 ascii 字符 ， 字符 utf - 8 编码 操作 。 转义 字符   %   ， 空格 SPACE ， URL 中的   % 20   。 ascii ， 字符 转义 ， 中文 字符 ， utf - 8 编码 转义 。   \" 书 \"   URL 中   % e4% b9% a6   。 细节 ， 操作 中 编程 语言 都 提供 函数 接口 了的 ， python urlencode 函数 。   http   header 详解   小节 参考   网页   ， 内容 整理 不错 ， 都搬 ， 做 备份 。   http 协议 过程 分为 http 请求 过程 http 响应 过程 ， http 请求 过程 发送 http 请求 信息 包 ， http 响应 过程 发送 http 响应 信息 包的 过程 。   http   请求 信息 包   http 请求 信息 包 格式 :   打开 google 主页 请求 包是 :   第一 熟知 ，     GET   方法 ， 打开 URL   /   ， http version   HTTP / 1.1   。 请求 包 header 内容 不定 ， 再细 讲 。 请求 信息 包 大多 都 entity - body ， 额外 content 内容 ， 就算 header 完 要留 空白 行 。   请求 headers 详解   header   解释   示例   Accept   指定 客户端 接收 内容 类型   Accept :   text / plain ,   text / html   Accept - Charset   浏览器 接受 字符 编码 集   Accept - Charset :   iso - 8859 - 5   Accept - Encoding   指定 浏览器 支持 web 服务器 返回 内容 压缩 编码 类型   Accept - Encoding :   compress ,   gzip   Accept - Language   浏览器 接受 语言   Accept - Language :   en , zh   Accept - Ranges   请求 网页 实体 一个 多个 子 字段   Accept - Ranges :   bytes   Authorization   HTTP 授权 授权 证书   Authorization :   Basic   QWxhZGRpbjpvcGVuIHNlc2FtZQ = =   Cache - Control   指定 请求 响应 遵循 缓存 机制   Cache - Control :   - cache   Connection   持久 连接   （ HTTP   1.1 默认 持久 连接 ）   Connection :   close   Cookie   HTTP 请求 发送 时 ， 会把 保存 请求 域名 下的 cookie 值 发送 web 服务器 。   Cookie :   $ Version = 1 ;   Skin = ;   Content - Length   请求 内容 长度   Content - Length :   348   Content - Type   请求 实体 MIME 信息   Content - Type :   application / x - www - form - urlencoded   Date   请求 发送 日期 时间   Date :   Tue ,   15   Nov   2010   08 : 12 : 31   GMT   Expect   请求 特定 服务器   Expect :   100 - continue   From   发出 请求 用户 Email   From :   user @ email .   Host   指定 请求 服务器 域名 端口号   Host :   www . zcmhi .   If - Match   请求 内容 实体 相 匹配 才   If - Match :   \" 737060cd8c284d8af7ad3082f209582d \"   If - Modified - Since   请求 指定 时间 修改 请求 成功 ， 未被 修改 返回 304 代码   If - Modified - Since :   Sat ,   29   Oct   2010   19 : 43 : 31   GMT   If - None - Match   内容 未 改变 返回 304 代码 ， 参数 服务器 先前 发送 Etag ， 服务器 回应 Etag 判断 改变   If - None - Match :   \" 737060cd8c284d8af7ad3082f209582d \"   If - Range   实体 未 改变 ， 服务器 发送 客户端 丢失 ， 发送 实体 。 参数 Etag   If - Range :   \" 737060cd8c284d8af7ad3082f209582d \"   If - Unmodified - Since   只 实体 指定 时间 未被 修改 才 请求 成功   If - Unmodified - Since :   Sat ,   29   Oct   2010   19 : 43 : 31   GMT   Max - Forwards   信息 代理 网关 传送 时间   Max - Forwards :   10   Pragma   用来 包含 特定 指令   Pragma :   - cache   Proxy - Authorization   连接 代理 授权 证书   Proxy - Authorization :   Basic   QWxhZGRpbjpvcGVuIHNlc2FtZQ = =   Range   只 请求 实体 一部分 ， 指定   Range :   bytes = 500 - 999   Referer   先前 网页 地址 ， 请求 网页 紧随 其后 , 来路   Referer :   TE   客户端 接受 传输 编码 ， 通知 服务器 接受 接受 尾加 头 信息   TE :   trailers , deflate ; q = 0.5   Upgrade   服务器 指定 某种 传输 协议 服务器 转换 （ 支持 ）   Upgrade :   HTTP / 2.0 ,   SHTTP / 1.3 ,   IRC / 6.9 ,   RTA / x11   User - Agent   User - Agent 内容 包含 发出 请求 用户 信息   User - Agent :   Mozilla / 5.0   ( Linux ;   X11 )   Via   通知 网关 代理 服务器 地址 ， 通信 协议   Via :   1.0   fred ,   1.1   .   ( Apache / 1.1 )   Warning   消息 实体 警告 信息   Warn :   199   Miscellaneous   warning   http   响应 信息 包   http 响应 信息 包 格式 :   :   响应 体   HTTP / 1.1   http version ，   200   http 状态 码 ，   OK   一个 描述 文字 。 响应 体的 header ， 空 一行 ， 响应 信息 包的 发送 cotent 内容 。   http 方法 method 状态 码为 熟知 ， header 内容 列 。   响应 headers 详解   header   解释   示例   Accept - Ranges   服务器 支持 指定 请求 及哪 种 类型 分段 请求   Accept - Ranges :   bytes   Age   原始 服务器 代理 缓存 估算 时间 （ 以秒计 ， 非负 ）   Age :   12   Allow   网络资源 请求 ， 不 返回 405   Allow :   GET ,   HEAD   Cache - Control   告诉 缓存 机制 缓存 及哪 种 类型   Cache - Control :   - cache   Content - Encoding   web 服务器 支持 返回 内容 压缩 编码 类型 。   Content - Encoding :   gzip   Content - Language   响应 体的 语言   Content - Language :   en , zh   Content - Length   响应 体的 长度   Content - Length :   348   Content - Location   请求 资源 替代 备用 地址   Content - Location :   / index . htm   Content - MD5   返回 资源 MD5 校验 值   Content - MD5 :   Q2hlY2sgSW50ZWdyaXR5IQ = =   Content - Range   返回 体中 字节 位置   Content - Range :   bytes   21010 - 47021 / 47022   Content - Type   返回 内容 MIME 类型   Content - Type :   text / html ;   charset = utf - 8   Date   原始 服务器 消息 发出 时间   Date :   Tue ,   15   Nov   2010   08 : 12 : 31   GMT   ETag   请求 变量 实体 标签 值   ETag :   \" 737060cd8c284d8af7ad3082f209582d \"   Expires   响应 过期 日期 时间   Expires :   Thu ,   01   Dec   2010   16 : 00 : 00   GMT   Last - Modified   请求 资源 修改 时间   Last - Modified :   Tue ,   15   Nov   2010   12 : 45 : 26   GMT   Location   用来 重 定向 接收 方到 非 请求 URL 位置 请求 标识 新的 资源   Location :   Pragma   包括 特定 指令 ， 响应 链上 接收 方   Pragma :   - cache   Proxy - Authenticate   指出 认证 方案 代理 URL 上的 参数   Proxy - Authenticate :   Basic   refresh   于重 定向 一个 新的 资源 创造 ， 5 秒 重 定向   Retry - After   实体 暂时 不 可取 ， 通知 客户端 指定 时间 再次 尝试   Retry - After :   120   Server   web 服务器 软件 名称   Server :   Apache / 1.3 . 27   ( Unix )   ( Red - Hat / Linux )   Set - Cookie   设置 Http   Cookie   Trailer   指出 头 域在 分块 传输 编码 尾部   Trailer :   Max - Forwards   Transfer - Encoding   文件 传输 编码   Vary   告诉 下游 代理 缓存 响应 原始 服务器 请求   Via   告知 代理 客户端 响应 发送   Warning   警告 实体   WWW - Authenticate   客户端 请求 实体 授权 方案   WWW - Authenticate :   Basic   http 状态 码详   MIME   type :   全称 Multipurpose   Internet   Mail   Extensions   ， 看得出 来和 email 系统 ， 说 ， 其在 http 用于 描述 文件 类型 即可 。   一行 ， image / jpeg   MIME   type 描述 ， image 是主 文件 类型 ， jpeg 是次 文件 类型 。 最 常见 html 文件 ， MIME   type   text / html   。   URI :   Uniform   Resource   Identifier   ， 常见 URN URL 概念 。 参考   网页   。 URN URL 都 URI 范畴 ， 都 视同 一连串 字符串 来将 资源 文件 ， URN URL 两种 标识 方法 ， URL 类似 门牌 号码 街道 描述 ， 大致 结构 :   URN :   绝大部分 URI URL ， URN 只 特别 领域 。",
            "tags":"programming",
            "url":"articles/httpzhi-shi.html"
        },
        {
            "title":"linux系统基础知识",
            "text":"debian 系 rpm 系   Linux 主流 包 管理系统 分为 debian 系和 rpm 系这 两个 。 CentOS Redhat rpm 系 ； ubuntu debian 系统 debian 系 。 ubuntu 中 第一个 学习 命令   apt   命令 ， 系统软件 安装 卸载 更新 工作 ； centos 第一个 学习 命令   yum   命令 ， apt 命令 类似 一系列 系统 软件包 管理 操作 。   yum 命令 rpm 命令   yum   install     安装 软件   yum   groupinstall     安装 软件 组 。   yum   update   更新 系统 软件包   yum   remove     卸载 软件   yum   groupremove     卸载 软件 组   yum   clean   清除 系统 软件包 管理 相关 缓存   rpm   - i   . rpm   本地 安装 rpm 包 ， 会 加上   - vh   选项 显示 更 多的 安装 信息 安装 进度 。   rpm   - qa |  grep     搜索 本地 安装 了的 名字 带有 rpm 包 ，   apt 命令 dpkg 命令   系统 安装 好 第一件 要做 事是 选 一个 源 ， 安装 更新 。 系统 设置 → 软件 更新 ， \" 下载 \" 软件 源的 服务商 ， 搜索 一个 速度 最快 源 。 终端 中 执行 命令 升级 系统 软件包 ：   apt   update   更新 源   apt   upgrade   升级 源下 安装 了的 软件 （ 很多 软件 升级 推荐 命令 ：   （   apt   dist - upgrade   不 出错 些 。 ）   apt   install     安装 软件   apt   autoremove   清理 软件 残余   apt   autoclean   清理 安装 软件 留下 缓存   apt   remove     删除 软件   apt   purge     删除 软件 包括 软件 配置   设置 root 用户 密码   Centos Ubuntu 安装 好 ， 创建 一个 用户 密码 ， root 用户 密码 设置 。 终端 输入 ：   sudo   passwd   root   设置 好 密码 ， 输入 ：   su   root 账户 ， 输入 ：   exit   退出 root 用户 。   passwd 命令 还 修改 用户 密码 ：   sudo   passwd   youname   。   一种 情况 忘了 用户 密码 包括 root 密码 ， 操作 修改 root 密码 ：   系统 重启 菜单 选项 ，   e   grub 编辑 模式 ， kenerl 一行 再   e   编辑 该行 ， 行尾 加上   single   ，   Enter 确认 ，   b   单用户 维护 模式 ，   passwd   命令 修改 root 密码   （ 此条 参考 vbird 第五章   ） 。   最 命令   打开 终端 ， 一个 美元   $   符号 ， 输入   su   命令 ， root 账户 ， 开头 一个   #   符号 ，   $   用户 ，   #   超级 用户 。 一个 波浪 号   ~   ， 波浪 号的 用户 目录 ，   ~   目录   / home / wanze   。   Linux 系统 最 常用 两个 命令   ls     cd   。   ls   命令 会 列出 当前目录 包含 文件夹 文件 ，     cd   folder _   文件夹 。 再 输入   cd   ， 会 回到 家 目录 。 等于 执行   cd   ~   。   cd 命令 还   cd   .   ， 点 当前目录 ，   cd   ..   返回 上 一级 目录 。   cd   /   ， 跳 系统   /   目录 下了 。   命令 学会 熟的 ， 请 读者     学习 ：   cp   复制 文件 命令     查看 系统 命令 位置   touch   创建 文件 对已 文件 更新 时间 戳   rm   删除 文件 ，   - r   选项 删除 一个 文件夹 ， 文件夹 文件夹 文件 。   mkdir   创建 文件夹 ， 加上   - p   选项 创建 多层 目录 。   rmdir   删除 文件夹 ， 加上   - p   选项 删除 多层 目录 ， 保证 文件夹 空的 。   mv   文件 ， 命令 重 命名 操作 。   shell   shell 好像 一个 包装 层 ， shell Linux 操作系统 核心 kernel ， 进去 ， 将会 一个 艰深 领域 ， 计算机 硬件 ， 驱动 程式 Linux 系统 设计 核心 ， 知识 都 专业 ， 人是 不 深究 。   Shell 提供 操作系统 核心 （ 称为 kernel ） 用户 之间 交互 程序 ， 参见 下图 。 kernel 启动 时被 装入 内存 , 管理系统 关机 为止 。 负责 建立 控制 进程 ， 管理 内存 、 文件系统 、 通信 。 实用 程序 ， 包括 Shell 在内 都 存储 硬盘 上 。 kernel 程序 硬盘 中 装入 内存 ， 运行 ， 程序 运行 结束 后 回收 程序 占用 系统资源 。 Shell   是从 登录 运行 实用 程序 ， 用户   Shell   脚本 命令 行的 方式 输入 命令 ， 翻译 命令 用户 kernel 交互 。   系统 用的 Bourne   Shell （ bash   shell ） 。 本文 提到 shell 即指 bash   shell ， shell 不 讨论   PATH 变量   输入 ls 命令 ， shell   PATH   变量 搜索 相关 命令 文件 所在 。 读者 查看 变量 ：   安装 软件 ， shell 却 发现 找 不到 ， 软件 可执行文件 目录 系统   PATH   环境 下就 找到 。 语法 ：   管道   简单 shell ， 简单 下 管道 重 定向 两个 概念 ， 最 简单 一行 bash 命令 会 涉及 到这 两个 概念 。   管道 最 简单 理解 第一个 shell 命令 输出 流 流向 一个 shell 命令 中 输入 。 比如说 火 狐 浏览器 卡住 （ 随便 举个 例子 ， 没 。 。 ） ， 看 pid kill 掉 ， 查看 ：    |  管道 概念 ，   ps   aux   命令 ， 输出 送入   grep   命令 中 去 ， 抓取 包含 firefox 字符 匹配 行 。   重 定向   kernel 一个 进程 都 默认 都 0 ， 1 ， 2 三个 文件 符 。 0 标准 输入 ， 1 标准 输出 ， 2 标准 错误 输出 。 标准 输出 指 输出 终端 ， 标准 错误 输出 输出 终端 。   文件 符被 分配 非 终端 ， I / O 重 定向 。 Shell 关闭 标准 输出 ， 标准 文件 符   1 （ 终端 ） 分配 文件 ， 来把 输出 定向 文件 ；   文件 符 0 ， 来把 标准 输入 定向 ； 文件 符 2 来重 定向 标准 错误 输出 。   >   重 定向 操作 。   > >   文件 追加 操作 ， 相当于 文件 操作   a   操作 。   最 简单 重 定向 ：   其将 目录 下 glob 抓取 到的 txt 文件 都 合并 成 一个 字符串 流 ， 重 定向 送入 test . txt 文件 中 去 。   cat   * . txt   命令 神奇 之处 ， 神奇 Linux 终端 文件 glob 操作   *   （ 任意 数目 任意 字符 ）     （ 一个 任意 字符 ） 支持 。   echo   * . txt   命令 查看 。   再学 几个 命令   clear   终端 清屏 ， 内容 清除 ， 终端 都 带有 记忆 功能 回 滚 功能 ， 向上 滚 ， 看 内容 。   history   显示 登录 用户 执行 过的 命令 ， 登录 用户 家 目录 下的   . bash _ history   文件 内容 。   cat   cat 命令 简单 用法 ：   cat   test . txt   ， 查看 文本文件 内容 ， cat 命令 来自 英文 单词 ( concatenate ) ， 英文 单词 通用 联接 ， 延伸 计算机 领域 单词 指 两个 字符 联接 成 一个 。 cat 命令 功能 两个 更 多的 字符 流 文件 联接 一个 字符 流 ， 默认 显示 终端 上 ， 重 定向 字符 流 流向 文件 保存 。     命令 常用 接受 管道 传 字符 流 信息 ， 延缓 打印 读者 阅读 。   额外 值得一提的是   windows 下的   powershell ， 管道 ：   type   test . txt  |    head   打印 文件 前 几行 内容 ，   - n   指定 打印 行 。   tail   打印 文件 后 几行 内容 ，   - n   指定 打印 行 。 tail 一个 用法 ，   加上   - f   选项 跟踪 打印 文件 附加 内容 。   uname   命令 输入 简单 返回 \" Linux \" 字符串 ， 用处 不 大 。 查看 uname 命令 信息 得知 命令 返回 电脑 操作系统 ， 硬件 架构 ， 内核 版本号 信息 。 ：   whoami   whoami 返回 登录 用户 名字 ， 等价   id   -   。   文件 用户   小节 参考   阮 一峰 inode 文章   。   Linux 系统 一句 很 有名 一句 话 ，   都是 文件   。 文件 分为 ：   文件 、 目录 文件 、 字符 设备 文件 、 块 设备 文件 、 链接 文件 、 套 接字 文件 。   Linux 操作系统 要找 文件 ，   / / passwd   文件 。 文件名 ， 一连串 字符串 ， 来找 inode 号 ， inode 号来 获取 inode 信息 ， inode 信息 ， 找到 文件 所在 block ， 读出 数据 。   Linux 文件名 两种 写法 ， 一种 路径 ， 一种 路径 。 路径   /   开头 文件名 ， 而以   .     ..   开头 路径 写法 。 路径 shell 工作 目录 ， pwd 命令 查看 shell 工作 目录 。   pwd 命令   pwd 命令 用来 查看 工作 目录 文件系统 中的 路径 。   ：   /   Linux 文件系统 地方 。   ~   shell 登录 用户 家 目录 所在 ， shell   $ HOME   变量 值 。   .   路径 写法 ， 当前目录 。   ..   路径 写法 ， 上 一级 目录 。   stat 命令   stat   命令 用来 查看 文件 信息 。   信息   Inode   inode 号 （ 看作 电脑 文件名 ） 之外 ， 信息 都是 存放 Inode   table   。 大体 ： 文件 大小 ， 文件 类型 ， 权限 ， 所有者 id ， 群 id ， access   time （ 上 打开 时间 ） ， modify   time （ 上 修改 时间 ） ，   change   time （ 上 inode 信息 读写 权限 更改 时间 ） 。   文件 例子 ， Links 1 ， 目录 文件 Links 1 ， 含义 是有 硬 连接 （ hard   link ） 指向 ， 一般来说   2 + n ， n 目录 子目录 数目 ， Linux 下 新建 文件夹 都 预先 包含   .     ..   两个 子 文件夹 ， 用途 读者 猜 到了 ， 做 路径 用的 （ 参考   网页   ） 。 讨论 硬 连接 会 讨论 硬 连接 文件夹 ， 硬 连接 文件夹 会 破坏 Linux 层级 文件系统 。   块 设备 文件 ， 其是 一个 文件系统 ， 大小 查看 加上   - f   选项 。   ls 命令   ls 命令 最 常用 两个 选项   - a     - l   ， 一个 是要 显示 隐藏 文件 （ Linux 系统 中 文件名   .   开头 隐藏 文件 ） ， 一个 显示 更 多更 多的 信息 。     - i   选项 显示 文件 Inode 号 。   Linux 系统 最 精彩 管道 重 定向 概念 小的 程序 小的 工具 揉合 一个 协作 整体 ， 先举 简单 例子 看下 ：   会把 一个 文件夹 后缀 txt 文件名 字符 流 扫描 ， 字符 流 包含 目标 文件 文件名 管道 进一步 操作 。   ls   sort   选项 用来 排序 ， 很 有用 ， ， 管道 传递 sort 命令 进一步 排序 操作 。 所示 ：   ls 抓取 文件 字符 流 操作 ， 所示 ：   ​   段 代码   $ i   一个个 文件 字符 流 。   - l 选项 详解   先看 例子 ：   最 是先 第一 栏看 懂 ， 文件 所有者 文件 群 再 讨论 。   第一 栏 文件 属性 开头   d   文件 目录 文件 ，   -   文件 文件 ， 开头   l   文件 链接 文件 （ 讨论 软 连接 相关 ） 。 三个 rwx 文件 所有者 文件 可读 写 执行 ， 控制 执行 ， 就要 属性 改为 rw - ， 文件 权限 控制 更 详细 讨论 。   第二 栏是 hard   links 连接 ， 提到 。   第三 栏是 文件 所有者 ， 第四 栏是 文件 群 ， 第五 栏是 文件 大小 。 第六 栏是 文件 修改 日期 建档 日期 。   UID GID   用户 shell 登录 Linux 系统 ， 一个 login 接口 ， 输入 用户名 密码 才能 操作 。   系统 会   / / passwd   来找 有没有 用户名 ， ， 则把 UID GID 取出 ， shell 家 目录 一并 设置 。   UID   / / shadow   文件 内容 核对 密码 。 密码 核对 成功 ， 成功 登入 shell 。   / / passwd   内容 大体 所示 ：   含义 ：   shell 有个 特别 值 ：   / sbin / nologin   登录 。   ， 系统   / / passwd   登录 用户 GID 查看   / / group   用户 所属 群 组的 信息 。   一行 含义 ：   useradd usermod 命令   useradd usermod 两个 命令 很多 选项 类似 ， 简单 创建 一个 新 用户   很多 选项 设置 useradd 设置 ，   usermod   命令 设置 。     - d   用于 设置 新 用户 家 文件夹 。   - m   选项 只能   - d   选项 所示 ：   用户 原 家 目录 移到 新的 位置 （ 请 参看   网页   ） 。   userdel 命令   userdel 用于 删除 用户 数据 ，   / / passwd   / / shadow   群 组等 相关 数据 。 加上   - r   选项 ， 会把 用户 家 目录 一并 删除 。   groupadd groupmod 命令   类似 groupadd groupmod ， groupdel 命令 。   su 命令 sudo 命令   su 命令 用于 切换 身份 ， 最 常用 一个 选项   - c   ， 用于 用户 身份 执行 命令 。   su 命令 新 切换 用户 密码 ， sudo 命令 只 密码 即可 ， 不 root 用户 密码 没关系 。 Linux 系统   / / sudoers   文件 管理 sudoer 权限 ， 用户 sudoer ， 其是 运行 sudo 命令 。     - u   指定 用户 ， 默认 root 用户 ，   - u   root   是不 写 。   用户 sudoer   运行   visudo   命令 ， 跳 文件 ， 找到 一行 ：   第二行   #   去掉 ， 目标 用户 wheel 群组 中 去 ：   目标 用户 执行 sudo 命令 。   NOTICE   ：   做 不 成功 ， 想要 用户名 加上 去把 ， 大体 ：   chown chgrp 命令   讲 到了 Linux 系统 中 文件 都有 两个 属性 ： 文件 所有者 ， 群是 。 登录 用户 （ 或者说 进程 执行 用户 ） 文件 所有者 ， 再 来看 文件 权限 前 三位 rwx 写的 ， 是可 读 则可 读 ， 写 写 。 权限 管理 第一步 是先 管理 好 文件 所有者 群 。   两个 命令 都 接受   - R   选项 递归 修改 目录 目录 下 文件 文件 属性 。   chmod 命令   chmod 命令 改变 文件 权限 。 用法 ：   命令 接受   - R   选项 递归 修改 目录 目录 下 文件 文件 属性 。   权限 两种 方法 ：   r   ead 、   w   rite 、 执行 (   x   ) 。   a   ， ，   u   ser （ 所有者 ） ，   g   roup （ 群 ）   o   thers （ 用户 ） 。   +     -   加 权限 减 权限 （   =   设定 值的 ） 。   第二个 方法 权限 rwx 分为 三位 ， r 数字 4 ， w 数字 2 ， x 数字 1 ， 比如说 数字 7 rwx ， 比如说 数字 6   rw -   ， 比如说 数字 5   r - x   。   目录 文件 权限 含义   文件 权限 含义 是很 ， 目录 文件 权限 含义 直白 。   目录 文件 读 ls 命令 列 。   目录 文件 写 文件夹 新建 文件 子 文件夹 ， 删除 文件 ， 包括 更名 。   目录 文件 执行 cd 目录 。 用户 cd   / root   文件夹 去的 。 cd 进去 ， 文件 执行 ，   web   服务器 服务 文件夹 时 ， rx 权限 是要 给的 ， w 权限 ， 小心 ， 母 文件夹 权限 没 设置 好 ， x 权限 ， 会 导致 web   服务器 权限 ： Permission   denied   错误 。   硬 连接 软 连接   硬 连接 （ hard   link ） 谈论 ， 提到 一个 文件 Links 1 ， 讨论 创建 硬 连接 创建 一个 新的 文件名 指向 同一个 inode 节点 ， 硬 连接 。 硬 连接 跨 文件系统 ， 连接 目录 。   软 连接 符号 连接 ， 软 连接 相当于 新建 一个 快捷 方式 文件 。 硬 连接 有其 局限 ， 连接 目录 ， 实践 中 常用 是软 连接 。 软 连接 创建 一个 链接 文件 。   ln 命令 默认 创建 硬 链接 ，   - s   参数 创建 符号 连接 。   ​   tar 命令   打包 解压 文件 tar 命令 ， 支持 gzip bzip2 两种 格式 。   常见 打包 解压 ：     - c   创建 打包 文件 ，   - f   选项 指定 文件名 ， 跟着   archive . tar   文件名 ， 跟着 想 打包 进 压缩 文件 文件 文件夹 名 。   解压 文件 带上   - x   选项 ， 带上 一个   - v   选项 linux 命令 中 常见 verbose 模式 ， 显示 更 多的 打印 信息 。   tar 命令 还 支持 格式 打包 解压 ， gzip 格式 ， 就要 带上   - z   选项 ， 文件名   . tar . gz   ， 记住 打包 解压 都要 带上 选项 。   bzip2 格式 ， 就要 带上   - j   选项 ， 文件名   . tar . bz2   。   exclude   选项 ：   压缩 文件夹 排除 掉 文件夹 子 文件夹 ， 更 确切 表述 是以   PATTERN   排除 ， 排除 文件 。 类似 排除 选项 很多 ， 最 简单 子 文件夹 名字 写 ， 排除 子 文件夹 。   - C   选项 ：   是很 有用 一个 选项 ， 想要 解压 内容 文件夹 下就 选项 。   strip - components   选项 ：     - C   选项 单独 一个 ， 想 解压 一个 压缩 包 ， 文件夹 目录   what2.2 /   ， 假设 指定 解压   / root   test 文件夹 ， 其在 test 文件夹 还 会 创建   what2.2 文件夹 再是 内容 。   strip - components     - C   一个 很 有用 用法 ，   重 命名 输出 文件夹   ， 选项 用处 输出 文件夹 路径 名 剔除 掉 几个 ：   ， 文件夹 路径 名 expython 开头 ， 定制 输出 test 文件夹 ， 剔除 文件 文件 路径 名 第一个 ， expython / ， 重 命名 输出 文件夹 功能   （ 参考   网页   ） 。   ps 命令   ps 查看 系统 运行 进程 命令 ， 用法 ：   进程 卡住 ， 运行   ps   aux   查看 进程 进程 号 （ PID ） ， kill （ kill 命令 ， 杀死 进程 。 ） 行了 。   ssh 登录   SSH 协议 用于 计算机 之间 加密 远程 登录 。 小节 参考   阮 一峰 ssh   remote   login   一文   。   ssh 登录 操作系统 都有 便捷 工具 ， 推荐 读者 先 工具 ， 讨论 ssh 命令 用法 概念 。   ssh 登录 命令 格式 :   ssh 默认 端口号 22 ，   - p   指定 端口号 。 username 远程 计算机 用户名 ， host 远程 计算机 ip 地址 。   默认 情况 下 ssh 登录 远程 终端 输入 远程 计算机 密码 ， 一种 公 钥 上 传到 远程 计算机 方法 不用 输入 密码 登录 。 生成 公 钥 :   生成 公 钥 文件 文件   $ HOME / . ssh   （ windows 系统 下也 登录 用户 家 目录 下 ） ， 其为   id _ rsa . pub   ， 一个   id _ rsa   私钥 文件 。 将公 钥 文件 上传 即可 :   懒得 记   ssh - copy - id   命令 ，   id _ rsa . pub   公 钥 文件 内容 ， 复制 粘贴 远程 计算机 （ 想 登录 登录 用户 ） 登录 用户 家 目录 下的   . ssh   （ 新建 ） 文件夹 下的   authorized _ keys   文件 （ 新建 ） 。   免 密码 ssh 登录 ， Github 走 ssh 通道 免 密码 方式 ， 类似 要把 计算机 公 钥 文件 内容 设置 。   ssh 连接 长时间   ssh 连接 远程 主机 ， 执行 长时间 命令 ， 一段 时间 没 去管 终端 窗口 ， ssh 连接 会 自动 中断 ， 终端 远程 相关 进程 会被 kill 掉 。 是会 返回   Broken   pipe   错误 。   一个 简单 解决 方案 是在 远程 主机 上 执行 命令 ， 命令 加上   nohup   命令 ， 类似 格式 :   更好 解决 方案   screen   小 工具 ， 远程 screen 命令 开启 一个 执行 shell 命令 全 屏 窗口 （ 其就 自动 关闭 ） ， 本地 终端 窗口 关闭 ， 远程 主机 相关 进程 会在 运行 。 screen 命令 常见 用法 :   screen 命令   screen   - S     创建 一个 screen 进程 ， 取个 名字 ， screen 进程 名字 。   screen   - ls   电脑 都有 screen 进程 。   screen   - r   thename _ _ thepid   重连 screen 进程 ， 默认 只能 Detached （ 失连 ） 进程 。   exit   退出   Ctrl + a   再 d   断连 ， screen 进程 还 。   screen   - wipe   清除 Dead screen 进程 。   screen   - D   - r   screen 进程 断开 连接 ， 显示 Attached ， 选项 组合 强制 screen 进程 失连 ， 再重 。   设置 后台 服务   写 一个 后台 服务 脚本 ， Linux 系统 一个 后台 服务 。 小节 参考   网页   。   服务 脚本 放入   / / init . d   去 。     service     start +   调用 服务 脚本 。   要让 服务 脚本 开机 启动 ， 推荐   chkconfig +   命令 来做 。   chkconfig   add     添加 服务 chkconfig 管理 。   chkconfig   del     删除 服务   chkconfig   level   < 级别 >       设置 服务 启动 级别   启动 级别 ：   等级 0 ： 关机   等级 1 ： 单用户 模式   等级 2 ： 无 网络 连接 多用户 命令 行 模式   等级 3 ： 网络 连接 多用户 命令 行 模式   等级 4 ：   等级 5 ： 带 图形 界面 多用户 模式   等级 6 ： 启动   ​   常用 级别 设置   35   网络 配置   IP 地址   IP 地址 是由 32 位 二进制 ， 十进制 最小   0.0 . 0.0     255.255 . 255.255   。 是由 NetID HostID ， 网域 NetID 。   IP 地址 分类 ：   系统 ABC 三个 等级 。   IP 两种 IP ，   一种   公网 IP   ， 一个   私网 IP   。   私网 IP 三个 等级 之下 所示 ：   Class   A ： 10.0 . 0.0   -   10.255 . 255.255   Class   B ： 172.16 . 0.0   -   172.31 . 255.255   Class   C ： 192.168 . 0.0   -   192.168 . 255.255   ​   子网 掩 码   子网 掩 码 概念 确实 难 理解 ， 关键 太 拘泥 特例 细节 ， 鸟哥最 说的 ， 子网 掩 码 东西 分割 网 域的 ， 一个 网 域 定义 是由   Network   该网 域 最小 IP   Netmask   子网 掩 码   Broadcast   广播 地址   ​   描述 ， 最 常见   192.168 . 0.0 / 24   24 是指 子网 掩 码 24 1 。 表达 定义 完整 网 域为 ：   192.168 . 0.0   -   192.168 . 0.255   最 核心 知识 ， 子网 掩 码的 重要性 在于 给定 IP ， 其子 网掩 码就 推断 出该 网 域的 Network Broadcast 。 子网 掩 码最 常见 24 1 16 1 ， 都 ， 不定 。   路由   理论 上 位于 网 域内 计算机 才 文件 交互 ， 网域 之间 计算机 信息 都是 路由 IP 分发 信息 互通 目的 。 一块 刚 会很 生疏 ， 建议 跟着 鸟哥的 私房 菜的 幅图 好好 route 流程 ：   机器 上都 一个 路由 表 ， 假设 PC1 要传 资料 PC11 ， 其会 分析 路由 表 ， 发现 目标 IP IP 一个 网域 ， 区域 网 功能 传输 数据 。   发现 目标 IP IP 不再 网域 ， 机会 查询 路由 表 ， 相关 设定 ， 则封 包 发送 默认 路由器 （ gateway ） ， 类似 ， gateway 类似 转发 工作 。   route 命令   route 命令 查看 主机 路由 表 设置 。 会加   - n   参数 ， 会将 主机 名以 IP 形式 显示 。   查看 路由 表 先把 第一 栏   Destination   目标   第三 栏   Genmask   子网 掩 码 组合 网 域的 概念 （ windows 下的 route   PRINT   第一 栏和 第二 栏 ） ， 网关   0.0 . 0.0   则是 缺 省 值的 ， 本机的 网卡 interface 发送 。   FLAG 标志   U   路由 可用 ， G   路由 网关 Gateway ，   H   改行 路由 一个 主机 一个 网域 。   路由 表 规则 ：   依据 网络 界面 IP 路由   手工 设定 路由 ， 设定 路由 是你 网卡 设备 IP broadcast 。   动态 路由 生成   ​   网卡 界面 设置     / / sysconfig / network - scripts / ifcfg - XXX   配置 ：   DEVICE ： 這 個 設 定 值 後 面 接 裝 置 代 號 與 檔 名   ( ifcfg - eth0 )   個 裝 置 代 號 才行 ！ 否 則 會 裝 置 名 稱 找 不到 困 擾 。   BOOTPROTO ： 啟 動 該 網 路 介 面 時 ， 種 協 定 ？   手 動 給 予   IP   環 境 ， 請 輸 入   static       ， 動   IP   時 候 ，   請 輸 入   dhcp   ( 寫 錯 字 ， 為 這 最 關 鍵 字 ！ )   GATEWAY ： 代表 『 整 個 主 機 系 統   default   gateway 』 ，   ， 設 定 這 個 項 目 時 ， 請 特 別 留意 ！ 重 複 設 定 情 況 發 生 喔 ！ 當   ifcfg - eth0 ,   ifcfg - eth1 ....   個 檔 案 ， 個 檔 案 設 定   GATEWAY   即可     / / resolv . conf   设置 DNS 规则 ：     / / hosts   设置 ：     / / sysconfig / network   设置 ：     / / services   记录 記 錄 架 構   TCP / IP   總 總 協 定 ， 包括   http ,   ftp ,   ssh ,   telnet   服 務 定 義   port   number   ， 都 這 個 檔 案 規 劃 出 來 。 想要 訂 個 新 協 定 與   port   對 應 ， 得要 改 這 個 檔 案 ；     / / protocols   定义 出   IP   封包 协定 相关 资料 ， 包括   ICMP / TCP / UDP   這 封 包 协议 定义 。   重启 网络   這 個   script   最 ！ 為 一口 氣 啟 動 整 個 網 路 參 數 ！   會 主 動 去 讀 取 網 路 設 定 檔 ， 很快 恢 復 系 統 預 設 參 數 值 。   ifconfig 命令   ifconfig 命令 用来 查看 网络 配置 信息 ， 信息 含义 ：   ifup ifdown 命令   启用 关闭 网络 界面 。 两个 命令 去 修改 提到   / / sysconfig / network - scripts /   网卡 界面 配置 文件 。   修改 主机 名   centos7 新 一个 命令 很 修改 主机 名 ，   hostnamectl   ， 主机 名有 几个 类似 ：   静态 主机 名   static   瞬态 主机 名   transient   灵活 主机 名   pretty   第二个 命令 设置 主机 名 ， 指定 一个 设置 则要 加上 选项 ：   pretty   ,   static   ,     transient   。   df 命令   Linux 系统 中 都是 文件 ， 包括 硬盘 光盘 。 硬盘 挂载 系统 中的 目录 下才 ，   /   自动 挂载 了的 。 计算机 额外 加上 硬盘 ， 会 自动 挂载 ， 是不 。 挂载 操作 。   执行 挂载 操作 ， 先用 df 命令 来看 计算机 磁盘 挂载 情况 。   Filesystem 目标 文件系统 ， 1K - blocks 列出 目标 文件系统 大小 ， 单位 KB ， Used ， Available 可用 。 Use% 百分比 ， Mounted   目标 文件系统 挂载 点 。   blkid 命令   blkid 命令 列出 目标 文件系统   UUID   号 ， 文件系统 类型 。 mount 命令 调用 。   mount 命令   mount 命令 挂载 文件系统 ， 挂载 点 ， 挂载 目录 个空 文件夹 ， 原空 文件 内容 挂载 后将 访问 。   开机 自动 挂载   开机 自动 挂载 设置 修改   / / fstab   文件 。   对照 例子 ，   / dev / sda1   挂载   / boot   。 三项 很 清晰 ， UUID 号 改为 目标 文件系统 名如   / dev / sda1   。   重点 讲下 第四 列 ， 第五 列和 第六 列 ：   第四 列是 设置 目标 文件系统 挂载 参数 ， mount 命令   - o   选项 指定 。   async / sync   推荐 设置 async   auto / noauto   主动 测试 挂载 ， 默认 auto 。   rw / ro   ro 不 写入   exec / noexec   执行   user / nouser   nouser 用户 不 挂载   defaults   rw ， exec ， auto ， nouser ， async 参数 ， 设置 defaults 即可 。   备份 相关 ， 第五 列 设置 0 。   第六 列 ， fsck 检查 分区 ， 设置 0 即可 。   ​   unmount 命令   卸载 命令   lsof 命令   最先 接触 lsof 命令 需求 ： 查看 端口号 占用 ， 希望 释放 端口号 ， kill 掉 进程 即可 。   lsof   命令 倒 查看 端口号 设置 ， 完整 名字 list   open   files ， 列出 系统 打开 文件 。 linux 系统 中 ，   皆 文件   ， 查看 打开 文件 信息 很多 有用 系统 运行 情况 信息 。   命令 方法 很多 ， 请 读者 参看   网页     网页   。   telnet 命令   telnet 命令 查看 TCP 端口 访问 。   nmap 命令   扫描 目标 主机 端口号 ， 参考   网页   。   最 常见 需求 查看 目标 主机 端口号 打开 ：   curl 命令   最 用法   看作 一个 简单 版的 web   browser ， 其内 选项 很多 ， HTTP method 方法 选择 ， user - agent cookie 设定 都 。   查看 更 信息 读者 参考   网页   。   查看 本机的 外网 ip     httpbin 网站 ：   离线 安装 rpm 包   推荐 安装   yum - utils   软件包 ：   利用 提供   yumdownloader   命令 下载 rpm 包 。   下载 相关 依赖 本地 安装   安装 rpm 包的 ， 依赖 ， 要某   fedoraproject   下载 epel 安装 包 ， 干脆 yum   安装   epel - realse   ， 还 安装 提及   yum - utils   ， 运行 ：   自动 下载 补齐 rpm 包还 确实 依赖 ， 本地 安装 语句 面 网络 安装 rpm 包了 。   本地 安装   免 网络 本地 安装 rpm 包 ， 自动 解决 相互 依赖 。   centos6 centos7 区别   小节 参考   篇 文章     篇 文章   。   默认 文件系统 ext4 xfs 。     / bin   / sbin   / lib   / lib64   移 到了   / usr   下 。 （ 区别 较大 ）   防火墙 iptables firwalld 。 （ 区别 较大 ）   默认 数据库 mysql mariadb ， 单纯 不用 太多 。   python2.6 升级 python2.7 ， 极好 。   修改 主机 名 推荐   hostnamectl   。   语言 字符集 管理 配置 文件   / / local . conf   修改 时 区 推荐   timedatectl   命令 。   修改 地区 推荐   localectl   命令 。   服务 管理 推荐   systemctl   命令 ， service 命令 用的 。 chkconfig 推荐 systemctl 命令 。   强制 终止 进程 ，   \\ verb + kill   - 9   PID +   ， 推荐 ：   ifconfig 命令 单独 安装 （ net - tools ） ， 推荐 ip 命令 。   U 盘 安装 ubuntu   安装 请先 硬盘 中的 资料 做 调整 ， 空出 一个 大于 20G 硬盘 做 将来 安装 ubuntu 根 目录 地方 。 还 一个 为你 内存 两倍 硬盘 分区 等下 linux 系统 swap 交换 分区 。 （ 更 还 开个 分区 / home 不 讨论 。 ）   ubuntu 官 网上 下载 系统 光盘 映像 。   ultroiso 软件 （ 类似 功能 软件 行 ） （ ultroiso 选择 最新 版本 ， ubuntu10.10 要用 9.3 版本 之上 ） 光盘 映像 写入 到你 U 盘中 去 。   重启 计算机 ， BIOS 稍 作 改动 使 计算机 U 盘 启动 。   安装 过程 ， 过程 都 直观 ， 硬盘 分区 设置 上 选择 高级 手动 ， 分 20G 硬盘 ／ 加载 点 ， 设置 格式化 成 ext4 日志 系统 （ 文件系统 ext3 等也 行 ） 。 设置 交换 分区 ， 安装 。   ubuntu 下 ISO 文件 硬盘 安装 win7 系统   gparter 分区   先 mount   文件 复制 d 盘   执行   sudo   update - grub   重启 到新 恢复 模式 下 即可 .   Virtualbox   网络 连接 模式   小节 参考   网页   。   NAT 模式   网络 地址 转换 ， 理解 Guest 机 发送 IP 包 主机 （ 类似 做 路由器 功能 ） 分发 再 。   网桥 模式   模式 理解 ， 虚拟 机就 类似 一台 真实 机器 Host 同等 地位 接入 网络 ， 内网 不 分发 IP 地址 功能 模式 是不 可行 。   Host - 模式   理解 Guest Host 上 模拟 一张 网卡 ， 虚拟 机都 连接 张 网卡 上的 。 虚拟 机 访问 。 虚拟 机和 主机 之间 ， 虚拟 机和 外网 之间 都 设置 访问 。   共享 文件夹 设置   安装 增强 功能 ， virtualbox 设置 好 共享 文件夹 ， 记得 客机 系统 ， 还 加载 文件夹 ：     share   名字 是你 virtualbox 设置 名字 ， 挂载 文件夹 请在 客机 系统 新建 一个 。   找 不到 错误   章节 加上 内容 ， 都是 了说 ， No   Such   file 报错 ， 软件包 依赖 出了 。 讨论 Ubuntu 系统 （ debian 系 ） ， Centos （ RPM 系 ） ， 包的 名字 ， 想 读者 灵感 。   ffi . h   参考   网页   。   报错 ：   fatal   error :   ffi . h :   No     file     directory   解决 方案 ：   opensslv . h   报错 ：   解决 方案 ：   参考 资料   网络 ， 别人 博客 知识 引用 能在 文章 中列 就列 ， Linux 系统 很多 知识 很多 网页 内容 都很 接近 ， 实在 不 原创 者是 ， 并用 网络 词来 。 谢谢 博客 网页 编写者 们了 ， 劳动 传播 知识 ， 提升 IT 从业者 技能 解决 很多 ， 人类 IT 技术 。 也许 赚 一分 钱 ， 半点 名利 ， 做出 贡献 遗忘 ， 都是 上帝 嘉许 。   有名 鸟 哥的 linux 私房 菜 基础 篇和 网络 篇 。 请 参看   鸟哥的 文章 官网   。 基础 篇在   / linux _ basic   ， 网络 篇在   / linux _ server   。   unix 编程 艺术   unix 编程 艺术   [ 美 ]   Eric   S · Raymond   ,   姜 宏   ( 译者 ) ,   何源   ( 译者 ) ,   蔡 晓骏   ( 译者 )",
            "tags":"linux",
            "url":"articles/linux-system-basic.html"
        },
        {
            "title":"markdown",
            "text":"前言   markdown 基础 知识 本文 不 赘述 ， 网上 随便 一搜 ， 本文 讲了 值得一提 知识点 。   添加 脚注   效果 所示 ：   显示 插入 脚注   1   插入 描述 列表   sqrt   开 平方根 函数 ， sqrt ( x ) 。   sin   正弦 函数 ， 类似 cos ， tan ， sin ( x ) 。   github   flavored   markdown   gfm 官方 文档     。 github   flavored   markdown   github markdown 方言 ， 区别 :   下划线 下划线 。   URL   输入 ，   http : / / www . google .   ， 其将 转化 链接 。 一个 新 功能 支持 ， 链接 插入 方式 。   删除 线   :   添加 新 特性 。   最 有名 代码 块的 染色 支持 。   语言 列表 参看     。   一个 脚注 。   ↩",
            "tags":"others",
            "url":"articles/markdown.html"
        },
        {
            "title":"pelican模块",
            "text":"简介   pelican 一个 静态 网站 生成 工具 ， 其是 python 编写 ， pythoner 来说 显得 格外 亲切 。   官方 quickstart 简单 刷 一遍 ， 作出 讨论 。   项目   python 虚拟 环境 控制 不 多说 ， 讨论   pelicanconf . py     publishconf . py     Makefile   文件 作出 ， 项目 文档 结构 相关 作出 。   下   publishconf . py     pelicanconf . py   区别 ，   publishconf . py   文件 一句 话 ：   其将 继承 来自   pelicanconf . py   配置 参量 ，   publishconf . py   针对 发布 远程 服务器 上的 ，   pelicanconf . py   配置 用于 本机 调试 。     pelicanconf . py     SITEURL   变量 空值 ， 而在   publishconf . py   要赋 一个 值的 ， 值随 模板 用法 ，   { {   SITEURL   } }   调用 。   发布 远程 机器 还 会有 额外 东西 ，   DISQUS _ SITENAME   值 ， 很多 模板 会 值来 开启 disqus javascript 引用 ， DISQUS 系统 本机 调试 意义 ， 会不 设置 值 自动 关闭 。   publishconf . py   也许 ， 略过 ，   pelicanconf . py   配置 。     Makefile   文件 ， 脚本 很 好用 ， 命令 是很 用到 ：   make   github 会把 output 内容 刷到 github   pages 项目 ， 依赖 生成 目标   publish   ， make   publish make   html 惟一 区别 讨论 调用 配置 文件 。   不用 Makefile   读者 是在 windows 环境 下 ， Makefile 不怎么 好 用的 ， 说到底 提供 快捷 命令 行 支持 ， 写 一个 python 脚本 。     run . py   基础 上 ， 创建 两个 脚本 ：   start _ server . bat   脚本 用于 本地 调试   build . bat   脚本 用于 编译 输出   官方 quickstart 文档 内容 本文 再 赘述 ， 值得一提 地方 做出 。   写 文章   引用 博客 内部 文章   引用 博客 内部 文章 不 文章 slug 细节 ， 引用 ：   路径 支持   ..   表达 。   引用 静态 资源   markdown 引入 图片 所示 ：   { static }   引用 文件 路径 。 content 文件夹 images 文件夹 ， 文件夹 默认 是要 copy output 输出 文件夹 根 目录 去的 。   网站 favicon . ico   参考   网页   ， 配置 ， 会将 extra 文件夹 favicon . ico 文件 copy output 文件夹 。   常用 配置 参考   Category 参数 控制   配置 ：   pelican 项目 默认 Category 参数 值 。   配置 ：     Category   参数 省略 ， pelican 会 文章 所在 上 一级 文件夹 名字 文章 Category 。   文件夹 结构 变得 ， 默认 Category 方法 不再 满意 ， 就将 设置 关闭 ：   目标 文章 头 参数 配置   静态 资源管理   images pdfs data extra 文件夹 名字 都是 随意 ， 写 ， pdfs 放 pdf ， images 放 图片 。 几个 文件夹 都是 静态 资源 文件夹 ， 等下 生成 output 文件夹 ， 内容 都放 送入 output 文件夹 去 。 设置 ：   html 文件 额外 说 ， 原 网页 body 内容 都会 完整 传 ， 原 html 网页 head meta 标签 title 标签 之外 ， 多余 内容 是传 不 。 css js 设置 弄呢 ， 请 参看 相关 讨论 ， 到时候 设置 好 相关 meta 标签 即可 。   output 输出 控制   ARTICLE _ URL   定义 文章 URL 显示 ， slug 文件 头 属性 定义 。   ARTICLE _ SAVE _ AS   定义 文件 output 文件夹 存储 路径   类似 控制   CATEGORY   TAG   PAGE   页面 URL 网页 output 文件夹 存储 路径 。   theme 相关   theme   没 pelican 推荐 theme 都 下载 ， 找 一个 喜欢 theme ， 复制 到你 pelican 项目 根 目录 下 ， 配置   _ theme _   等于 复制 来的 主题 文件夹 名字 ：   theme 内部 static 文件夹 下的 内容 会 copy output 文件夹 下 ，   static / css     theme / css   。   templates 文件夹 都是 jinja2 模板 文件 ， jinja2 模块 引擎 相关 知识 就不 讨论 ， 读者 参看   篇 文章   。   模板 文件 变量   配置 文件 变量 ， 配置 文件 定义   SITEURL = \" WHAT \"   ， 模板 文件 引用   { {   SITEURL } }   。 配置 名 规范 大写字母 。   article 模板 下你 定义 metadata 都是 引用 ，   article . tags   。   模板 文件 变量 内容 更 ， 请 读者 参看 官方 文档 5.6   Creating   themes Templates     variables   小节 。   Markdown 相关   ：   pelican     markdown 支持 。 模块 官方 文档     。 是不 太 模块 ， 稍微 定制 需求 ， 插件 ， 都 是和 模块 功能 关联 。   来看 最 常用 两个 功能 ， 一个 语法 高亮 功能 ， 一个 自动 目录 生成 功能 。   pelican 相关 MARKDOWN 配置 原始 参数 ：   参数 实际上 传递 提到   markdown   模块 ， pelican 这块 。   extension _ config   官方 文档     信息 ， 很多 官方 插件 ， markdown 模块 安装 一并 安装 进来 。   codehilite   插件 提供 一种 代码 块 语法 高亮 方案 ， 代码 块 采用 格式 ：   几种 格式 不 赘述 ， 提到   fenced _ code   插件 实际上 是站在   CodeHilite   之上 ， 支持 常见 gfm 代码 块的 表达 。 两个 插件 都 依赖   pygments   模块 。   css _ class   配置 最 外面 div 区块 class 名字   guess _ lang   不 版本 ， 参数 默认 True ， 带来 困扰 ， 会让 pygments 去猜 代码 块 里的 语言 ， 猜的 不 准确 ， 喜欢 关掉 ， 默认 text 不 染色 ， 用户 习惯 ， 不 指定 语言 暗含 语种 不 text 。   几个 参数 选择 读者 参看 插件 文档 。   linenums   人会 喜欢 。   fenced _ code   上 描述 。   toc   markdown   文档 写上 ：   其会 自动 转 成 ：   顺便 提到   extract _ toc   plugin   ， 插件 利用   beautifulsoup4   模块 刷 toc   div ， pelican 模板 中   article   变量 ，   article . toc   属性 ， 内容 提及 自动 生成 toc 内容 。   出于 好奇 看 extract _ toc   相关 代码 ：     toc . extract ( )     toc   插件 生成 目录 删去 ， toc 赋值 给了 content ， content   article   【 pelican page page 】 。   pelican 里 ， 查看 theme ， toc 显示 ， 类似 jinja2 代码 ：   讨论 MARKDOWN   变量 ：   plugin 相关   plugin 安装   配置 安装 plugin ， 文件夹 操作 pelican 项目 根 目录 下有   myplugins   文件夹 ， 编写 plugin 作者 写的 plugin   copy 。   pelican _ javascript   plugin   项目   github 地址   。   js css 静态 资源 ， 但和 有所不同 ， 提及 html 源文件 head css 引用 语句 ， 都是 会 丢失 。 加上 meta 标签 语句 ：   还 安装 pelican - plugins   pelican _ javascript   所示 ：   配置 参考     pelicanconf . py   文件 配置 提到 很多 ， 再就 配置 做出 。",
            "tags":"python_companion",
            "url":"articles/pelican-module.html"
        },
        {
            "title":"pillow模块",
            "text":"简介   pillow 模块 前身 PIL 模块 ， 更好 github pypi 支持 ， 简单 安装 pip 命令 安装 即可 。 pillow 模块 格式 图片 支持 依赖 系统 额外 图形处理 模块 ， libjpeg ， libtiff 。 系统 安装 ， ， 具体情况 ， 不 一一 讨论 。   安装 官方 文档 叙述 （   reference     ） ， 装上 。   测试 安装 情况   找个 图片 简单 测试 安装 情况 :   pillow 模块 名字 PIL 是因为 父亲 PIL ， pillow   fork ， setuptools 兼容 。   pillow 模块 语法 很 清晰 ， Image 个类 ， open 方法 返回 jpg   img   对象 ， 简单 称作 img 对象 ， img 对象 format ,   size   ,   mode 方法 ， 图片 格式 （ JPEG ） ， 图片 尺寸 （ ( 1920 ,   1080 ) ） 图片 模式 （ RGB ） 。 img 对象 调用 show 方法 会 （ 系统 内部 工具 ） 显示 图片 。   open 方法 官方 文档 叙述 支持 格式 ： bmp ， eps ， gif ， im ， jpeg ， jpeg2000 ， msp ， pcx ， png ， ppm   ， spider ， tiff ， webp ， xbm ， xv 。 格式 要某 只 支持 读 要某 只 支持 写 不 。 写的 save 方法 图片 目标 格式 ， open 方法 打开 图片 名字 随意 ， pillow 会 自动 检测 图片 格式 。   open 方法 图片 打开 失败 ， 将会 返回   IOError   异常 。   获取 图片 信息   引用 :   利用 Image 类的 open 方法 创建 一个 图片 对象 :   获取 图片 格式 ， 尺寸 模式 信息 。   图片 格式 转换   接触 pillow 模块 第一个 图片 格式 转换 ， 请看 写的 两个 函数 ， 都是 利用 pillow 模块 ， 一个 单独 转换 图片 ， 一个 文件夹 后缀 文件 批量 格式 转换 。   图片 缩小 尺寸   仿照 api 写 两个 函数 :   resize _ img     batch _ resize _ img   。   图片 去 背景   小节 参考   网页   。 稍 作 封装 即可 。   算法 最 核心 语句 :     一句 看得出 来是 新建 一个 图片 对象 ， 图片 对象 看作 纯色 背景 图片 ， 参数 color ， 其是   im . getpixel   来去 原 图片 ( 0 , 0 ) 像素 点的 颜色 ， 最 左边 最 顶上 点 。   一句 ， 官方 文档 描述 ，   PIL . ImageChops . difference ( image1 ,   image2 )   相当于 图片 像素 点 逐个 算术 运算 :   $ $     =   abs ( image1   -   image2 )   $ $     官方 文档 描述 ，   PIL . ImageChops . add ( image1 ,   image2 ,   scale = 1.0 ,   offset = 0 )   相当于 图片 像素 点做 算术 运算 :   $ $     =   ( ( image1   +   image2 )   /   scale   +   offset )   $ $   diff 图片 对象 实际上 是原 图片 减去 背景 ， 双倍 重叠 除以 2 。 操作 都 看作 四周 背景 边框 趋于 0 。 offset 设为 100 ， 最 疑问 地方 ， ， 像素 值 变为 负值 会 ？ 二 ， 减去 100 ， 理由 ？   接下来 实际上 还好 理解 ， Image 对象   getbbox   方法 一个 矩形 边框 值 （ left ， upper ， ， lower 四个 像素 点 坐标 ） 。 内部 算法 非 0 值来 计算 图形 边界 。 算法 还 很 。   调用 Image 对象   crop   方法 执行 裁剪 操作 ， 接受 一个 矩形 边框 值 ， 边框 一个 新的 图形 对象 。   裁剪 效果 所示 :   去边 裁剪 效果 :   附录   有名 lena 图   福利 图 。 。",
            "tags":"python_companion",
            "url":"articles/pillow-module.html"
        },
        {
            "title":"pyqt5学习笔记",
            "text":"WARNING   警告 ， 文档 归档 ， 缺少 新的 内容 ， 旧的 内容 错误 ， 推荐 pyside2 GUI 编程 。 GUI 编程 请 参看   pyside2 学习 笔记   【 2019 】   。   安装 配置   利用 pip3   安装 ：   安装 qt5 ， windows 下 测试 发现 不 安装 qt5 ， 估计 ubuntu 下也 不 安装 qt5 。   写上 ， 读者 程序 提示 没 找到 qt 类似 错误 ， 安装 qt ：   安装 SIP 挺 麻烦 ， sip pip 安装 ， 安装 pyqt5 ， 顺便 装上 。 发现 windows 下   pyuic5     pyrcc5   两个 命令 ， pip 安装 装上 。   ubuntu 下是 安装 东西 ， 估计 不 ：   检查 pyqt5 安装 情况 执行 脚本 即可 ， 显示 安装 pyqt5 版本号 :   本文 代码 都是 PyQt 版本号 都是 ， 特别 理由 ， 会 版本号 。   第一个 例子   窗口   【 beginning - first01 】   导入 sys 宏包 ， 接受 sys . argv 参数 。   接下来 定义 MyWidget 类 ， 继承 QWidget 类 。 QWidget 类的   setGeometry   方法 调整 窗口 左 顶点 坐标 位置 窗口 大小 。     setWindowTitle   方法 设置 窗口 程序 标题 ， 简单 设置 \" myapp \" 。   窗口 程序 都 创建 一个 QApplication 类的 实例 ， myapp 。 接下来 创建 QWidget 类的 实例 mywidget ， 调用 mywidget 方法   show   显示 窗体 。   系统 退出 调用 myapp 实例   exec _   方法 。   加上 图标   【 beginning - first02 】   程序 程序 增加 一个   setWindowIcon   方法 ， 方法 调用   QtGui . QIcon   方法 ， 跟的 图标 存放 路径 ， 路径 。 运行 例子 ， 请 随便 弄 图标 文件 。   简单 见 程序 QWidget 类的   resize   方法 设置 窗 体的 大小 。   弹出 提示 信息   【 beginning - first03 】   段 代码 代码 在于 MyWidget 类的 初始 函数 新 两条 命令 。   setToolTip   方法 设置 显示 弹 出的 提示 文本 内容 ， 调用 QToolTip 类的   setFont   方法 设置 字体 字号 ， 不 太 随便 设置 系统 字体 微软 雅黑 。   鼠标 停放 窗口 上 一会儿 会弹 出 一小 段 提示 文字 。   关闭 窗 体时 询问   【 beginning - first04 】   段 代码 代码 定义   colseEvent   事件 。 段 代码 核心 QtGui 类的 QMessageBox 类的 question 方法 ， 方法 将会 弹出 一个 询问 窗体 。 方法 接受 四个 参数 ： 第一个 参数 窗体 所属 母体 ， 实例 mywidget ； 第二个 参数 弹出 窗 体的 标题 ； 第三个 参数 一个 标准 button ； 第四个 参数 一个 标准 button ， 默认 （ enter 选定 ） button 。 方法 返回 点击 了的 标准 button 标识符 ， 标准   QMessageBox . Yes   ， 执行 event accept 方法 。   屏幕 居中 显示 窗体   【 beginning - first05 】   例子 相比 改动 新建 一个   center   方法 ， 接受 一个 实例 ， mywidget 。 实例 窗口 位置 做 调整 。   QDesktopWidget 类的   screenGeometry   方法 返回 一个 量 ， 量的 width 属性 屏幕 宽度 （ pt 像素 计 ， 1366 × 768 ， 宽度 1366 ） ， 量的 height 属性 屏幕 高度 。   QWidget 类的   geometry   方法 返回 一个 量 ， 量的 width 窗 体的 宽度 ， 量的 height 属性 窗 体的 高度 。   调用 QWidget 类的 move 方法 ， 是对 mywidget 实例 作用 。 move 方法 X ， Y 是从 屏幕 坐标 原点   ( 0 , 0 )   计算 。 第一个 参数 X 向右 宽度 ， Y 向下 高度 。   函数 作用 效果 窗体 居中 显示 。   QMainWindow 类   QtGui . QMainWindow 类 提供 程序 主 窗口 ， 创建 一个 经典 拥有 状态 栏 、 工具 栏和 菜单 栏的 程序 骨架 。 （ QWidget 类 ， 换成 QMainWindow 类 。 ）   第一个 例子 都是 用的 QtGui . QWidget 类 创建 一个 窗体 。 QWidget QMainWindow 两个 类的 区别   网站   结论 ： QWdget 类在 Qt 中是 画 类的 基础 （ 是窗 体的 基础 。 ）   基于 QWidget 类都 独立 窗 体而 显示 而不 母体 （ parent ） 。   QMainWindow 类是 针对 主 窗体 需求 设计 ， 预定 义了 菜单 栏 状态 栏和 widget （ 窗口 小 部件 ）   。 继承 QWidget ， 谈及 属性 修改 都 于它 。 代码 中的 QWidget 类 换成 QMainWindow 类 。   【 beginning - first06 】   程序 运行 情况 ， 加点 东西 进去 。   加上 状态 栏   【 beginning - first07 】   程序 区别 在于 倒数 第二行 ， 调用 mainwindow QMainWindow 类 生成 实例   statusBar   方法 生成 一个 QStatusBar 对象 ， 调用 QStatusBar 类的   showMessage   方法 显示 一段 文字 。   希望 段 代码   __ init __   方法 ， 过程 描述 类似 。   加上 菜单 栏   【 beginning - first08 】   讨论 加上 状态 栏 类似 ， QMainWindow 类的   menuBar   方法 一个 菜单 栏 对象 。 菜单 栏 对象   addMenu   方法 创建 一个 新的 菜单 对象 （ QMenu 类 ） ， addMenu 方法 内容 新建 菜单 显示 文本 。   菜单 对象 加上 动作 ， 调用 菜单 对象   addAction   方法 ， menuBar 创建 一个 菜单 栏 对象 ， addMenu 方法 创建 一个 菜单 ， 返回 一个 菜单 对象 ， 菜单 对象 addAction 方法 ， 方法 菜单 添加 一个 动作 ， 或者说 一个 item 一个 内容 ， addAction 返回 一个 动作 对象 ， 动作 对象 信号 － 槽 机制 连接 ， 其和 一个 函数 连接 。   动作 对象 ， 菜单 下拉 选项 ， 鼠标 点击 ， 将会 触发   triggered   信号 ， connect 方法 连接 槽上 （ 定义 函数 ） ， 将会 触发 函数 执行 。 信号 － 槽 机制 详细 。   信号 － 槽 机制   GUI 程序 都 引入 一种 事件 信号 机制 ， ， 简单 来说 一个 循环 程序 ， 循环 程序 等到 时刻 程序 会 自动 做 事情 刷新 程序 界面 ， 扫描 键盘 鼠标 ， 用户 点击 鼠标 键盘 ， 会 接受 信号 做出 。   猜 到了 ，   close   函数 退出 循环 程序 。 调用 主 程序   exec _   方法 ， 开启 循环 程序 。   pyqt4 旧的 信号 － 槽 连接 语句 忽略 ， 值得 提醒 pyqt5 不 支持 旧的 信号 － 槽 连接 语句 。 新的 语句 。   新的 信号 － 槽 机制 语句 变得 更 精简 更 易懂 。 过程 所述 ， 对象 发出 信号 ， connect 信号 槽 （ 定义 函数 ） 连接 一个 反射弧 。   槽 主 窗口 实例 close 方法 ， 是主 窗口 自带 函数 。   aboutqt 函数 。 读者 不 懂 请 翻阅 QMessageBox 类的 静态 方法       aboutqt   。   信号 － 槽 详解   pyqt5 只 支持 新式 信号 － 槽 机制 ， 新式 信号 － 槽 机制 详细 。   信号 ( singal ) 连接 无数 多个 槽 ( slot ) ， 连接 槽也 ， 信号 连接 信号 。 所述 ， 连接 语句 形式 ：   . singal . connect ( slot )   。 比如说 按钮 最 常见 内置 信号   triggered   ， 而槽 实际上 函数 ， 主 窗 体的   . close   方法 。   信号   QObject   一个 属性 ， pyqt 窗 体有 很多 内置 信号 ， 定义 信号 ， 再 提及 。 信号 还 没和 槽 连接 一个 属性 ，   connect   方法 连接 ， 信号 － 槽 机制 建立 。 类似 信号   disconnect   方法   emit   方法 。 disconnect 断开 信号 － 槽 机制 ， emit 激活 信号 。   pyqt 很多 内置 信号 内置 槽将 GUI 事件 驱动 细节 隐藏 ， 定义 信号 槽 . singal . connect ( slot ) 简洁 形式 工作 感到 困惑 。 先 简要 介绍 。   信号 都是 类的 一个 属性 ， 新的 信号 继承 QObject ，   PyQt5 . QtCore . pyqtSingal   方法 创建 ， 方法 接受 参数 中最 types 类型 ， int ， bool ， 信号 传递 参数 类型 ， 传递 参数 值的 emit 方法 。 槽 实际上 封装 函数 ， 函数 接受 参数 不 接受 参数 ， 参数 值传 进来 emit 方法 执行 ， . singal . connect ( slot ) 形式 信号 槽 连接 ， 信号 ， 信号 类 自带 连接 方法 ， 连接 slot 函数 上 ， 隐藏 一个 细节 emit 方法 ， 比如说 定义 一个 新的 信号 ， 点击 屏幕 x , y 坐标 发送 ， 内置 信号 － 槽将 机制 都 ， 定义 信号 槽 ，   pyqtSingal ( int , int )   ， 发送 func ( x , y ) ， x y 值你 emit ( x , y ) 发送 。 发送 ， 发送 x , y 值的 获取 ， 一个 信号 － 槽 机制 细节 。   请看 例子 ：   【 singal - slot / age 】   16 行将 spinBox   valueChanged   信号 slider   setValue   槽 连接 ， QSpinBox 内置   valueChanged   信号 发射 自带 一个 参数 改变 后的 值 ， 值 传递 给了 QSlider 内置 槽   setValue   ， slider 值 设置 为新 值 。 17 行 slider 值 发生 改变 ， 会 发送 valueChanged 信号 ， 传递 给了 spinBox ， 执行 内置 槽 setValue ， 值即 原值 ， spinBox 内的 值就 发生 改变 ， 程序 陷入 死 循环 。   定义 信号   正 如前所述 及自 定义 信号   PyQt5 . QtCore . pyqtSingal   方法 创建 ， 格式 ：   Foo 类 定义 一个 新的 信号 ， GObject 子类 。 定义 一个 closed 信号 ， 接受 参数 。 range _ changed 信号 ， 接受 一个 int 一个 int 类型 ， 信号 名字 rangeChanged ， 选项 一个 选项 ， 不 填 信号 名字 range _ changed 。   信号 还 overload ， 不 太 适合 python 。   信号 定义 类的 属性 ， GObject 子类 。   定义 槽   python 格式 定义 函数 定义 槽了 。 推荐 pyqt 槽 装饰 器来 定义 槽 。   第一个 例子 定义 名叫 foo 一个 槽 ， 不 接受 参数 。 第二个 槽 接受 一个 int 类型 值和 str 类型 值 。 第三个 槽 名字 bar ， 接受 一个 int 类型 值 ， 第四个 槽 接受 一个 int 类型 值 ， 返回 一个 int 类型 值 ， 第五个 操作 接受 一个 int 类型 值和 一个 GObject 类型 值 ， 此处 暗指 pyqt 窗体 类型 都 参数 传递 。   定义 两个 槽 ， 名字 都 valueChanged ， 一个 接受 int 类型 ， 一个 接受 QString 类型 ， 信号 overload ， python 中不 推荐 ， 明晰 一点 好 。   发射 信号   信号 对象 emit 方法 用来 发射 信号 ， 信号 对象 disconnect 方法 断开 信号 槽的 连接 。   一个 信号 连接 多个 槽 ， 多个 信号 连接 同一个 槽 ， 一个 信号 一个 信号 相 连接 。   一个 例子 详解 自建 信号 自建 槽 建立 发射 机制 情况 。   【 singal - slot / FindDialog 】   建的 信号 类的 属性 ， 类 QObject 子类 ， QDialog 继承 QObject 。 请 9 行和 10 行 ， pyqtSignal 函数 来自 建 信号 ， 信号 两个 参数 ， 一个 str 字符 变量 ， 一个 Qt . CaseSensitivity 枚举 值 。 假设 输入 文字 ， 点击 Find 按钮 ， 请 26 行 ， 点击 执行 findClicked 槽 ， 按钮 clicked 信号 是不 带 参数 。 定义 findClicked 槽 （ 简单 函数 ） 参数 。   findClicked 槽的 53 - 57 行 QLineEdit text 值和 cs 大小写 检查 状态 。 向前 向后 勾 选来 接下来 发送 信号 。 findNext 信号 调用 emit 方法 ， 两个 参数 传递 。 findNext 正是 定义 信号 ， 正是 两个 参数 类型 。   再 简单 做 一个 测试 程序 ， 70 - 73 行 定义 两个 简单 函数 ， 75 ， 76 行将 findDialog 两个 信号 两个 函数 连接 。 点击 Find 按钮 ， 执行 findClicked 槽 ， 假设 发送 findNext 信号 （ 附带 两个 参数 ） ， 信号 find 函数 相连 （ 参数传递 给了 find 函数 ） ， 执行 find 函数 。 过程 。   信号 － 槽 机制 反思   接下来 Qt   designer 一章 会 详细 讨论 ， Qt   designer 设计 修改 ui 文件 — — 程序 中 大部分 静态 视图 元素 ， 目的 倒 快速 GUI 程序 编写 ， 写 代码 挺 快的 ， 目的 代码 复用 。 养成 习惯 ， 强迫 程序 中的 静态 视图 元素 都 ui 文件 ， 增强 ui 文件 复用 性 ， 增强 剩下 来的 python 代码 复用 性 。 很大 一部分 讨论 信号 － 槽 机制 功劳 。   定义 类 加载 好 ui 文件 ， 该类 代码 实际上 剩下 两个 工作 ：   本窗 体的 信号 槽都 编写 好   母 窗 体和 子窗 体和 信号 － 槽 接口 写好 。   程序 用户 互动 接口 大多 最 顶层 ， 用户 喜欢 菜单 栏 找到 程序 控制 ， 控制 函数 放在 都 放在 母窗 体 ， 程序 代码 复用 性会 降到 最低 ， 函数 移 到和 视图 窗 体最 紧密 窗体 类中 ， 代码 复用 性会 大大提高 ， 槽或 函数 编写 会 简单 很多 。 组织 信号 槽 （ 函数 ） ？ 提出 组织学 上的 抽象 原则 ：   最小 组织 原则 ， 凡是 小 组织 自我 功能 绝不 上 传到 更 大 一级 组织 中 去 。   大 组织 小 组织 元素 引用 ， 采用 明文 引用 原则 。 比如说 母窗 体中 一个 小窗 体有 一个 编辑器 ， 母窗 体 想要 操控 编辑器 执行 剪切 操作 ， 采用 明文 引用 ， . textEdit . cut 。   小 组织 对大 组织 属性 引用 采用 信号 激活 原则 ， 比如说 编辑器 发生 内容 修改 ， 定义 一个 信号 ， 信号 标题 修改 信号 ， 信号 触发 母窗 体的 方法 ， 修改 母窗 体的 标题 目的 。 而在 母 窗 体中 ， 只 声明 是将 小 组织 信号 大 组织 方法 连接 即可 。   引用 信号 发射 对象   sender   方法 来自 GObject ， Qt 里的 窗 体 对象 都 。 用法 槽 ， 调用   . sender ( )   ， 返回 一个 发射 信号 调用 槽的 对象 。   布局 管理   布局 管理 GUI 设计 中 回避 一个 话题 ， 详细 讨论 下 pyqt 布局 管理 。 正 如前所述 ， pyqt5 用于 布局 管理 类都 移 到了 QtWidgets 子 模块 ， 是最   QHBoxLayout     QVBoxLayout   。   QBoxLayout   QHBoxLayout     QVBoxLayout   一个 横向 排布 ， 一个 是竖 排布 。 方法 所示 ：   Layout 对象 好像 一个 封装 器 ， Layout 还 Layout ， 窗体 子 单元 ， 都   addWidget   方法 确立 封装 关系 。 主 母 窗口 接受 一个 Layout 对象 ，   setLayout   方法 。   【 layout / 】   addStretch 方法   插入 一个 分隔符 ， 设计 器 弹簧 。   QGridLayout   tkinter 中有 grid 方法 ， 网格 布局 ， pyqt 中也 网格 布局 对象 QGridLayout 。 QGridLayout 用法 QBoxLayout 类似 ，   addWidget   方法 还 接受 两个 额外 参数 几行 几列 。   请 例子 。 例子 很 好地 演示 QGridLayout 。   ( i - 1 ) / / 3   数对 3 取商 ， 本来 1   2   3   4   5   6 … 0   0   0   1   1   1   2   2   2 … 正好 网格 中的 几行 ，   ( i - 1 ) % 3   数对 3 取余 ， 本来 1   2   3   4   5   6 … 0   1   2   0   1   2   0   1   2 … 正好 网格 中的 几列 概念 。   【 layout / gridlayout 】   QFormLayout   QFormLayout ， 表单 布局 ， 常用 提交 配置 信息 表单 。   请 例子 。 例子 来自 pyqt5 源码 examples 文件夹 layouts 文件夹 basiclayouts . py 文件 ， 做 简化 用于 演示 表单 布局 。   【 layout / basiclayouts 】     QDialog   类和   QDialogButtonBox   类 且不 去管 ， QDialog 类和 accept reject 方法 ， QDialogButtonBox 最 两个 按钮 绑定 喜好 accepted rejected 。   创建 表单 函数 ，   QGroupBox   一个 窗体 类型 ， 带有 标题 。 接下来 QFormLayout 表单 布局 核心 代码 ：   layout 创建 母窗 体 layout   setLayout   方法 两个 布局 都是 类似 ， 表单 布局 一行行 ， 方法 addWidget ，   addRow   ， addRow 方法 意义 上 接受 两个 窗体 类型 （ 包括 layout 类型 ） ，   第一个 参数 还 字符串 ， 显示 文字   。   ui 文件 管理   利用   Qt   designer   设计 输出   ui   界面 文件 ，   PyQt5 . uic . loadUi   加载 进来 ， ui 文件 利用 pypi 资源管理 机制 ， 一种 解决 方案 ， pythonic 。   推荐 是用   pyuic5   输出 ui 文件 py 文件 。 大体 利用 命令 行 ：     import -   选项 影响 输出 py 文件 资源 引入 语句 ， 默认   import   main _ rc   ， 设置 选项 更 改为 ：     project   import   main _ rc   利用 输出 py 文件 ui 类了 。   引入 官方 教程 几种 写法 ， 写法 中   setupUi   函数 跟着 本窗 体的 parent ， 则是 挂 本窗 体上 ， 本窗 体挂 母窗 体 即可 。   配置 文件 管理   pyqt5 里的 QtCore 子 模块 里 提供   QSettings   类来 管理 软件 配置 文件 。   QSettings 构造 函数   先 推荐 OrganizationName ApplicationName 设置 好 。   接下来 构建 一个 QSettings 对象 。   设置 好 组织 名和 软件 名 ， 上 简单   QSettings ( )   创建 一个 配置 文件 对象 ， 不 带 参数 ， parent 取 默认 值 ， format 取的 默认 值是   QSettings . NativeFormat   ， scope 取的 默认 值是   QSettings . UserScope   。 scope QSettings . SystemScope ， 软件 配置 文件 权限 ， 先 略过 ， 默认 UserScope 。   fromat 取 默认 NativeFormat 软件 配置 文件 安装 目录 ：   linux 系统 ， 例子 配置 文件 ：   windows 系统 ， 例子 ：   windows 下 配置 放在 注册表 。   IniFormat   希望 配置 文件 都以 ini 形式 存储 ， 格式 初始化 配置 文件 对象 ：   配置 文件 就在 ：   / home / wanze / . config / Wise / wise . ini   。 linux 系统 情况 ， windows 系统 官方 文档 给出 ：   % APPDATA% \\ Wise \\ wise . ini   ，   % APPDATA%     C : \\ Documents     Settings \\ * User   Name * \\ Application   Data   调用   . settings . fileName ( )   查看 配置 文件 对象 路径 所在 。   推荐 配置 文件 mainwindow 实例 属性 如上 . settings ， 子窗 体都 调用 配置 文件 对象 。   ini 文件 存放 DIY   希望 ini 文件 放在 喜欢 地方 ， 配置 文件 构造 函数 第三种 形式 ：   第一个 参数 是你 配置 文件名 ， 第二个 参数 format 。 上 路径 是从 软件 运行 时的 文件夹 算起 。   调用   settings . fileName ( )   配置 文件 所在 。   ini 文件 事项   ini 文件 大小写 不 敏感 ， 尽量避免 两个 变量 名 相近 大小写 。   \" \\ \" \" / \" 。 windows 里 \\ 会 转换 成 / ， \" / \" 配置 文件 中 分组 关系 。   存 值和 读 值   配置 文件 对象 建立 很 存放 值和 读 取值 。 存 值用   setValue   方法 ， 取值     方法 。 所示 ：   setValue 键在 配置 文件 对象 中 ， 更新 值 ， 修改 生效 ，   sync   方法 ， sync 方法 不 接受 参数 ， 同步 配置 文件 中的 更新 。     方法 第一个 参数 \" 键 \" ， 第二个 参数 是可 选值 ， 没 找到 键 ， 将会 返回 值 。 写上 ， 配置 文件 不 在了 ， 会 发生 读取 错误 。   方法 ：   :   接受 一个 \" 键 \" ， 字符串 对象 ， 返回 bool 值 ， 键 。   remove :   接受 一个 \" 键 \" ， 移除 键 。   allkeys :   不 接受 参数 ， 返回 \" 键 \" 。   clear :   不 接受 参数 ， 清除 \" 键 \" 。   群组 管理   上 例子 所示 \" / \" 数据结构 中的 分组 ， 很多 值都 前缀 ， 同属 一组 ， beginGroup 方法 endGroup 方法 管理 。 所示 ：   快捷 键和 Tab 键 管理   创建 ui 文件 Action 快捷 键给 设置 好 。   伙伴 关系   QLabel setBuddy 方法 关联 输入 窗体 。 QLabel 一个 快捷 键 ， 下 快捷 键 ， 输入 焦点 会转 QLabel 伙伴 输入 窗 体上 。   快捷 键   QShortcut 类   文本 前用 & 会 引入 Alt + w 快捷 键 。   QAction 初始化   QAction 方法   QKeySequence   QKeySequence   类在 pyqt4 pyqt5 中 来自 QtGui 子 模块 ， 快捷 键的 解决 方案 。 引用   QKeySequence . Open   快捷 键 Ctrl + O 。 可用 构造 函数 所示 ：   不 太 喜欢 第一种 表达 方式 ， 软件 都有 打印 操作 ， 打印 快捷 键 之间 逻辑 ， 程序员 经验 ， 不小 记忆 负担 。 喜欢 第四种 写法 ， 看上去 意义 清晰 ， Qt 来自 QtCore 子 模块 。   字母 按键 类似   Qt . Key _ W   形式 ， Shift 按键 Qt . SHIFT ， Meta 按键 Qt . META ， CTRL 按键   Qt . CTRL   ， ALT 按键   Qt . ALT   。   资源 文件 管理   资源管理   pyqt 都用 qrc 文件 管理 软件 内部 资源 文件 （ 图标 文件 ， 翻译 文件 ） 。 qrc 文件 编写 格式 ：   qrc 编写 很 简单 ， 手工 编写 。 代码 第三 行的 images / copy . png qrc 文件 所在 目录 下的 images 文件夹 ， copy . png 文件 。   qrc 文件 编写 好了 运行 命令   将会 输出 一个   wise _ rc . py   文件 ， 资源 ，   引用 路径   : / images / copy . png   ， 图标 文件 。   推荐 一个 项目 资源 文件 都用 一个 qrc 文件 管理 。   国际化 支持   小节 参考 资料 官方 文档 之外   网站   。   指的 pyqt 软件 国际化 支持 是指 i18n ， 两种 语言 ， 英语 本土 语言 。 软件 字符串 都是 英语 ，   . tr ( )   封装 ， 官方 pyqt5 文档     ， 推荐 形式 ：   translate 函数 第一个 参数 翻译 目标 类 ， 第二个 是待 翻译 字符串 。 写个 translate 函数 ， 翻译 都 统一 到本 程序 主 类上 。   项目 里 新建 一个 translations 文件夹 ， 新建 一个 小 文件   wise . pro   ， wise 是你 模块 名字 ， 随意 修改 。 文件 内容 简要 ：   SOURCES   是你 希望 扫描 py 文件 ， 文件 所说 translate 封装 ， 字符串   pylupdate5   工具 扫描 。 支持 路径 表达 。 不 支持 glob 语法 。   第二个 变量 TRANSLATIONS 希望 生成 目标 翻译 ts 文件 文件名 ， 格式 ：   PROJECT _ NAME 是你 项目 名字 ， QLocale . system ( ) . ( ) 是你 机器 所用 目标 语言 简写 ， python3 eval 模式 下 查看 ：     pylupdate5   小 工具 pro 文件 ：   生成   wise _ zh _ CH . ts   文件 。   翻译 文件   样 下 ：   构建 一个 QTranslator 对象 ， 调用 对象 方法 load ， 第一个 参数 是要 load qm 文件名 ， 第二个 参数 qm 文件 路径 ， 谈及 qrc 引用 路径 。   主 母 窗口 myapp installTranslator 方法 QTranslator 对象 加 进去 即可 。   qt 官方 翻译 文件   qt 窗体 内部 文字 不好 DIY ， 上 加载 qt 官方 翻译 文件 。 代码 所示 ：   主 母 窗口 myapp 加载 两个 翻译 文件 。   官方 qt 翻译 文件 qt 源码 translations 文件夹 ， git   clone 获取 。   ts 文件 如前所述   lrelease   命令 ， 语言 工具 打开 发布 即可 。   exe 制作 安装 程序 制作   exe 制作   exe 制作 写的 pyqt 程序 或者说 python 程序 freeze ， 目标 机器 上 用户 安装 python 依赖 都能 运行 程序 。   推荐 pyinstaller 。   pyinstaller 官网     。   是用 pip   安装 ， 推荐 项目 根 目录 下 创建 一个 简单 启动 脚本 ， 平时 测试 ， pyinstaller 程序 入口 。   NOTICE :   脚本 名字 pyqt 程序 模块 名字 ， 安装 后闪 退 脚本 名字 没 取好 。   很 简单 ：     - y   选项 自动 删除 原 输出 文件 ，   noconsole   隐藏 pyqt 程序 终端 界面 ， 程序 会开 两个 窗口 不 太 好看 。   顺利 ，   dist   文件夹 下 运行 目标程序 exe 运行 ， 都 OK ， 出 ， 请 钻研 官方 文档 。 。   安装 程序 制作   推荐   advanceinstaller 程序 ， 程序   官网 地址   。 推荐 安装 官网的 simple   过程 ， 请 参看 官网的   入门 tutorial   。   设置 文件 文件夹   dist   内容 都加 进去 即可 ， 软件 操作 说是 添加 文件 只能 添加 文件 ， dist   PyQt5 文件夹 再 操作 添加 文件夹 。   运行 顺利 ， 太 好了 ， 有了 程序 安装 程序 ， 赶快 分享 小伙伴 们吧 。",
            "tags":"gui",
            "url":"articles/pyqt5-learning-notes.html"
        },
        {
            "title":"python语言学习教程二进阶篇",
            "text":"类   python 中 皆 对象 。 学的 操作 对象 都是 python 程序 语言 内部 定义 对象 （ Object ） ， 接下来 介绍 类的 语法 更好 理解 对象 之外 ， 再就是 创造 操作 对象 。 面向对象 ( OOP ) 编程 概念 不 重复 ， 如有 不明 请 读者 随便 搜索 一篇 网页 阅读 下 即可 。   python 中 类的 结构   python 中的 类就 好像 树叶 ， 类就 一棵树 ， python 中超 类 ， 子类 ， 实例 重载 继承 关系 一种 搜索 机制 ：   python 搜索 有没有 属性 方法 ， ， 向上 搜索 。 比如说 实例 l1 ， 向上 搜索 C1 ， C1 向上 搜索 C2 C3 。   实例 继承 创造 类的 属性 ， 创造 类 更 上层 超 类 ， 类似 概念 子类 ， 类在 树形 层次 中 低 。   ， 简单 来说 类的 结构 搜索 机制 ， 很 好地 模拟 真实世界 知识 树形 层次结构 。   副 图 编写 代码 ：   class 语句 创造 类 ， C1 继承 C2 C3 ， 多重 继承 ， 左 右是 内部 搜索 顺序 （ 会 影响 重载 ） 。 l1 l2 类 C1 创造 两个 实例 。   初次 接触 类 概念 读者 不 指望 马上 弄懂 类 概念 ， 概念 倒并 涉及 很多 哲学 纯 思考 东西 ， 看作 一种 编程 经验 技术 。 接触 类的 学习 更 ， 纯 哲学 抽象 概念 讨论 ， 毕竟 类 东西 创造 更好 描述 现实 世界 。   别人 编写 很多 模块 一堆 类 ， 类来 情况 编写 子类 ， 原有 类 对象 改造 。 更好 利用 前人 成果 ， 成果 更好 地让 别人 快速 和上 手 ， 好好 类 工具 。   类的 最 基础 知识   类的 创建   类的 创建 语法 如上 示 ， 想 一个 好 一点 类名 。 类名 规范 写法 是首 字母 大写 ， 好和 变量 区分 。   类 创建 实例   语句 格式 MyClass 类 创建 一个 实例 myclass001 。   类的 属性   上 代码 所示 ， 创建 一个 类 ， 类 加上 一个 属性 ， 创建 一个 实例 myclass001 ， 实例 类都 有了 属性 。 实例 加上 点 加上 格式 引用 实例 属性 ， 并将 值做 修改 。   例子 简单 演示 类的 创建 ， 属性 添加 ， 实例 创建 ， 多态 核心 概念 。 类的 继承 概念 都和 大同小异 。   类的 方法   类的 方法 类似 类的 属性 加上 def 语句 定义 一个 函数 ， 函数 类 称之为 方法 。 演示 一个 例子 ， 读者 看 明白 。   是在 类的 定义 结构 ， 代表 着类 （ 更 意义 细节 请 参看 意味着 小节 ） ， . 代表 着对 属性 引用 。 实例 调用 方法 时 用的   myclass001 . double ( )   结构 ， double 函数 实际上 接受 第一个 参数 ， myclass001 ， 无 参数 函数 。 类 方法 一个 参数 。   类的 继承   实例 说是 类 创建 ， 实际上 实例 类也 一种 继承 关系 ， 实例 继承 自类 ， 类和 类的 继承 关系 与之 类似 ， 语法 稍 。 来看 例子 ：   简单 两个 类 ， 盖伦 Garen 类是 继承 Hero 类的 ， 实例 garen001 继承 Garen 类的 ， garen001 有了 addlevel 方法 ， level 属性 加一 ， hp 生命 值也 加上 值 ， 过程 很 直观 。   类的 内置 方法   构建 一个 类 ， 简单 加上 pass 语句 ， 都不 做 ， python 会为 类 自动 创建 属性 方法 。   变量 名字 都 加上 双 下划线 是给 python 语言 设计者 用的 ， 开发者 命名 变量 。   内置 方法 用户 重 定义 从来 覆盖 掉 定义 ， 特别 值得 讲的   __ init __   方法 称之为 构造 函数 。   __ init __ 方法   __ init __   方法 该类 创建 实例 构造 函数 。 ：   例子 重载   __ init __   函数 ， 接受 三个 参数 ， 是等 下 创建 实例 ， x ， y 语句 创建 实例 属性 x y 赋了 值 。   意味着   类中 一个 很 概念 ， 类的 结构 层次 简单 时还 看 ， 类的 层次结构 很 ， 会弄 糊涂 。 调用 实例 方法 ， 方法 一个 远在天边 类 给出 定义 ， 就算 ， 定义 指 调用 方法 实例 ， 一点 牢记 于心 。   例子 ：   . x 创建 实例 属性 x ， 定义 x 则是 类 Test 属性 x 。   类的 操作 第二 版   写出 版本 相比 专业 类的 版本 。   专业 做法 类 多放 点 方法 ， 放 属性 ， 不 太 。 确实 写给 人 感觉 更 干净 点 ， 方法 方法 ， 调用 代码 放在 不用 管它 ， 用了 构造 函数 去 查看 相关 类的 构造 方法 ， 很 省 精力 。   类的 操作 第三 版   例子 第二 版所 作的 改动 ， 核心 知识点 。 函数 参量 列表 中 表述   color = ' blue '   blue color 变量 备选 值 ， color 成了 选 参量 。   构造 函数 继承 重载   例子 很 核心 一个 概念   __ init __   构造 函数 继承 重载 。 garen001 实例 创建 ， 引用 Hero 构造 函数 ， 特别 ，   Hero .__ init __ ( , 1 , 455 , 56 , color )   调用 Hero 类的 构造 函数 ， 写上 ， 最终 创建 实例 garen001 ， Hero ， 调用 Hero 类的 构造 函数 参量 列表 形式 。 概念 弄 ！   理解 一点 ， 类的 继承 关系 中的 构造 函数 继承 重载 好看 。 Hero 类的 构造 函数 继承 Unit 类的 构造 函数 ， Hero 类 额外 一个 参量 level 接下来 开辟 存储 空间 配置 好 。   __ str __ 函数 继承 重载   第二个 修改 重 定义 类的   __ str __   函数 ， 定义 改变 默认 print 类 对象 输出 。 默认 一段 类并 无 内容 信息 。 return 一段 想要 字符串 样式 即可 。   类的 高级 知识   说下 python2 python3 兼容性 ， 读者 python2.7 环境 下 ， 推荐 定义 class 都 跟上 object ：   章节 围绕 内容 展开 ， python 类的 深度 定制 。   内省 属性 ：   __ dict __   ，   __ class __   某种 运算 符 操作 调用 常见 方法 时的 重载 。   函数 装饰 器 ：   函数 调用 定制   属性 访问 定制   特定 属性 访问 时 定制   类 实例 创建 时 定制 — — 类 装饰 器   类 对象 创建 时 定制 — — metaclass   __ dict __   参考   网页   。   读者 记住 class 是个 类似 def 语句 ， 其也 管理 一个 名字 空间 ， 区块 语句 执行 。 看 例子 ：   例子 很 东西 ，   b .__ class __   查看 实例 b 类型 ， 大体 输出 接近   type ( b )   ， 类 B 类型 type 。 在将 metaclass 会讲 ， 记住 实例 类 创建 ， 类是 元类 type 创建 。   实例 b 类 B 类 A 都 记忆 属性 ， 继承 来的 属性 是不 重复 记忆 。   类的   __ dict __     mappingproxy 对象 ， 其是 只读 ， 实例 b   __ dict __     dict 类型 ， 读写 （ 参考   篇 文章   ） 。     @ property   装饰 器 修饰 函数 ， 会 一个   property   object ， 会谈 ， 特定 属性 访问 是可 定制 ， 描述符 对象 。   __ getitem __   __ getitem __ ( ,   key )   方法 定义 实例 形式   Class [ ' key ' ]   。   默认 类是 不 支持   Test [ ' x ' ]   写法 。     __ setitem __ ( ,   key ,   )   方法     t [ ' x ' ] = 3   赋值 形式 ；   __ delitem ( ,   key ) __   方法 运算 符号 ：   del   t [ ' x ' ]   。   python 官方 文档 介绍 ： 方法 ， 几个 异常 规范 ：   TypeError   key 是不 恰当 类型 抛 出   IndexError   给定 值 超出 序列 索引 抛 出 异常   KeyError   key 抛 出 异常 。   数学 运算 符号 重载   层面 很少 需求 去 重载 数学 运算 符号 操作 。 稍微 下 即可 。   加法   X   +     ,   __ add __ ( , )   右侧 加法   加法 X + ， 右侧 加法 ， 则为 radd ， 公式 ： + X 。 不 区分 加法 。   +   ​   X   ,   __ radd __ ( , )   增强 加法   X   + =   ，   __ iadd __ ( . )   减法   X   -     ,   __ __ ( , )   。 情况 类似 rsub isub 。   *   乘法 ，   __ mul __ ( , )   ， 类似 都 右侧 运算 增强 运算 ， 不再 赘述 。   / /   整除 ，   __ floordiv __   ， 类似 参数 都是 ， 不再 赘述 。   /   除法   ，   __ div __   %   取余 ，   __ mod __   * *   开方 ，   __ pow __   < <   左移 运算 ，   __ lshift __   > >   右移 运算 ，   __ rshift __   &   位 ，   __ __  |  位或 ，   __ __   &# 94 ;   位异 ，   __ xor __   类似 右侧 运算 名字 加上 r ， 增强 运算 名字 加上 i ， 不 赘述 。   逻辑 运算   bool 函数   bool ( X )   __ bool __ ( )   __ eq __   __ eq __   方法 定义 两个 对象 之间 A   = =   B 。   ：   定义   __ eq __   方法 ， 运行 = = 语句 ， 两个 对象 之间 内置 字典 键和 值都 ， 返回 True 。   不 重 定义   __ eq __   方法 ， test test2 会从 原始 object 类 继承   __ eq __   方法 ， 返回 False ， 想 是这 两个 实例 内部 值的 差异 ， 基于 id 。   判断 操作   类似 = = 操作 ， 判断 操作 内置 方法 重 定义 。   X   ! =   Y   ，   __ ne __ ( , )   定义 。   X   > =   Y   ，   __ ge __ ( , )   定义 。   X   < =   Y   ，   __ le __ ( , )   定义 。   X   >   Y   ，   __ gt __ ( , )   定义 。   X   <   Y   ，   __ lt __ ( , )   定义 。   语句   NOTICE   ： 不 记 错了 python3 改动 ， 语句   __ __   重载 。   提供       X   语句 支持 ， 例子 基于 类 其内 字典 内容 做出 判断 。   类 之间 判断   参考 网站   。   先 下 语句 = = 判断 isinstance id type 函数 ， 再 提及 python 类的 内置 方法   __ eq __   。   python 一个 彻头彻尾 面向对象 语言 ， python 内部 数据 都是 对象 ， 对象 类型 type 区别 。 内置 对象 类型 ：   对象 type 类型 之外 ， id 属性 ， id 对象 内存 中的 存储 位置 。   说 lst = [ 1 , 2 , 3 ] ， 程序 内存 中 创建 对象 [ 1 , 2 , 3 ] ， lst 变量 名 一个 引用 。 看 例子 ：   type 函数 返回 对象 类型 ， id 函数 返回 对象 内存 中的 存储 位置 ， = = 判断 确保 值 ， 语句 返回 True ， 对象 内存 上 （ id ） 同一个 东西 。   对象 之间 类型 语句 ：   特别 好用 ， 假设 fun 是你 定义 一个 函数 ， type ( fun )   = =   function 就会 出错 ， type 还要 小心 NoneType 空 列表 类型 ， type 类的 继承 进去 。   推荐 isinstance 函数 类型 ， 请 参考   网站   。 推荐 types 模块 特定 名字 判断 类型 ， ：   types . NoneType   None 值的 类型   types . TypeType   type 对象 。   types . BooleanType   还   bool   。   types . IntType   还   int   ， 类似   long   ，   float   。   types . ComplexType   复数 类型   types . StringType   字符串 类型 ， 还   str   。   types . TupleType   元组 ， 还   tuple   ， 类似   list   ，   dict   。   types . FunctionType   定义 函数 类型 ，   types . LambdaType   。   值得一提的是 print 内置 函数 FunctionType BuiltinFunctionType 。   更 内容 请 参见   types 模块 官方 文档   。   强制 类型 变换   包含 内置 方法 ：   len ( )   len ( )     __ len __ ( )   提供 支持 。   copy 方法 deepcopy 方法   X . copy ( )     ___ copy __ ( )   提供 。   X . deepcopy ( )     __ deepcopy __ ( )   提供 。   就要 提 python copy 模块 ， 很少 有人 去 针对 类 单独 编写   __ deepcopy __   方法 ， 会有 情况 ， 很多 情况   copy . deepcopy ( )   够 用的 。   语句 支持   PEP343 说法 ：   实际上 ：   执行     open ( ... )     f   类 语句 ， 最终 离开 调用 文件 对象   __ exit __   方法 ：     contextlib   还 提供 一个   contextmanager   装饰 器 ， 写法 差异 ， 效果 大致 类似 。 一个 演示 例子 ：   __ call __   请看 例子 ：   有了   __ call __ ( , args )   方法 ， 实例 好像 函数 调用 。   __ repr __     __ str __   区别   简单 来说   repr ( )   调用   __ repr __   方法 ， str ( )   调用   __ str __   方法 。 再 简单 实验 ， print 函数 字符串 format 相关   __ str __   方法 ， python REPL 环境 下 ， 简单 输入 变量 回显   __ repr __   方法 。 不   __ str __   方法 ， print 函数 字符串 format 相关 会 调用   __ repr __   方法 ，   __ repr __   方法 就算 不 python 对象 都有 默认   __ repr __   方法 。   __ __   一个 类 创造 出 一个 实例 调用   __ __   方法 ， 才是 调用   __ init __   方法 。 一个 单 例 模式 ， 一个 类 只能 创造 一个 实例 ， 请 参看   篇 文章   。 【 代码 做 修改 ， python3   super ( )   写法 简化 之外 ， object   __ __   方法 是不 带 参数 。 python   __ __     __ init __   协作 关系 ， 参数 某种 一致性 ， 暂时 还 不 太 。 TODO 】   一个点 ，   _ instance   两个 类 初始化 过程 中 指向 同一个 对象 。   _ instance   类的 ， 实例 基于 类的   __ __     __ init __   方法 生成 ， 假设 python 程序 ， 类 （ class def 一种 东西 ） 不 内存 里 编译 好了 ， 都 引用 类就 行了 。 内存 编译 好了 类   _ instance   变量 封装 好了 。 理解 过程 有助于 进一步 理解 类 变量 作用 。   __ del __   对象 内存 存储 回收 时 ， python 执行 一个 内置 方法   __ del __   。 定义 管理 额外 资源 ， 定制 函数 确保 python 程序 关闭 时 目标 资源 自动 关闭 回收 。   __ getattr __   属性 不 对象   __ dict __   ， python 会 调用   __ getattr __ ( , )   方法 （ 参考   篇 文章   ） 。 没 定义 方法 将抛 出   AttributeError   。   python 语言 内部 发生变化 ， 更 确切 表述 参考 python 官方 文档 ， python 默认 属性 查找 找到 ， 试着 调用 对象   __ getattr __   方法 查找 ， 还 找 不到 则抛 出   AttributeError   异常 。 官方 文档 还 ， python 默认 属性 查找 动作 ， 找到 目标 属性 ， 讨论 类 继承 相关 属性 找到 。   __ getattr __   方法 调用 。   __ getattr __   方法 加上 额外 查找 动作 代码 ：     __ setattr __ ( , , )     __ delattr __ ( , )   ， 两个 方法 原 属性 不 都 会对 操作 ， 谨慎 ！ 相关   __ getattribute __   方法 不 推荐 ， 会 干扰 python 默认 属性 查找 ， 一种 很 不好 编程 实践 。   迭代 器和 生成 器   推荐   篇 文章   ， 小节 概念 理清 很大 。 慢慢 来说 。   Iterable 迭代 对象 ， Iterator 迭代 器 。 collections 有这 两个 类 ， 做出 判断 ：   再 来看 官方 文档 词语 解释 ：   iterable     迭代 对象   逐一 返回 成员 项的 对象 。 迭代 对象 例子 包括 序列 类型 （   list   、   str     tuple   ） 非 序列 类型   dict   、   文件 对象   定义   __ iter __ ( )   方法   Sequence   语义   __ getitem __ ( )   方法 任意 定义 类 对象 。   迭代 对象 用于     循环 一个 序列 地方 （   zip ( )   、   map ( )   ... ） 。 一个 迭代 对象 参数 传给 内置 函数   iter ( )   时 ， 会 返回 对象 迭代 器 。 迭代 器 于对 值 集合 一次性 遍历 。 迭代 对象 时 ， 不 调用   iter ( )   迭代 器 对象 。     语句 会为 自动 操作 ， 创建 一个 临时 未 命名 变量 用来 循环 期间 保存 迭代 器 。 参见   iterator   、   sequence     generator   。   iterator     迭代 器   用来 一连串 数据流 对象 。 重复 调用 迭代 器的   __ __ ( )   方法 （ 传给 内置 函数   ( )   ） 逐个 返回 流中 项 。 数据 可用 时则 引发   StopIteration   异常 。 迭代 器 对象 中的 数据项 已 耗尽 ， 调用   __ __ ( )   方法 只 会 再次 引发   StopIteration   异常 。 迭代 器   __ iter __ ( )   方法 用来 返回 迭代 器 对象 ， 迭代 器 必定 迭代 对象 ， 可被 用于 迭代 对象 大部分 场合 。 一个 例外 会 重复 访问 迭代 项的 代码 。 容器 对象 （   list   ） 每次 向其 传入   iter ( )   函数     循环 中 时都 会 一个 新的 迭代 器 。 情况 下你 尝试 迭代 器则 会 返回 迭代 过程 中被 耗尽 迭代 器 对象 ， 使 看起来 像是 一个 空 容器 。   生成 器 函数 区别 函数 yield 语句 返回 ， 这块 python 异步 相关 ， 。 生成 器 表达式 ：   其都 生成 器 ， 生成 器是 某种 简化 版的 迭代 器 ， 迭代 器 是可 迭代 对象 。 迭代 对象   iter   函数 成了   迭代 器了 。 一般而言 简单 理解 ， 对象   __ iter __   方法 ， 一个 迭代 对象 ， 对象   __ __   方法 ， 一个 迭代 器 。   常见 遍历 过程 所示 ：   iter 函数 调用 目标 对象   __ iter __   方法 （ 对象 是可 迭代 对象 方法 ） ， 一般而言 简单 情况 ，   __ iter __   方法 返回 目标 对象 ， 目标 对象 定义   __ __   方法 。   而就 迭代 器 来说 ， 迭代 过程 调用   __ __   方法 获取 下 一个 值 ，   StopIteration   异常 停止 获取 。   提到 语句 ， map   zip   函数 是将 过程 自动 做 了的 。 包括 iter 函数 捕获 终止 异常 。   文件 对象 本身 迭代 ， 调用   __ __   方法 返回 文件 中 下 一行 内容 ， 到达 文件 尾也 迭代 越界 返回 ：   StopIteration   异常 。   函数 ( f ) 等价   f .__ __ ( )   。   定义 类的   __ __   方法 类 函数 时的 。   序列 （ 列表 ， 元组 ， 字典 ， ranges 对象 ） 等是 迭代 对象 ， 迭代 器 。 iter 函数 成了 迭代 器了 。   提及 常规 操作 ，   __ iter __   返回 ， 构建   __ __   方法 定制 迭代 器 外 ：   定义   __ iter __   方法 返回 一个 生成 器 对象 （ generator   object ） ， 生成 器 迭代 器 。   例子 定义 字典 类的   __ iter __   方法 一个 新类 ， 类用 iter 函数 迭代 器 返回 排序 字典 键 。   例子 ， 只 语句 迭代 目标 对象 时才 会 调用   __ iter __   方法 。   理解 python 迭代 操作   python 中 代码 运算 效率 会低 一点 ， 类似 工作 用更 简单 语句 运算 效率 会高 一点 。 python 一个 设计 理念 ， 不尽然 ， 确实 很 有意思 。   程序 结构 中最 有用 多个 操作 重复 ， 迭代 递归 循环 语句 。 递归 函式 感觉 很 有用 ， 基于 数据结构 特别 操作 重复 迭代 语句 即可 ， 才 循环 语句 。   迭代 语句 中 语句 运算 效率 最低 ， map 函数 （ 不尽然 ） ， 列表 解析 。 最 pythonic 风格 ， 运算 效率 列表 解析 ， 一个 列表 解析 解决 就用 列表 解析 解决 ， python 设计者 很多 优化 工作 都是 针对 迭代 操作 ， python3 进一步 深化 迭代 思想 ， python 中的 迭代 是用 c 语言 。   反思 列表 解析 通用 ？ 比如说 range 函数 文件 对象 列表 字符串 ， 都 称之为 迭代 对象 。 迭代 对象 特色 一系列 元素 ， 一系列 元素 逐个 调 ， 列表 解析 调 元素 表达式 操作 ， 收集 。 ？ 看 张 图片 ：   张 图片 告诉 列表 解析 数学 上 集合 函数 定义 类似 ， 迭代 对象 好像 一个 集合 （ 顺序 没 顺序 都行 ） ， 集合 中的 元素 操作 ， 操作 数学 中 定义 函数 ， 加上 过滤 条件 ， 元素 不 参加 运算 ， 生成 第二个 迭代 对象 （ 列表 字典 。 ）   一个 哲学 上的 假定 ， 世界 都 数学 描述 ， 数学 都 函数 上的 信息 操作 过滤 流来 描述 。 不尽然 ， 列表 解析 上是 很 通用 思想 。   有限 元素 集合 适合 迭代 ， 无限 元素 集合 也许 递归 循环 更 适合 。 想到 集合 描述 分为 列举 描述 （ 有限 元素 列举 ） 定义 描述 。 比如说   1 < x < 10   ， x 整数 ， 定义 一个 集合 。 想到 python 描述 列举 （ 列表 ） 集合 ？ range 函数 目的 生的 ， 比如说   range ( 10 )   定义   [ 0 , 10 )   一系列 整数 集合 ， range 函数 生成 一个 range 对象 ， range 对象 一个 迭代 对象 ， 看作 迭代 对象 中的 描述 集合 类型 。 问了 ，   0 < = x < 10   整数 集合 描述 ， 函数 描述 可不可以 ？ 可不可以 建立 类似 range 对象 描述性 迭代 对象 ？   map filter 函数   迭代 模式 描述 ， 常见 列表 解析 格式 ( 语句 ) 集合 中 元素 操作 过滤 ， python 中 两个 函数 类似 功能 ， map 集合 中 元素 函数 操作 （ 接受 lambda 函式 ） ， filter 过滤 功能 。 值得一提的是 python3 map 函数 filter 函数 返回 都是 一个 迭代 对象 列表 ， range 函数 迭代 对象 用于 列表 解析 结构 。   map 函数   列出 例子 ：   map 函数 还 接受 两个 迭代 对象 协作 参数 模式 ， 学过 lisp 语言 会 很 眼熟 ， 理解 是很 便捷 。 第一个 迭代 对象 取出 一个 元素 map 函数 第一个 参数 ， 第二个 迭代 对象 取出 第二个 参数 ， 函数 运算 ， 一个 ， 不 列表 解析 一个 map 对象 （ 迭代 对象 ） ， 展开 以此类推 。 值得一提的是 两个 迭代 对象   深度 最 短的   ， 请看 例子 ：   filter 函数   谈及 类似 ， filter 函数 过滤 一个 迭代 对象 一个 迭代 对象 。 类似 功能 列表 解析 后的 语句 。 谈到 map 函数 提及 优先 列表 解析 模式 ， filter 函数 ， 列表 解析 会让 人 困惑 ， 推荐 filter 函数 迭代 对象 过滤 操作 。   filter 函数 逻辑   return   True   （ lambda 表达式 表达式 值为 真 )   元素 才被 收集 ， 或者说 过滤 。   请 参看 例子 理解 ：   传统 编写 函数 ：   zip 函数   顺便 zip 函数 提了 ， zip 函数 返回 一个 迭代 对象 ， 接受 任意 数目 迭代 对象 ， 逐个 取出 迭代 对象 元素 一个 元 一个 元素 。 map 函数 类似   迭代 深度 最 短的 迭代 对象   。   列表 字典   例子 价值 不 大 ， zip 函数 接受 任意 数目 参数 情况 。 y . items ( ) 解包 4 参数传递 zip 函数 ， zip 函数 封装 逻辑 有人 问 ， 迭代 对象 取出 一个 元素 ， 用元组 包装 返回 。   例子 情况 ， 跳 字典 形式 ， 来个 数据 映射 ：   属性 数据 推荐 类来 ， 情况 下 不 类 ， 简单 。   值得一提的是 数据 存储 形式 sql 存储 ， 不 ， 矩阵 转 置 功能 。   装饰 器   装饰 器的 作用 机制 接下来 函数 进一步 封装 ， ：   装饰 器并 一个 神秘 难懂 概念 ， 定义 函数 ， 函数 函数 对象 ， 某种 封装 。   定义 装饰 器   print1 函数 做成 一个 装饰 器 函数 ， print3 函数 理解   print3 = print1 ( print3 )   。 — — 理解 关键 在于 理解 python 中 函数 名字 无关紧要 ， 关键 函数 对象 。 右边 print3   def   print3   时 生成 函数 对象 ， 函数 对象 送给 print1 封装 一个 新的 函数 对象 ， 再 函数 对象 赋值 给了 变量 print3 。   多个 装饰 器   多个 装饰 器的 装饰 顺序 是从 下往 上的 ， 例子 原 print4 函数 对象 先 print1 ， 再 print2 ， 函数 对象 赋值 给了 变量 print4 。   装饰 器 带上 参数   例子 中 ， 简单 装饰 器 函数 理解 一个 接受 函数 对象 返回 返回 函数 对象 函数 ， 很 直观 简单 。 实际上 装饰 器也 带上 参数 ， 函数 闭包 结构 【 函数 定义 函数 结构 ， 内部 函数 外部 函数 参数 变量 】 才能 ， 例子 所示 :   装饰 器 写法   小节 参考   网页   。 书写 一个 装饰 器 函数 通用 写法 ：   无 参数 装饰 器 版本     functools   模块   wraps 装饰 器 ， 接受 装饰 函数 参数 。 不 这样的话 ， 原 test 函数 中 定义 文字 丢失 ，   test = mydecorator ( test )   ， 实际上 test 变量 接受 函数 对象   wraper _ func   ， 不 信 查看   test .__ __   其是 等于   wraper _ func   。 如上 wraps 装饰 器 ， 原 test 函数 中 定义 名字 文档 都将 保留 。   带 参数 装饰 器 版本   静态 方法 装饰 器   例子 中 ， 希望 创造 一个 函数 ， 函数 实例 关系 （ 指 函数 不 接受 默认 参数 ） 。 如上 示 ， 函数 希望 简单 打印 一小 段 字符 ，   代码 错误   ， 函数 加上   @ staticmethod   ， 段 代码 报错 ，   类 定义 函数 类的 静态 方法 ， 静态 方法 继承 ， 静态 方法 特色 不 建立 实例 ， 类来 调用 ， 所示 ：   静态 方法 pyqt 中的   一个 静态 方法 ， 调用 方法 来弹 出 询问 打开 文件 窗口 ， 不 先 实例 化 一个 对象 ， . 类似 形式 调用 。   类 方法 装饰 器   一个 装饰 器 会 用到 ，   @ classmethod   ， 类 方法 装饰 器 。 其和 静态 方法 不 新建 实例 ， 类来 调用 。 其和 静态 方法 区别 静态 方法 调用 默认 第一 参数 ， 而类 方法 调用 默认 第一 参数 调用 类 。   classmethod 装饰 器 实际上 东西 ， 传 进去 第一个 参数 cls 看 ，   cls ( ... )   类来 生成 一个 实例 。   属性 装饰 器   编程 语言 开发者 会在 类里 定义 针对 属性 set 方法 ， Pythonic 风格 ， 特定 名字 属性 ， 利用 属性 装饰 器来 构建 ， 所示 ：   将给 类 定义 属性 ， 调用 属性 就用 点号 引用 即可 ， 执行   @ property   装饰 函数 。   color 属性 只 读 ， 更改 。   请 参看   网页   ， 讲 到了   @ color . setter   装饰 器 ， 装饰 函数 ， 函数 修改 color 属性 。   @ color . deleter   装饰 函数 ， 函数 删除 属性 。 deleter 较少 ，   @ property   大部分 需求 ， 修改 属性 定义 setter 。   一个 简单 setter 例子 所示 ：   类 装饰 器   类 装饰 器 利用 类的   __ call __   内置 方法 ， 段 代码 粘贴 ， 看 别人 源码 有用 ， 装饰 器 这部分 到此为止 ， 没 弄 。   讲到 class 声明 语句 def 语句 很 类似 ， def 语句 利用 缩进 区块 内的 代码 （ 简单 理解 执行 编译 一遍 ， ） 构建 出 一个 函数 对象 ， 函数 对象 名字 绑定 。 class 语句 利用 缩进 区块 内的 代码 构建 出 一个 类 对象 ， 类 对象 名字 绑定 。   类 装饰 器 ， 类 挂个 装饰 器 ， 示是 ：   C ：   函数 装饰 器 相当于 函数 对象 创建 过程 深度 定制 DIY ， 而类 装饰 器就 相当于 类 对象 创建 过程 深度 DIY 。   多重 继承 顺序   来看 例子 ：   测试 例子 ， D x 先 查找 ， 返回 D   ， 类 D x 定义 语句 换成 pass ， B 。 程序 逻辑 test 实例 找 不到 x ， 再找 D ， D 找 不到 再 接下来 找 D 继承 自的 父 类 ， B ， 为止 ， 没什么 新鲜事 发生 。   再 B x 赋值 语句 换成 pass ， B1 ， 没什么 好 惊讶 。 类似 操作 ， 会 发现 python 值的 查找 顺序 ： D ， B ， B1 ， B2 ， B3 ， A ， A1 ， A2 。   道 ： 恩 ， 类的 多重 继承   深度 优先 法则   ， 先 把子 类 子类的 子类 都 查找 完 ， 确认 值 再 左 右的 查找 。   情况 来说 理解 ， 编程 界 多重 继承 中有 有名 — — 菱形 难题 。   菱形 难题   参考 资料 ：   维基 百科 菱形 难题   菱形 难题 即在 上的 类的 继承 中 ， C A 都有 同名 属性 x ， D 会 调用 ？ 读者 测试 例子 ：   会 发现 python 查找 顺序 D ， B ， C ， A 。   实际上 查找 顺序 python2 python3 都是 差异 ， 请 参考   Guido   写的   篇 文章   。 结论 python3 MRO 算法 过程 ：   搜索 树会被 预计 算   观察 深度 优先 算法 大体 正确 ， 重复 类的 逻辑   只 保留   。 【 例子 D ， B ， A ， C ， A 规约 D ， B ， C ， A 】   super 面对 菱形 难题   super 引用 父 类 动作 ， 简单 情况 不 说了 ， 接下来 请看 例子 ：   例子 刁钻 刁钻 还 调用 super 函数 ， 类 B 引用 super 会 指向 Base 。 说 例子 输出 ：   C super 引用 B 没 ， B super 引用 A 没想到 。 原因 super 引用 逻辑 调用 提到 MRO 算法 预处理 树 ， 搜索 树为 ： C ， B ， A ， Base 。 第二次 调用 会 引用 A 。 A super 再 引用 Base 。   初始化 动作 例子 来说 类的   __ init __   都 执行 一遍 。   描述 器   小节 参考   网页   。   谈及 属性 装饰 器 ， 实际上 调用 property 函数 ，   函数 返回 一个 描述 器 对象 （ Desriptor ） 。 一个 描述 器 对象 ， 简单 来说 对象 定义 三个 方法 （ 最   __ __   方法 定义 ） 。   思路 再理 ， instance . a 表达 ， python 视图   __ dict __   去找 属性 ， 找   instance [ ' a ' ]   表达 值的 （ 类的 属性 继承 先不 涉及 ） ，   __ dict __   属性 ， python 会去 找   __ getattr __ ( , )   方法 ， 找 不到 会报 错 。   找 属性 过程 中 ， 查找 描述 器的 是很 前的 。 找到 属性 一个 描述 器 ， python 会 描述 器 对象 提取 属性 ， 修改 属性 等的 。   理解 property 函数 返回 一个 描述 器 ， 看 python 代码 等价 是最 直观 ：   缓存 属性   例子 灵感 来自 python 官方 装饰 器   @ property   源码 ， 稍 作 修改 对象 属性 记忆 特性 。   metaclass   类都 元类 （ type 类 ） 创建 ， 语句 ：   type 调用   __ call __   方法 ， 方法 运行 type 两个 方法 ：   __ __   ，   __ call __   。   创造 一个 类了 ， 提到 ：   类 还要 调用   __ __   ，   __ call __   ， 创造 出 一个 实例 来了 。   提到 type type type ， type 大体 看作 python 中 类型 最底层 原子结构 。 元类 创造 类 ， 是类 创造 实例 。   定义 一个 元类   一个 元类   元类 暂时 还 不 深究 ， python 程序员 来说 理解 元类 即可 ， 实在 不 元 类的 。   进程 线程   进程 定义 :   一个 执行 程序 实例 。 进程 都有 一个 唯一 进程 ID ，   PID   。   ps   命令 第一个 列 进程 PID 属性 。 python 中   os . getpid ( )   查看 进程 PID 。   一个 CPU 机器 上 ， 多任务 操作系统 实际上 只能 运行 一个 进程 ， 操作系统 切换 进程 一种 多任务 运行 多个 程序 感觉 。 CPU 机器 上是 真的 运行 多个 进程 。   进程 fork   进程 fork 代码 信息 配置 相关 信息 复制 注册 。 相当于 代码 环境 下 ， 两个 单独 运行 程序 实例 。   一个 简单 小 例子 ，   os . fork ( )   语句 移到   print ( '   fork ' )   变化 。   程序 简单 理解 ， py 文件 编译 成 字节 码 内存 一个 程序 实例 （ 还 包含 信息 ） ， 程序 运行 会 os . fork 调用 系统 fork 函数 ， 复制 程序 实例 （ 以本 程序 实例 处的 状态 ） ，   print ( '   fork ' )   执行 ， 子 进程 执行 一行 代码 ， os . fork ( ) 代码 执行 。 相当于 两个 程序 运行 ， 打印 顺序 是说 不准 。   操作系统 fork 暂时 不 ， 两个 程序 实例 变量 运行 环境 基本上 一模一样 ， 运行 状态 有所不同 之外 。 fork 做出 一种 程序 多任务 方案 ， os 模块 fork 方法 只 支持 unix 环境 。   子 进程 父 进程 分开   请看 代码 :   运行 大致 :   父 进程 ， pid 是本 父 进程 子 进程 PID ， 而在 子 进程 ， os . fork ( ) 返回 0 。 利用 父 进程 操作 子 进程 操作 分开 。 代码   pid   一块 是父 进程 ， 一块 是子 进程 。   线程 入门   线程的 内部 实施 细节 进程 ， 看做 进程 fork 动作 轻 量化 解决 方案 。 操作系统 来说 怕是 程序 来的 进程 程序员 角度 来说 看做 两个 程序 都是 ， 进程 下的 线程 看 ， 操作系统 层面 线程 共享 进程 大部分 资源 ， 线程 系统资源 竞争 关系 ； 程序员 角度 来看 线程 之间 公有 变量 线程 之间 共享 。   python 操作 线程的 模块   threading   模块 ， 简单 新建 一个 线程 对象 ( Thread ) ， 调用   start   方法 启动 ， 线程 要做 些 线程 对象   run   ， 重 定义 ， 默认 调用 本线程 Thread 类 新建 输入   target   参数 ， target 参数 指向 函数 。 一个 简单 例子 :   :   控制 参数 逗号 加上 。   不 太 喜欢 风格 ， 线程 对接 函数 实际上 return 值 ， 保存 值也 依赖 定义 ， 称之为 意义 上的 函数 （ 一个 定义 很 函数 复用 特性 很 强 ） 。 线程 类的 风格 编写 。 代码 参考   网页   。   调用 线程 对象   join   方法 确保 该线 程 执行 完 ， 其也 返回 异常 。 做法 不 太 标准 ， 更 标准 做法 单独 写 一行   t . join   代码 :   确保 线程 都 执行 完 ， 形式 多任务 并行处理 效果 。   例子 对线 程的 执行 顺序 ， 推荐 python queue 模块 ， 略过 。   后台 线程   函数 一个 后台 警报 线程 ， 阻塞 主 程序 。   如上 示 ， 原 beep 函数 调用 系统 play 命令 制造 一个 声音 ， b 声音 持续 时间 ， 其是 阻塞 。 一个 线程 调用 ， 其就 阻塞 主 程序 。   daemon   是让 线程 一个 后台 线程 ， 请 参看   网页   ， 说道 后台 线程 不用 管了 ， 会 主 程序 自动 关闭 。   多线程 :   一个 定时器   例子 参考   网页   。   很 简单 ， 线程 timer . sleep 函数 不 冻结 主 程序 。   多线程 下载 大 文件   小节 参考   网页     网页   。     _ content _ tofile   函数 目标 内容 大小 大于 1M 启动 多线程 下载 方法 。   guess _ url _ filename   函数 url 猜测 目标 下载 文件 名字 ， 还 一个 尝试 版本 。   requests . 函数 加上   stream = True   参数 ， 连接 目标 url 头 文件 信息 进一步 下载 content 内容 。 早期 headers 信息 做出 判断 。   接下来 HTTP 头 文件   content - length   判断 下载 内容 大小 ， 属性 ， 目标 url content 内容 ， 函数 情况 做出 ， 是单 网页 url ， requests 方法 获取 网页 文本 内容 即可 。   目标 长度 小于 1M ， 打开 文件 ， requests 模块 里 response 对象   iter _ content   方法 迭代 完 content 内容 。   目标 长度 大于 1M ， 采用 一种 多线程 下载 方法 。   _ content _ partly   函数 ， 接受 url index ， index 一个 简单 索引 ， bytes 还 计算 。 多线程 操作 bytes 计算 细节 略过 讨论 。 唯一 值得一提 HTTP 协议 Range 属性 ， begin - end ， 0 - 1024 ， 还 包括 1024 位 ， 实际上 1025 bytes ， python 中 体验 ， end begin + 1024 - 1 。 1024 bytes 位 ， 定位 ( 0 , 1024 ) ， 即和 python 中的 ， 不 包括 1024 位 。   一个 小 信息 ， HTTP 协议 返回 头 文件 中的   content - range   属性 ， 请求 Range 越界 ， 属性 。 begin 越界 ， end 越界 请求 ？ HTTP 协议 得很 好 ， 跨 界 情况 都只 返回 点 content 内容 。   写 文件 降低 内存 消耗 ， 语句 强制 文件 流 写入 文件 中 ， 好 释放 内存 ， 下载 程序 内存 使用率 剧增 。   线程 锁   python 两种 类型 线程 锁   Lock     RLock   ， 其都   acquire   获取 锁和   release   释放 锁 。 一个 线程 试着 访问 unlocked 锁 ，   acquire   返回 ； 访问 locked 锁 ， 该线 程将 阻塞 ， 一个   release   释放 锁 。   RLock Lock 区别 RLock 线程 acquire ， RLock 称之为 递归 锁 ， （ 递归 ） 函数 线程 中 访问 资源 ， ， RLock 。   RLock 常和 语句 ：",
            "tags":"python_language",
            "url":"articles/python-advanced.html"
        },
        {
            "title":"python语言学习教程一基础篇",
            "text":"初识 python   Python 是个 成功 脚本 语言 。 最初 Guido   van   Rossum 开发 ， 1991 年 第一次 发布 。 Python ABC Haskell 语言所 启发 。 Python 一个 高级 、 通用 、 跨平台 、 解释 型的 语言 。 人更 倾向 称之为 动态 语言 。 很 易学 ， Python 一种 简约 语言 。 最 一个 特征 ， 不 分号或 括号 ， Python 缩进 。 ， Python 来自 世界各地 庞大 志愿者 维护 。   python 两个 版本 区别 ， python2 python3 。 新 学者 推荐 python3 编程 ， 文档 基于 python3 。   安装 配置   python 安装 配置 linux 没什么 好说 ， windows 下的 安装 编辑 好 系统 环境 变量   PATH   值 ， 好让 读者 cmd powershell 下 调用 python 命令 。   初次 安装 程序 选项 。   python REPL 环境   终端 中 输入 python python 语言 REPL 环境 ， 很多 linux 系统 默认 python2 。 运行 ：   查看 默认 python 版本号 。   python3 终端 中 输入 python3 即可 。   python 命令 行 用法   命令 行的 格式 ：   类似 运行   python3     查看 python3 命令 选项 。   - i   选项 ， python 执行 完 脚本 会 REPL 环境 等待 下 一个 命令 ， 一闪而过 有用 。   python 执行 脚本 参数 传递   命令 行 接受 多个 参数 都 ， 报错 ， py 文件 用到 。 py 文件 中要 ， 导入 sys 模块 ， sys . argv [ 0 ] py 文件 系统 中的 文件名 ， 接下来 sys . argv [ 1 ] 命令 行 接受 第一个 参数 ， 依次 类推 。   代码 注释   python 语言 注释 符号 bash 语言 （ linux 终端 编程 语言 ） 用的 # 符号 注释 代码 。 py 文件 开头 代码 所示 ：   代码 第一行 等下 py 文件 执行 模式 执行 将用 python3 编译   1   ， 第二行 py 文件 编码 utf - 8 编码 ， python3 支持 utf - 8 符号 ， 是很 强大 一个 更新 。   多行 注释 利用 编辑器 快速 每行 加上 # 符号 。   Unicode 码 支持   谈及 python3 支持 Unicode 码的 ， 以可 执行 模式 加载 ， 第二行 写上 ：   一句 。   读者 请 实验 小 例子 ， 打印 一个 笑脸 符号 ：   数字 笑脸 符号 Unicode 码 （ 十六 进制 ） 。   代码 多行 一行   技巧 代码 越界 会 用到 。 用反 斜线   \\   即可 。 更 常用 是将 表达式 圆括号   ( )   括 ， 内部 换行 。 python 中 表达式 都 包围 圆括号 中 。   一行 多行   python 中 不用 分 号 ， 分号的 意义 大致 bash c 语言 中的 意义 类似 ， 一行 结束 。 c 语言 分号的 。   输入 输出   最 input print 命令   input 函数 请求 用户 输入 ， 值 赋值 变量 。 赋值 类型 字符串 ， 强制 类型 转换 — — int 函数 （ 整数 ） ， float 函数 （ 实数 ） ， str 函数 （ 字符串 ） — — 。 print 函数 输出 函数 。   读者 请 运行 例子 ：   __ main __ __ __     网站   讲解 ， py 文件 是被 执行 ，   __ __   py 文件 中的 值是   __ main __   ， py 文件 是被 模块 引入 ，   __ __   py 文件 中的 值是 py 文件 模块 模块 名 。   比如说 随便 新建 一个 test . py 文件 ， py 文件 简单 打印   __ __   值 ， 再 打开 终端 ， 运行 ：   打印 ：   __ main __   。 python REPL 环境 ， 再 输入 ：   import   test   会 发现   __ __   值是 字符   \" test \" 。   mymodule 模块 里的 mymod . py 文件 （ 新建 一个 mymodule 文件夹 ， 再 新建 一个 mymod . py 文件 。 ） ， mymod . py 文件   __ __   值是   \" mymodule . mymod \" 。   安装 python 高级 知识   源码 安装 python   源码 安装 python ， 依赖 预先 安装 。   zlib     zlib - devel   opensll     openssl - devel   ，   ssl . h   文件 找 不到 缺少 。   sqlite - devel     import   sqlite3   ， 将会 提示 找 不到   _ sqlite3   ， 编译 python 。   windows 下 pip   windows 下 pip 安装 ， wheel 包 ， 装上 ， 简单 安装 源码 即可 ， 集成 C 语言 写的 子 模块 ， 利用 cython 语言 编写 ， 编译 过程 确保 python 装上   VC ++     python   ， 官网 下载 地址     。   【 额外 提 一点   Visual   C ++   Compiler     Python   2.7     math   rint   方法 ， linux 下 稍微 差异 。   】   程序 中的 操作 对象   python c 语言 ， c     int   x   =   3   ， 变量 整数 ， 字符 都 指定 ， python 不 做 ， 只 声明   x   ＝   3   即可 。 程序 语言 一个 变量 （ 包括 结构 对象 ） 内存 分配 ， python 语言 帮 工作 做 ， 就让 省下 这份 心吧 。   python 程序 模块 （ modules ） ， 模块 文件 。 模块 声明 （ statements ） ， 声明 表达式 （ expressions ） ， 表达式 负责 创造 操作 对象 （ objects ） 。 python 中 皆 对象 。 python 语言 内置 对象 ： 数值 、 字符串 、 列表 、 数组 、 字典 、 文件 、 集合 ， 会 详细 。   赋值   python 中的 赋值 语法 简单 ，   x = 1   ， 一个 赋值 语句 。 c 语言 ， c 先 声明   int   x   ， 开辟 一个 内存 空间 ， 才能 x 赋值 。 python   x = 1   语句 实际上 至少 三个 工作 ：   判断 1 类型 （ 动态 类型 语言 要有 步 ）   类型 对象 存储 内存   创建 x 名字 和将 名字 指向 内存   序列 赋值   记得 python 中 表达式 加上 圆括号 ，   x , y   一个 数组   ( x , y )   ， 数组 平行 赋值 ， 第二行 列表 平行 赋值 。 一个 很 有用 技巧 。   语言 会 介绍 swap 函数 ， 接受 两个 参数 两个 参数 值 交换 ， 交换 过程 用到 临时 变量 。 而在 python 中不 再 创建 一个 临时 变量 ， 序列 赋值 会 自动 生成 一个 临时 右边 序列 （ 变量 都 原始 值 ） ， 再 赋值 （ 一一对应 是指 两边 序列 长度 。 ）   交换 两个 元素   python 中 交换 两个 元素 序列 赋值 形式 是很 便捷 ：   过程 先 执行 x = y 执行 y = x ， ， 程序 右边 创建 一个 临时 序列 ， 变量 都 值 ，   x , y = ( 2 , 1 )   ， 再 序列 赋值 。   赋 值   语句 形式 c 语言 ， 内部 机制 不 。 python 声明 x = y ， x y 变量 名 ， 都 指向 一块 内存 值 。 说 x y 一个 东西 ， 取的 名字 。   语句   2   测试 ， 显示 x y 一个 东西 。   写成 形式 ：   x y 指向 同一个 对象 ， python 内部 还 不 太 【 一个 原则 右边 对象 变的 ， python 会 尽可能 x y 指向 内存 值 。 】 。 语句 功能 再举 例子 ：   有了 两个 列表 对象 。   增强 赋值 语句   x = x + y   写作   x   + =   y   。 类似 ：   迭代 对象 迭代 赋值   python 语言 有了 ， 发现 python 中 迭代 思想 骨髓 。 接触 序列 赋值 模式 ， 发现 赋值 临时 创建 右边 序列 之外 ， 还 迭代 操作 ， 推测 python 平行 赋值 模式 扩展 到可 迭代 对象 ， 发现 确实 ！   一点 确保 左边 变量 数目 迭代 对象 输出 元素 数目 ， 进一步 扩展 序列 解包 赋值 支持 ：   通配 赋值 ， 喜欢 称呼 ， 通配 收集 元素 列表 ； 函数 参数 通配 传递 ， 收集 元素 是在 元组 。   ， 迭代 对象 赋值 迭代 操作 加上 元素 一对一 赋值 操作 。   数值   python 数值 内置 类型 ： int ， float ， complex   3   。 python 算术 运算 操作 加减乘除 （ +   -   *   / ） 。   =   赋值 ， 是中 缀 表达式 优先级 括号 法则 ， 都是 编程 语言 说到 烂的 东西 。   二进制 八 进制 十六 进制   二进制 数字   0b   （ 零 ） 开头 ， 八 进制 数字   0o   （ 零 ） 开头 ， 十六 进制 数字   0x   （ 零 艾克斯 ） 开头 。   二进制 格式 查看 数字   bin   命令 ， 十六 进制 查看 数字   hex   命令 。   进制 转换 小 程序   程序 运行 情况 所示 ：   基于 字符串 进制 转换 字符串 format 方法 。   数学 幂 方 运算   \\ ( x &# 94 ; y \\ )   ， x y 次方 第二行 所述   x * * y   形式 即可 。 pow 函数 作用 ，   pow ( x , y )   。   数值   数值 提及   > ， < ， = = 之外 ， > = ， < = ， ! = （ 大于 等于 ， 小于 等于 ， 不 等于 ） 。 python 还 支持 连续 ， 数学 格式   \\ ( a < x < b \\ )   ， x 区间   \\ ( ( a , b ) \\ )   判断 。 python 中 写成 形式 ：   a < x < b   。 过程 两个 操作 进一步 操作 。 python 支持 写法 ， 建议 写成   x   <   b   &&   x   >   a   会更 编程 语言 上的 通用性 。   相除 取商 余   正 整数 相除   x / / y   值 意义 很   商   。 带上 负号 感觉 怪了 ， 先 略过 。 相关   取余   数 ，   x% y   ， x 除以 y 余数 ， 带上 负号 情况 有变 ， 先 略过 。   复数   python 支持 复数 ， 复数 写法 类似   1 + 2j   形式 ， z 赋值 一个 复数 ， 一个 复数 类型 ， 类 两个 属性 量 ，   real     imag   。   z . real   给出 复数 实数 部 。 imag imaginary   number 缩写 ， 虚数 ， 想像 数 。   abs 函数   都 abs 函数 绝对值 函数 ， python 自带 ， 不 加载 模块 。 作用 复数 ：   数学 中 复数 绝对值 定义 ， 复数 模 ：   \\ ( \\ left |  z   \\ |  = \\ sqrt   {   a &# 94 ; {   2   } + b &# 94 ; {   2   }   } \\ )   round 函数   简单 理解 函数 数值 四 舍五 入的 功能 。   第二个 参数 接受 0 负数 没 意义 ， 取 1 大于 1 数吧 ， 保留 几位 小数 。   min ， max sum 函数   min ， max 函数 用法 sum 用法 稍微 差异 ， 简单 见 min ， max ， sum 都 接受 一个 元组 列表 ， 返回 元组 列表 最小 值 ， 最大值 相加 总和 。 min max 还 支持   min ( 1 , 2 , 3 )   形式 ， sum 不 支持 。   位 操作   python 支持 位 操作 ， 简单 说 ： 位 左移 操作   < <   ， 位 操作   &   ， 位或 操作  |  ， 位异 操作   &# 94 ;   。   math 模块       math   import   *   ， 符号   pi     e   引用 圆周率 自然 常数 。 math 模块 还 提供 很多 数学 函数 ， ：   sqrt   开 平方根 函数 ， sqrt ( x ) 。   sin   正弦 函数 ， 类似 cos ， tan ， sin ( x ) 。   degrees   弧度 转化 角度 ， 三角函数 默认 输入 弧度 值 。   radians   角度 转化 位 弧度 ， radians ( 30 ) 。   log   开 对数 ， log ( x , y ) ，   \\ ( \\ log _ y   x \\ )   ， y 默认 e 。   exp   指数函数 ， exp ( x ) 。   pow   扩展 内置 方法 ， 支持 float 。 pow ( x , y )   简单 写个 例子 ：   更 内容 请 参见   官方 文档   。   random 模块   random 模块 提供 函数 解决 随机数 。   random   random 函数 0 1 之间 随机 实数 （ 包括 0 ） 。   ​   random ( ) - > [ 0.0 ,   1.0 ) 。   uniform   uniform 函数 a b 之间 随机 实数 （ a ， b 值 指定 ， 包括 a 。 ） 。   ​   uniform ( a , b ) - > [ a.0 ,   b.0 ) 。   randint   randint 函数 a b 之间 随机 整数 ， 包含 a b 。   ​   randint ( a , b ) - > [ a , b ]   choice   choice 随机 一个 列表 字符串 中 取出 一个 元素 。   randrange   randrange 函数 a b 之间 随机 整数 ， 步长 c （ a ， b ， c 值 指定 ， 相当于 choice ( range ( a , b , c ) ) 。 整数 之间 就用 randint 函数 ， 函数 针对 range 函数 步长 生成 整数 序列 情况 。   sample ( p , k )   sample 函数 p 中 随机 选取 唯一 元素 （ p range ( n ) 集合 ， 唯一 不 放回 抽样 ， p 样品 重复 元素 ， 生成 列表 会有 重复 元素 。 ） k 长度 列表 返回 。   一个 简单 例子 ：   随机 实数 ， 包含 临界 值 数学 意义 大于 价值 ， 写 一个 类似 小 脚本 看 ， 随机 实数 是很 难 随机 数的 。   上 一个 例子 ， 不 随机 实数 概率 永远 ， 肯定 很小 很小 。 解决 ， 概率 随机 整数 好 。   更 内容 请 参见   官方 文档   。   statistics 模块   模块 python3.4 才 进来 。   例子 稍 作 修改 ， 使之 一个 骰子 模拟器 。   i _ list   列表 收集 实验 中掷 次 骰子 才 6 次数 。   statistics 模块 中的     函数 接受 一组 数值 列表 ， 返回 组 数值 平均值 。   median   函数 返回 统计学 上 中位数 ， 简单 看作 一组 数字 去掉 一个 最低 ， 剩下 来的 一个 两个 （ 两个 要取 平均值 ） 数值 值 。   更 内容 请 参见   官方 文档   。   序列   字符串 ， 列表 ， 元组 （ tuple ， 翻译 成元组 ， 内容 不 数值 。 ） 都是 序列 （ sequence ） 子类 ， 序列 性质 都 ， 讲 理解 记忆 。   len 函数   len 函数 返回 序列 所含 元素 个数 ：   调出 值   序列 来说 方括号 ， 加上 序号 （ 程序 界的 老规矩 ， 0 计数 。 ） ， 调出 位置 值 。 还 例子 。   倒着   倒着 计数 - 1 倒数 第一个 ， - 2 倒数 第二个 。 依次 类推 。   调出 多个 值   不 写 从头 ， 不 写 到达 尾部 。 加个 冒号 形式 。 python 区间 默认 含义 都是 包头 不 包 尾 。 想要 一个 元素 进去 ， 默认 不 写 形式 。   数学 半开 半闭 区间 定义 理解 包含 关系 很 便捷 。   数学 半开 半闭 区间 ， 左 元素 右 元素 都是 叙述 定位 点 。 左 元素 包含 右 元素 不 包含 。   方向 是从 左 到右 ， 定义 区间 是从 右到 左 ， 空值 。   区间 超过 ， 左 到右 包含 元素 ， 。   元素 定位 点 ， 空值 ， ：   string001 [ 2 : - 4 ]   ， 2 - 4 实际上 定位 同一个 元素 之上 。 额外 值得一提 列表 插入 操作   list001 [ a : b ] =   [ 1 ]   形式 ， a , b 是某 一个 定位 点 ， 相当于 a 定位 点 插入 目标 列表   ， 请 参看 列表 插入 操作 小节 。   序列 反转   python 最 令人 叹为观止 地方 ， 语言 列表 反转 编写 一个 函数 ， python 一种 令人感动 方法 。   range 函数 介绍 时 提及 序列 索引 range 函数 参数 设置 很 类似 ， 参考 理解 ， 序列 （ 列表 ， 字符串 ） 索引 参数   [ start : end : step ]   range 函数 参数 设置 ， 第一个 参数 起步 值 ， 第二个 参数 结束 值 ， 第三个 参数 步长 。 end 不 填 都 好 理解 ， 迭代 完 即可 ， step 负数 ， 起点 不 填 默认 - 1 。   range 函数 生成 迭代 器 对象 接受 索引 参数 语法 ， 看上去 怪异 ：   range 函数 切片 操作 返回 一个 range 对象 ， 修正 。 切片 操作 类的 方法 ， python slice 对象 。   序列 更改 性   字符串 不 更改 ， 组合 新的 字符串 ； 列表 更改 ； 元组 不 更改 。   序列 加法 减法   两个 字符串 相加 字符串 拼接 。 乘法 加法 重复 ， 一个 字符串 乘以 一个 数字 拼接 几次 。 列表 元组和 字符串 大致 情况 类似 。   字符串   python 语言 不 c 语言 ， 字符 字符串 是不 分的 ， 用单 引号 双引号 包 一个 字符串 。 单 引号 双引号 特别 区别 ， 字符串 有单 引号 ， 双引号 ， 单 引号 字符 而不 转义 ------ 转义 很多 编程 语言 \\ 符号 。 显示   '   输入   \\ '   。   三单 引号 三 双引号   在单 引号 双引号 情况 下 ，   \\ n   换行 。 还 三单 引号   \" '   三 双引号   \" \" \"   包围 横跨 多行 字符串 ， 换行 意义 换行 。   startswith 方法   startswith   测试 字符串 子 字符串   endswith   测试 字符串 子 字符串 结束   find 方法   字符串 find 方法 可用 查找 子 字符串 ， 找到 返回 - 1 ， 找到 返回 字符串 偏移 量 。 用法 ：   s . find ( ' d ' )   。   replace 方法   字符串 replace 方法 替换 操作 ， 接受 两个 参数 ： 第一个 参数 是待 匹配 子 字符串 ， 第二个 参数 是要 替换 样子 。   upper 方法   字符串 转换 成 大写 形式 。   类似 ：   lower   都 小写   capitalize   首 字母 大写 ， 都 小写 。   isdigit 方法   isdigit   测试 数字   isalpha   测试 字母   isalnum   测试 数字 字母   split 方法   字符串 split 方法 字符串 空格 逗号 分隔符 分割 而成 ， 分割 成子 字符串 列表 。 默认 空格 分隔符 。   splitline 方法   一个 字符串 行 分开 。 split 方法 接受   \\ n   参数 ， splitline 方法 不 接受 参数 ：   join 方法   字符串 join 方法 有用 ， 来说 接受 一个 迭代 器 参数 ， 最 常见 列表 。 列表 中的 多个 字符串 连接 ， 采用 一种 优雅 方式 ， 两个 字符串 之间 才 插入 字符 ， 正是 。 例子 所示 ：   strip 方法   rstrip 方法   字符串 右边 空格 都 删除 。 换行符 会被 删除 掉 。   lstrip 方法   类似 rstrip 方法 ， 字符串 左边 空格 都 删除 。 换行符 会被 删除 掉 。   format 方法   字符串 format 方法 字符串 内的 变量 替换 操作 ， 花 括号 不 带 数字 format 方法 替换 量 ， 带 数字 0 第一个 替换 量 ， 类推 。 还 名字 引用 。   转义 不 转义   \\ n   \\ t   常用 转义 字符 ， 换行 制表 。   \\ \\   输出 \\ 符号 。   输出 字符串 不想 转义 格式 ：   count 方法   统计 字符串 中 字符 连续 子 字符串 次数 。   r 方法   rfind   rindex   rjust   rsplit   ， 方法 会很 有用 ， 含义 理解 ：   find   index   ljust   split 。   想 看 ， 区别 是从 右往 左 。   列表   方括号 包含 几个 元素 列表 。   列表 插入 操作   字符串 数组 都不 更改 不 ， 列表 。 列表 还 一种 定位 元素 区间 方法 插入 操作 ， 理解 区间 违和 ， 定位 元素 区间 本来 概念 模糊 ， 看作 特例 ， 视作 插入 。   extend 方法 列表 之间 加法 重合 ，   list . extend ( [ 4 , 5 , 6 ] )   就和   list = list + [ 4 , 5 , 6 ]   ， 加法 还 自由 选择 覆盖 原 定义 ， 实际上 自由 。   insert 方法 列表 插入 操作 ：   append 方法   python append 方法 面加   一个 元素   ， append 一个 列表 一个 列表 整体 一个 元素 。 append 方法 会 永久 改变 列表 对象 值 。   记住 ， append 原处 修改 列表 方法 都是 返回 值的 。   希望 不 改动 原 列表 附加 ， 请 加法 操作 列表 。   reverse 方法   reverse 方法 不 接受 参数 ， 一个 列表 翻转 。 希望 不 改变 原 列表 翻转 ， 返回 值 ， 请   reversed   函数 ：   copy 方法   copy 方法 复制 返回 列表 。 其是 浅 复制 ， 引入 别处 变量 ， 新 复制 列表 元素 变量 指向 内存 值 。   sort 方法   排序 ， 改变 列表 。 默认 递增 排序 ，   reverse = True   来调 成 递减 排序 。   默认 递增 排序 顺序 数字 数字 越来越 大 ， 字符 （ ） ACSII 码 编号 递增 排序 。 列表 数字 字符 会报 错 。   sort 方法 很 一个 可选 参数   key = function   ， function 函数 定义 函数 （ lambda 语句 。 ） ， 函数 只 接受 一个 参数 ， 排序 方法 （ 迭代 列表 时 ） 接受 元素 。 给出 一段 代码 ， tostr 函数 接受 对象 返回 字符 ， 出错 。   sorted 函数   sorted 函数 列表 sort 方法 区别 返回 原处 修改 。 sorted 函数 第一个 参数 来说 迭代 对象 ， 也就是说 还 接受 列表 之外 等可 迭代 对象 。 用法 两个 差别 不 大 。   第二个 例子 调用   str . lower   函数 ， 接受 item ， 比如说 ' Andy ' ， 转化 andy ， 参与 排序 。 成了 英文 字母 大小写 不 敏感 排序 方式 。   字典 值 排序   类似 字典 值 排序 方法   4   ：   例子 先用 字典 items 方法 返回 ( key , ) 对的 迭代 对象 ， lambda 方法 返回 接受 item 值 ， 值来 排序 。   中文 排序   例子 演示 中文 名字 排序 。 函数 思路   pypinyin   （ 一个 第三方 模块 ） ， 中文 姓名 拼音 ， 一个 列表 ， 拼音 组合 列表 排序 ， 生成 目标 列表 。   reversed 函数   提到 序列 反转 做 :   推荐 做法 reversed 函数 来做 ， reversed 函数 返回 个可 迭代 对象 。   马上 想到 ， 列表   reverse   方法 ， 其是 破坏 型的 方法 ， 类似   sort   方法 ， 破坏 型的 ， 非 破坏 型 方法   sorted   。 特别 需求 时都 非 破坏 型 方法 ， reversed ， sorted 。   删除 元素   赋空 列表 值 ， 相当于 元素 都 删除 。   pop 方法 ： 接受 一个 参数 ， 列表 元素 定位 值 ， 元素 删除 ， 方法 返回 元素 值 。 不 接受 参数 默认 删除 一个 元素 。   remove 方法 ： 移除 第一个 元素 ， 返回 元素 ， 返回 错误 。   del 函数 ： 删除 列表 中的 元素 。   count 方法   统计 元素 次数 。   index 方法   index 方法 返回 元素 偏移 值 。   列表 解析   来看 例子 ：   map 函数 函数 列表 元素 中 生成 一个 map 对象 （ 迭代 对象 ） ， 外面 加上 list 函数 才能 生成 列表 形式 。 第二种 方式 更 python 风格 ， 推荐 列表 解析 方法 。   python 中 推荐 迭代 操作 上的 列表 解析 风格 ， python 中的 迭代 操作 c 语言 。   列表 解析 加上 过滤 条件   语句 一个 子句 过滤 条件 ， 看 例子 理解 ：   例子 列表 解析 ， 找到 元素 乘以 2 操作 ， 过滤 条件 字符 h 字母 开头 ， 表达式 不 真的 元素 都被 过滤 掉了 。   完整 列表 解析 结构   给出 一个 完整 列表 解析 结构 ， 最 常见 情况 一两个 语句 ， 外加 括号 是可 选项 。   逻辑 是从 左 到右 第一个 语句 最先 执行 语句 ， 第二个 语句 跟着 执行 。   iterable1 是指 迭代 对象 ， 也就是说 返回 迭代 对象 函数 map ， filter ， zip ， range 函数 都 放 进去 。 克制 写出 太 过于 晦涩 程序 。 循环 语句 嵌套 太 多了 ， 极 出错 。   程序 ：   列表 解析 好处   熟悉 列表 解析 语句 结构 ， 一两个 语句 不 太 情况 下 ， 很 简单 明了 。 语法 精炼 ， 运行 速度 循环 至少 快上 一倍 。 python 迭代 思想 骨髓 ， python 优化 工作 很多 都 围绕 迭代 展开 ， 多用 列表 解析 会让 代码 运行 更 快 。   多的 好处 ， 加上 cool pythonic 风格 ， 推荐 多用 列表 解析 风格 解决问题 。   元组的 生成   加个 括号 一个 元组 对象 。   语句 中 列表 可变 影响   情况 迭代 迭代 对象 迭代 对象 返回 一个 值 利用 值 赋值 操作 ， 列表 却是 一个 可变 东西 ， 列表 操作 中被 修改 ， 情况 会 ？   过程 细节 不 ， 是在 语句 记忆 原 列表 ， 记忆 返回 次数 偏移 值 。 实践 中 写出 类似 变动 迭代 循环 风格 ， 很 出 bug 。   列表 元素 替换   推荐 列表 解析 方法 列表 元素 替换 功能 。   列表 元素 去重   列表 元素 去重 推荐 set 集合 对象 ， 其会 自动 去除 重复 元素 。   元组   圆括号 包含 几个 元素 元组 ( tuple ) 。 元组和 列表 在于 元组 改变 。 元组 是从 序列 对象 ， 元组的 很多 方法 都讲 。 元组 上和 列表 极其 接近 ， 很多 内容 略过 。   值得一提的是 输入 写的   x , y   形式 ， 实际上 表达式 加上 括号 ， 一个 元组   ( x , y )   。   生成 器 表达式   类似 列表 解析 ， 元组 解析 返回 元组 ？ ， 谈到 python 中 表达式 圆括号 忽略 了的 ， 元组 解析 式有 个更 名字 生成 器 表达式 ， 返回 生成 器 对象 ， 生成 器 函数 调用 返回 对象 。 生成 器 对象   __ __   方法 ， 调用 函数 。   字典   列表 字典 可变 ， 列表 引用 原处 修改 ， del 语句 。   并非 对象 都 做 字典 key ， python 中 内置 变 对象 都是 散 列的 ， 可变 对象 都是 散列的 。 散 列的 才 做 字典 key 。 散 列的 对象 ：     __ hash __   方法 ， 大小     __ eq __   方法 ， 判断 。   值得一提 元组 做 字典 key 。 说 元组 大小 ：   元组和 列表 大小   元组和 列表 判断 很 好 理解 ， 东西 :   确实 古怪 。 请 读者 参考   网页   ) ， 官方 文档 ：   Tuples     lists     compared   lexicographically     comparison       elements .   This   means       compare   equal ,     element     compare   equal         sequences             type           length .   官方 文档 大于 小于 情况 说 得很 ， 字里行间 大体 领会 精神 :   迭代 对象 大小 ， 逐个 。   迭代 对象 测试 返回 True False 。   逐个 ， 则跳 元素 ， 两个 不 元素 ， 返回 两个 元素 。   快 完 （ 最小 迭代 对象 长度 为准 ） ， 判断 操作 ， 长度 ； 大小 判断 操作 ， 长度 更 长的 对象 更 大 。   例子 :   创建 字典   字典 一种 映射 ， 左 右的 顺序 ， 简单 地将 键 映射 到值 。 字典 声明 格式 ：   创建 一个 空 字典 ， 赋值 创建 键 ：   列表 创建 字典   [ [ ' a ' , 1 ] , [ ' b ' , 2 ] , [ ' c ' , 3 ] ] 形式 ， dict 函数 字典 ， [ ' a ' , ' b ' , ' c ' ] [ 1 , 2 , 3 ] 形式 zip 函数 ， dict 函数 字典 ：   字典 字典   列表 在于 字典 索引 方式 \" 键 \" 来的 。   字典 遍历 操作   字典 特定 顺序 遍历 操作 通用 做法 字典 keys 方法 收集 键的 列表 ， 列表 sort 方法 语句 遍历 ， 所示 ：   警告   ： 例子 python 早期 版本 不 ， 保险 见 ， 推荐 sorted 函数 ， sorted 函数 默认 字典 键 排序 返回 键的 值 列表 。   字典 遍历 顺序 ， 简单 ：   keys 方法   收集 键值 ， 返回 。   values 方法   keys 方法 类似 ， 收集 值 ， 返回 。   items 方法   keys values 方法 类似 ， 返回 ( key , ) 对的 。   ， python2 三个 方法 返回 列表 ， python3 返回 迭代 对象 更 节省 计算 资源 些 。   字典 语句   语句 只 针对 字典 键 ， 不 针对 字典 值 。   字典 对象 方法   方法 是去 找 键的 值 ， 不 引用 ， 方法 好处 键不 出错 。   update 方法   感觉 字典 一个 小型 数据库 ， update 方法 一个 字典 键和 值 覆盖 进 字典 中 去 ， 称之为 更新 ， 加上 ， 覆盖 。   pop 方法   pop 方法 类似 列表 pop 方法 ， 引用 键 ， 偏移 地址 ， 不 多说 。   字典 解析   字典 解析 方式 很 好 理解 。   zip 函数 创建 字典   利用 zip 函数 两个 迭代 对象 平行 合成 一个 配对 元素 迭代 对象 ， dict 函数 字典 对象 。   集合   python 数学 上的 无序 不 重复 元素 集合 概念 ， 讨论 列表 去 重元素 提到 正好 利用 集合 特性 。   集合 解析 形式 set 命令 迭代 对象 都 集合 类型 。 希望 列表 list 命令 强制 类型 转换 列表 类型 即可 ， 中 确实 元素 不 重复 特性 ， 集 合作 数据 操作 类型 。   集合 迭代 对象 。 迭代 对象 列表 解析 操作 就不啰嗦了 。 介绍 集合 操作 。   集合 添加 元素   值得一提的是 想 创建 一个 空的 集合 ， set 命令 ， 用花 括号 系统 会 创建 是空 字典   。 集合   add   方法 添加 ， 重复 元素 添加 不 进来 。   警告   ： 值得一提的是 集合 只能 包括 变 类型 ， 列表 字典 集合 内部 元素 。 元组 变 ， 加 进去 。   update 方法 更新 多个 元素 ：   集合 去掉 元素   两个 集合 对象 方法 用于 去掉 集合 中的 元素 ， discard 方法 remove 方法 ， discard 方法 删除 集合 中 元素 都 发生 ， remove 方法 删除 不 元素 会 KeyError 。   remove 方法 与之 类似 就不 做 演示 。   两个 集合 之间 关系   子集 判断   集合 对象 一个 issubset 方法 用于 判断 集合 集合 子集 。   简便 方式 两个 集合 之间 关系 ， > ， < ， > = ， < = ， = = 判断 都是 。 set001 set002 子集 ， 元素 set002 都 包含 ，   set001 < = set002   ， 真 子集 概念   set001 < set002   即不 等于 即可 。   两个 集合 之间 操作   例子 演示 两个 集合 之间 交集 ：   &   ， 并集 ：  |  ， 差集 ：   -   。   类似 集合 对象 intersection 方法 ， union 方法 ， difference 方法 ：   clear 方法   一个 集合 清空 。   copy 方法   类似 列表 copy 方法 ， 制作 一个 集合 copy 备份 赋值 变量 。   pop 方法   无序 弹出 集合 中的 一个 元素 ， 返回 KeyError 错误 。   bytes 类型   编码 知识   存储 计算机 都 二进制 流 ， 要将 正确 解析 字符 ， 建立 编码 规则 。 熟悉 ASC Ⅱ 编码 规则 。 ACS Ⅱ 编码 Latin - 1 utf - 8 编码 子集 ， 一连串 基于 ACS Ⅱ 编码 字符串 utf - 8 编码 正确 解析 。   python2 中 支持   bytes   类型   。 python2 一个   unicode   类型 。   bytes 简单 理解 字符 含义 二进制 字节 流 。   b ' test '   ， 加个 字符 b B ， 其将 解析 bytes 类型 。   python 打印 时会 尽可能 打印 字符 ， x 打印 显示 出了 test 字符 ， x 一连串 数字 序列 而不 字符串 含义 ， 调用 bytes 类型   decode   方法 ， bytes 类型 解码 str 类型 。   编码 方式 正确 ， 正确 解析 原 bytes 字节 流那 回事 。 还 big5 GB 编码 。   字符串 str 类型 有个   encode   方法 编码 操作 输出 编码 bytes 字节 流 。   方法   看 str 类型 bytes 类型 方法 差异 :   bytes str 拥有 功能 ， 大部分 学到 用于 str 字符串 类型 方法 用于 bytes 类型 中 。 方法 泛滥 ， bytes 字节 流 类型 ， 内在 字符 含义 ， 方法 不 推荐 。   upper 方法 replace 方法 :   字节 流的 连接 很 加法 join 方法 ， 所示 :       ， python2 加法 join 方法 都将 丢掉 b 修饰 符 :   无关紧要 ， python2 理解 str python3 bytes 类型 ， unicode python3 str 类型 。   bytearray 类型   bytearray bytes 类型 类似 ， 内部 支持 方法 操作 bytes 类型 类似 ， 更 像是 一个 列表 ， 原处 修改 字符串 bytes 变的 。 python2 bytearray 类型 ， 内在 文本 二进制 是不 分的 。   文件   文件 对象 是可 迭代 对象 。   写 文件   文件 操作   open   函数 创建 一个 文件 对象 ， 简单 理解 接口 搭接 好 。 文件 对象   write   方法 文件 写 操作 ， 调用   close   方法 写的 内容 才 真的 写 进去 。   C 语言 文件 操作 ， 会为 python 语言 简单 便捷 赞叹不已 。 三句 话 ： 创建 一个 文件 对象 ， 调用 文件 对象 wirte 方法 写入 内容 ， close 方法 关闭 文件 即可 。   读 文件   用法   open   函数 创建 一个 文件 对象 ，   read   方法 调用 文件 内容 。 记得   close   关闭 文件 。     readline   方法 一行 一行 读取 文件 内容 。   open 函数 模式   open 函数 模式 ：   ' r '   默认 值 ， read ， 读 文件 。   ' w '   wirte ， 写 文件 ， 文件 不 会 创建 文件 ， 文件 已 ， 文件 原 内容 会 清空 。   ' a '   append ， 附加 内容 ， write 方法 内容 会 附加 原 文件 。   ' b '   模式 设置 选项 ， ' b ' 单独 ， 要和 三个 模式 组合 ， ' rb ' ， 二进制 数据 格式 读 。   ' + '   模式 设置 选项 ， ' + ' 单独 ， 要和 三个 模式 组合 ， ' r + ' ， + updating 更新 ， 读也 写 ， ' r + ' ， ' w + ' ， ' a + ' 区别 ？ 区别 ' r + ' 不 文件 创建 功能 ， 文件 不 会报 错 ， ' r + ' 清空 文件 ， ' r + ' 不 清空 文件 write 方法 情况 会 ； ' w + ' 文件 创建 功能 ， ' w + ' write 方法 内容 都是 ； ' a + ' write 方法 内容 附加 原 文件 上的 ， ' a + ' 文件 创建 功能 。   语句 打开 文件   类似 例子 语句 打开 文件 ， 不用 close 方法 关闭 文件 。 语句 提供 类似 语句 功能 自动 应对 打开 文件 时的 异常 情况 。   函数   函数 一个 对象 ， 函数 对象 。 函数 名和 变量 名 都是 引用 ， 函数 名 带 括号 才 执行 。 不 带 括号 返回 函数 对象 引用 地址 。   理解 函数 一个 对象 ， 例子 中 ， fun 刚 一个 函数 列表 ， 迭代 语句 里 ， multiply 函数 对象 ， 接下来 函数 对象 。 过程 是对 x * a 再 加上 b 。   \\ ( a * x   + b \\ )   定义 函数   定义 函数 def 命令 ， 语句 结构 ：   参数传递   函数 参数 值是 赋值 形式 传递 ， 有助于 理解 不定 变量 函数 。 函数 参数 名是 意义 ， lambda 函 式来 理解 ， def 定义 有名 函数 ， 引用 地址 ， 内部 作用 原理 lambda 无名 函式 ， 形式 参数 名是 x y 都 无所谓 。 ， 给出 一个 古怪 例子 ：   输出 5 。 函数 形式 参数 y 外面 y 一个 东西 ， 参数 传递 赋值 形式 ， ？ 解释 函数 形式 参数 y 函数 内部   本地 变量   y ， 外面 y 不 ， 理解 请看 下 一节 （ 变量 作用 域 ） 。   ：   语句 迭代 赋值 操作 ， 语句 刚 定义 x 外面 x 一个 东西 ， 刚 定义 x 语句 内部   本地 变量   。   想到 想起 编写 removeduplicate 函数 一个 ， 语句 针对 列表 可变 迭代 对象 工作 原理 ？ 请看 例子 ：   迭代 对象 惰性 求值 内部 机制 很 神奇 ， 还 不 太 ， 例子 列表 惰性 求值 记忆 内部 数值 ， 记忆 （ 合情合理 ） ， 迭代 StopIteration 异常 终止 。   变量 作用 域   python 变量 作用 域和 大部分 语言 c 语言 lisp 语言 概念 都 类似 ， 函数 局部变量 ， 一层 套 一层 ， 引用 外面 ， 外面 不 引用 。   机制 函数 都有 命名 空间 ， （ 模块 类似 ） 好像 一个 盒子 封装 内部 变量 。 本地 变量 函数 ， 类似 语句 ； 全局 变量 模块 ， 更 确切 表述 是和 文件 ， 比如说 文件 里 ， 导入 模块 变量 名 ， 实际上 模块 导入 变量 名都 引入 文件 来了 。   类的 继承 类似 一种 搜索 机制 ， 先 搜索 本地 作用 域 ， 是上 一层 ( def ， lambda ， ) 本地 作用 域 ， 全局 作用 域 ， 内置 作用 域 。 直观 图所 示 ：   简单 来说 python 变量 作用 域 ： 盒子 套 盒子 ， 搜索 是从 盒子 最 外面 寻找 ， 外面 变量 ， 外面 不 。   内置 作用 域   内置 作用 域 一个   __ builtin __   模块 ， python 作用 机制 会 自动 搜索 内置 模块 变量 。 内置 模块 学习 函数 名 ， print ， range ， 内置 异常 名 。   想到 python 内置 函数 覆盖 定义 ， 事实 确实 ：   学习 单元 测试 会 接触 mock 概念 ， 作用 机制 大体 与之 类似 覆盖 掉 定义 对象 。   global 命令   希望 函数 定义 变量 全局 变量 ， 变量 声明 加上   global   命令 即可 。   不 建议 做 ， 做 ， 写 两行 代码 才能 ， 不 推荐 做 。   就算 做 ， 变量 只能 py 文件 中被 引用 ， 文件 不了 。 推荐 做法 写 一个 用于 配置 参数 config . py 文件 ， 全局 变量 都 放在 ， 文件 要用 ， import 进来 。 而对 config . py 文件 修改 会 影响 py 文件 配置 ， 全局 变量 可管 可控 通用 ， 才是 正确 编程 方式 。   nonlocal 命令   nonlocal 命令 python3 才 ， 概念 类似 lisp 语言 闭包 ( closure 技术 ) ， ， 函数 记忆 一点 状态 ， 不想 状态 信息 全局 变量 ， 不 希望 类的 方式 ， nonlocal 命令 简单 。   global 意味着 命名 只 一个 嵌套 模块 中 ， nonlocal 查找 只 限于 嵌套 def 中 。 理解 nonlocal 理解 函数 嵌套 函数 情况 ------ 工厂 函数 ， 一个 函数 返回 一个 函数 对象 。 比如说   return   action 返回 一个 函数 对象 ， add1 接口   def   action   。 熟悉 lisp 语言 明白 ， action 外面 函数 变量 自由 变量 ， 嵌套 函数 引用 自由 变量 。 声明   nonlocal   x   ， 修改 嵌套 函数 外面 声明 变量 。   生产 函数 运行 上的 状态 性 ， 实际上 类也 构建 出 类似 效果 ， 闭包 方式 显得 更 适合 。   给出 一个 稍微 点的 例子 ：   给出 类似 类的 方法 ：   编码 思路 上 基本上 没什么 差异 ， 说稍 作 修改 换成 类的 版本 。 推荐 类的 方法 。 用类 不伦不类 大材小用 。 就不 做 进一步 讨论 ， 闭包 思想 函数 编程 中很 一个 思想 ， 学习 。   参数 默认 参数   定义 函数 圆括号 接受 参数 ， 参数 个等 号 ， 来个 赋值 语句 ， 赋的 值 参数 默认 值 。 随便 写个 演示 程序 ：   不定 参量 函数   谈到 sum 函数 只 接受 一个 列表 ， 而不 支持 形式 ： sum ( 1 , 2 , 3 , 4 , 5 ) 。 设计 一个 接受 不定 任意 数目 参量 函数 。 一种 奇怪 赋值 方式 。   序列 解包 赋值   NOTICE :   python2 不 支持 小节 讨论 序列 解包 赋值 。 python2 函数 定义 中是 支持   * args   写法 。   带上 一个 星号 * 变量 变得 类似 通配符 味道 ， 针对 序列 （ 数组 ， 列表 ， 字符串 ） ， 都 会将 元素 收集 一个 列表 ， 说是 。   语句 支持 序列 解包 赋值 ， 是将 通配 到的 元素 收集 到了 一个 列表 ， ：   函数 中的 通配符   类似 序列 解包 赋值 中的 带 星号 表通 配的 概念 ， 定义 函数 写上 一个 带 星号 参量 （ 想象 函数 传递 参数 一个 类似 序列 解包 赋值 过程 ） ， 函数 定义 ， args 接受 到的 参量   元组   。   mysum 函数   定义 接受 任意 参数 mysum 函数 ， 如上 示 。 过程 接受 到的 args （ 已成 一个 元组 ） ， sum 函数 即可 。   任意 数目 选 参数   函数 定义 写上 带上 两个 星号 变量 * * args ， args 函数 接受 到的 选 参数 一个 字典 值 。   利用 构建 出 一个 简单 词典 对象 生成 器 。   解包 迭代 对象 传递 参数   * args 是在 函数 定义 中 ， 通配 参数 放入 元组 中 。 是在 函数 调用 中 ， 针对 迭代 对象 ， 一个 * 星号 包含 元素 迭代 ， 参数 一一对应 赋值 。   最 简单 打印 文件 命令   说到 文件 一个 迭代 对象 ， 解包 文件 对象 将是 一个 最 简单 打印 文件 命令 ， 简单 惊天地 泣鬼神 ...   解包 字典 关键字 参数   类似 ， * * args 语法 字典 对象 解包 函数 关键字 参数 。 函数 f 例子 ：   例子 告诉 可选 参数 a b 字典 形式 复制 。   参数 顺序   老实 说 参数 ， 可选 参数 （ 关键字 参数 ） ， 任意 （ 通配 ） 参数 ， 任意 （ 通配 ） 关键字 参数 概念 混 人 困惑 。 顺序 ：   参数 ，   ， 位置 一一对应 分配 参数 。   关键字 参数 ， 匹配 关键字 参数 。   通配 参数 ， 额外 非 关键字 参数 分配 * args 元组 。   通配 关键字 参数 ， 额外 关键字 参数 分配 * * kwargs 字典 ，   。   所示 ：   写法 python2 python3 兼容 。 python3 新 一个 keyword - 参数 （ 读者 记住 关键字 参数 行了 ） ， 所示 ：   一点 ， python2 东西 ， python2 python3 兼容性 不用 太 关注 东西 。 看 例子 ， keyword - 参数 个极 keyword 参数 常说 关键字 参数 混淆 东西 ， keyword - 参数 确实 类似 关键字 参数 ， 常规 关键字 参数 位置 赋值 ， 指定 名字 赋值 。   keyword - 参数 标志 星号 。 所示 ， 别把 z 是个 参数 ， 一个 还 赋予 默认 值的 keyword - 参数 。   人就 只 想用 keyword - 参数 ， 通配 参数 不 感兴趣 ， 会 写 ：   写 通配 参数 ， 函数 最 只能 接受 4 个不 指定 名字 参数 ， x ， y 两个 ， c d 两个 关键字 参数 匹配 两个 。   keyword - 参数 用处   keyword - 参数 用处 其是 一个 不 指定 名字 赋值 关键字 参数 ， 或者说 关键字 参数 中 给出 名字 ， keyword - 参数 。   一点 ， python2 不 支持 东西 ， python2 类似 效果   * * kwargs   写上 很多 行 代码 才行 ， 所示 ：   异常 信息 随便 写的 ， 重点 。   生成 器 函数   函数 定义 return 语句 ， yield 语句 ， 构建 出 一个 生成 器 函数 ，   生成 器 函数 返回 生成 器 对象 （ generator   object ） ， yield 形式 定义 生成 器 函数 返回 一个 生成 器 对象 range 对象 类似 ， 都是 描述性 迭代 对象 ， 元素 不 展开 ， 请求 运算 ， 编程 风格 内存 压力 很小 ， 适合 迭代 元素 特别 多的 情况 。   test 函数 简单 理解   2x + 1   ，   0 < = x < n   （ 赋的 值 ） 。   给出 一个 ： 描述 素数 生成 器 函数 。   网上 流行 素数 检验 函数 ， 效率 高的 。   给出 两种 形式 素数 生成 器 函数 ， prime2 （ ） 。 prime ( n ) 是到 几个 素数 。 生成 器 函数 一种 惰性 求值 运算 ， yield 迭代 函数 运算 （ yield ） ， 机制 好 神奇 。   加载 函数 做 检验 ：   递归 函式   递归 函式 某种 程度 上 取代 循环 迭代 程序 结构 ， 不 推荐 做 。 谈及 递归 函 式是 归结 数学 函数 ， 递归 算法 直观 （ 不 高效 ） 。 菲 波 奇 函数 ：   ， 数学 来说 ， 递归 算法 表述 简洁 易懂 。 内部 细节 ， 定义 fib 称之为 函式 ， 函 式是 一种 操作 模式 ， 操作 复制 出 函式 （ 函数 操作 都是 数据 ） ， 函 式来 扩展 生成 函数 操作 。   看 递归 函 式来 写阶 函数 ， 简洁 ， 最美 方法 。   递归 ？   最 推荐 递归 情况 情况 ， 一份 工作 （ 函数 ） 执行 一遍 感觉 工作 做 完 ， 做 一小 ， 有了 进展 ， 好比 蚂蚁 吞 大象 ， 递归 思想 。 一种 情况 表面 上看 进展 ， 事情 发展 ， 感受 到有 一个 条件 最终 将会 终止 程序 一个 输出 ， 递归 。   递归 思想 最 核心 两个 概念 一做 一小 工作 ， 感觉 到做 着做 事情 会做 完 ； 二有 一个 终止 判断 最终 会起 作用 。   递归 函 式也 类似 迭代 结构 ， 递归 函式 不 滥用 。 递归 函式 生成 一种 执行 操作 n 次的 结构 ：   ， print 语句 换成 操作 ， 机器人 向前 走 一步 ， dosomething 换个 名字 向前 走 ( 5 ) 成了 向前 走 5 步了 。   lisp car - cdr 递归 技术   lisp 语言 中 ，   car - cdr 递归 技术 是很 一门 技术 ， 特长 遍历 随意 嵌套 列表 结构 列表 中的 一个 元素 执行 某种 操作 。   来看 例子 ， 一个 任意 嵌套 列表 元素 放入 一个 列表 中的 函数 ：   函数 逻辑 最小 元素 对象 列表 ， 收集 进 列表 ； ， 展开 ， 调用 原 函数 展开 函式 。   例子 意义 上 来讲 还 不算 lisp 经典 car - cdr 递归 技术 ， 给出 一个 典型 例子 ， 复制 任意 嵌套 结构 列表 。 列表 copy 方法 做 工作 ， 例子 进一步 car - cdr 技术 。   嵌套 列表 复制 修改 操作 ， 最 合适 lisp car - cdr 技术 ， 不得不 承认 ， 递归 写法 递归 函式 最 难懂 。   ， 基础 之上 ， 第一个   语句 中 传递 lst 实际上 是非 列表 元素 ， 修改 操作 ， 原 列表 嵌套 基础 上 ， 等于 遍历 列表 中的 元素 某种 操作 。   元素 都 平方 ：   想像 功能 函数 作用 列表 中 元素 不 原 列表 嵌套 结构 ， lisp car - cdr 技术 ， 嵌套 结构 ？ 也许 。 。   lambda 函式   python 中的 函数 一个 对象   def   语句 定义 ， 定义 函数 对象 函数 名 变量 绑定 。 实际上 python 中的 函数 一个 对象 名字 ：   lambda   λ 表达式 简单 理解 名字 函数 对象 ：   如上 示 ， def 定义 函数 lambda 函 式在 python 都是 函数 对象 ， 或者说 都 function   class 。 调用 很 类似 ， lambda 函数 定义 函数 对象   __ __   默认   < lambda >   。   lambda 函数 地方 会 用到 ， 是在 函数 参数传递 情况 下 ， 简短 函数 动作 没 再 想个 函数 名字 场景 。   print 函数   print 函数 接受 任意 参量 ， 逐个 打印 。 关键字 参数 ：   sep   ： 默认 值是   '   '   ， 一个 空格 ， 修改 为空 字符串 ， 逐个 打印 字符 之间 间隔 。   end   ： 默认 值是   ' \\ n '   ， print 函数 执行 完 打印 字符 ， 默认 打印 一个 换行符 。   file   默认 值是   sys . stdout   ， 终端 显示 ， 修改 文件 变量 ， 文件 输出 内容 。   逻辑   布尔 值   boolean 类型 ， 语言 ， 两个 值 ：   True   ，   False   。 强制 类型 转换 函数   bool   。   逻辑 小 知识   python 中 ， 逻辑 真假 上的 小 知识 ， 简单 下 。   数 0 、 空 对象 对象 None 值都 是假   非零的 数字 或非 空的 对象 都 是真   两条 bool 函数 强制 类型 转换   测试 会 递归 作用 数据结构 中   测试 会 返回 True False   两条 在说 东西 ， 读者 请 参看 元组和 列表 大小 小节 。   None   函数 return 值就 会 返回 None 值 ， None 值是 NoneType 对象 中的 一个 值 ， 列表 空值 等是 ， 它和 值都 不 。 . search 找到 匹配 就会 返回 None 值 。 None 值在 逻辑 上是 逻辑 假 ，   None 逻辑 真 。   条件 判断   python 中的 条件 语句 格式 ：   命令 条件 判断 语句 ， 记住 加个 冒号 ， 缩进 区块 都是 条件 判断 真的 执行 语句 。   逻辑 条件 判断 ， 真 ，   something001 ； 假 ，   something002 。   看 明白 ， elif 。   逻辑 与或 否   逻辑 ， 逻辑 ， 逻辑 否 。   编写 一个 逻辑 ， 判断 一个 字符串 ， 字符串 开头 a b ， 结尾 s ， 倒数 第二个 字符 是单 引号 ' 。 演示 逻辑 。 。   稍 条件 判断   ， elif 语句 ， 还 逻辑 或非 组合 判断 。 编程 中 条件 逻辑 ？   逻辑 语句 \" 或非 \" 组合 组合 ， 过分 嵌套 。 代码 所示 ， 一个 情况 分成 两 ， 就用 ... ... 语句 ，   一个 情况 分成 三 ， 就用 ... elif ... 语句 。 深度 平行 语句 \" \" 逻辑 ， 或者说 类似 编程 语言 switch 语句 。   再看 看 代码 ， 代码   错误   ， 两个 语句 不 逻辑 分析 关系 。   代码 ， 例子 演示 是在 加深 一个 深度 条件 判断 语句 处于 逻辑 判断 情况 ， 语句 条件 判断 逻辑 是本 语句 判断 逻辑 再和 左边 （ ） 判断 逻辑 \" \" 逻辑 ， 或者说 成是 \" 交集 \" 。 比如说   print ( ' 0 < x < 2 ' )   语句 语句 判断 逻辑   x < 2   和上 一层 判断 逻辑   x > 0   \" 交集 \" ，   0 < x < 2   。   过程 情况 图所 示 ：   编程 处于 何种 判断 逻辑 之下 一个 清晰 ， 建议 读者 好好 思考 。 毕竟 磨刀 不 误 砍柴 功 。   语句 捕捉 错误   语句 编程 中 用来 错误 不 打算 应付 错误 最 通用 方式 。 一个 变量 预先 想的 接受 一个 数值 ， 用户 却 输入 一个 字符 ， 段 语句 包围 ； 编程 发现 情况 ， 懒得 理会 ， 简单 这块 出错 语句 包围 ， 语句 ， 打印 出 一个 信息 \" 出错 \" ， 即可 。 用法 所示 ：   异常 完整 语句   语句 逻辑 是试 执行 区块 下的 语句 ， 异常 ， 看 异常 yourError ， 是则 执行   ， yourError2 ， 执行   something2   ...... ， 异常 ， 执行 字句 :     somethingN ， 异常 ， 异常 将会 返回 （ 更 控制 程序 ） 。   finally 语句 作用 ， finally 语句 实际上 语句 中 异常 判断 情况 关系 ， 有没有 异常 发生 ， 都将 执行 。 简单 地不 缩进 写在 语句 ， finally 语句 就算 程序 发生 异常 ， 会先 执行 ， 异常 上 传给 控制 程序 。   语句 finally 语句 是可 选的 ， 具体情况 来看 。   放 语句 情况   语句 放上 语句 还 细讲 。   语句 相关 逻辑 说 过了 ， 语句 执行 。 第一个 情况 ， 字句 return ， 函数 是会 跳出 语句 ， 执行 成功 会被 跳出 。 错误 捕捉 ， 错误 捕捉 再 放入 一个 raise 语句 ， 再抛 出 一个 错误 ， 语句 会被 中止 。 抛 出 异常 。 字句 ， 逻辑 错误 ， 将会 执行 字句 ， ， 语句 break 命令 ， 则会 跳出 语句 。   情况 稍微 ， 接触 到的 两种 :   一个 mongodb 调用 函数 装饰 器 。 其在 试图 调用 mongodb ， 发生 AutoReconnect 异常 ， 将会 sleep 一秒 再 去   调用 函数 。 成功 ， return ， 自然 跳出 语句 。   第二个 例子 较为 常用 ， 重复 做 件事 会 发生 错误 ， 捕捉 错误 ， 执行 。 捕捉 计了 数 。   还 想到 一种 程序 结构 ， 语句 逻辑 分支 。 试着 做 件事 ， ， 执行 字句 break ， 发生 异常 执行 异常 中的 字句 ， 内容 不 执行 。 反 常规 ， 生活 ， 确实 逻辑 ， 假想 ， 发生 错误 不行 执行 字句 ， 假想 内容 不 执行 。   语句   语句 迭代 对象 都 做出 元素 包含 对象 之中 判断 。   例子 ， 列表 判断 元素 预料 ， 字典 说的 语句 ， 不 判断 值 。   迭代 语句   内部 重复 操作 程序 先 迭代 结构 ， 实在 不行 才 循环 结构 ， 毕竟 简单 更 美 更 。   python 迭代 语句 类似 lisp 语言 dolist dotimes 函数 ， 例子 ：   跟的   序列   类型 ， 字符串 ， 列表 ， 数组 都是 。 语句 看作 先 执行 x = ' a ' 类似 匹配 赋值 操作 ， 执行 缩进 区块 ， 依次 类推 。   分句   语句 加上 分句 形式 ， 迭代 完 会 执行 分句 。 语句 还 迭代 过程 中 ， break return ， 分句 执行 。   range 函数   range 函数 常和 迭代 语句 ， 返回 一个 迭代 对象 。   range 函数 用法 上 ， 1 10 ， 步长 2 ， list 函数 包裹 ， 将会 输出 [ 1 , 3 , 5 , 7 , 9 ] 。 不 步长 。 range ( 10 ) 看作 [ 0 , 10 ) ， range ( 1 , 10 ) 看作 [ 1 , 10 ) 。 再 加上 步长 概念 区间 概念 有所不同 。   例子 还 演示 range 负数 概念 ， 区间 概念 考察 ， 理解 ， 行得通 ， 是因为 步长 负数 ， 负数 ， 情况 会和 讨论 类似 ， 将是 一个 空值 。   迭代 加上 操作   迭代 信息流 操作 生成 目标 序列 。   enumerate 函数   enumerate 函数 返回 一个 enumerate 对象 ， 对象 偏移 值和 元素 组合 ， 一个 迭代 对象 。   循环   语句 用法 编程 语言 类似 ， 条件 控制 ， 循环 结构 。   值得一提的是 语句 语句 一个 整体 ， 情况 下 执行 完 执行 语句 不 加上 控制 。 语句 一个 功用 循环 break 语句 执行 跳 ， 见 。   break 命令   break 跳出 循环 结构 。 谈到 语句 一个 整体 ， break 跳 语句 。   continue 命令   continue 命令 接下来 循环 结构 执行 区块 不 执行 ， 跳 条件 判断 循环 。 ， 循环 。 语句 中 continue 命令 。   pass 命令   pass 命令 都不 做 。 pass 命令 即可 用于 循环 语句 用于 条件 语句 。   pass 命令 都不 做 意义 ， 一个 空 占位 符 很 有用 。 编写 一个 大型 GUI 程序 ， 信号 － 槽 机制 都 构思 好了 ， 函数 暂时 还 没 写 好 ， 函数 ， 空的 函数 名 加上 pass 语句 写上 ， 程序 编写 调试 。   脚注   chmod 加上 执行 权限 执行 。 第一行 完整 解释   env   程序 搜索 python 路径 ， 代码 更具 可移植性 。 还 多说 一点 ， 会谈 virtualenv 模块 ， 类似 引用 python 写法 确保 调用 python 虚拟 环境 下的 python 解释器 。   ↩   语句 用来 测试 对象 同一性 ， 内存 里的 同一个 东西 ， 不仅仅 是值 。 = = 确保 值 。   ↩   int 、 float 命令 都是 强制 类型 转换 命令   ↩   参考 网站   ↩",
            "tags":"python_language",
            "url":"articles/python-basic.html"
        },
        {
            "title":"python语言学习教程三模块篇",
            "text":"引入 模块   import 语句   import 语句 方法 已有 接触 ，   import   math   ， math 模块 函数 类等 带 点的 变量 名 结构 ： math . pi 。   import 语句 一个 常见 缩写 名 技巧 ， import   numpy     np ， 写了 ，   np . array ， numpy . array 。   语句   语句 两种 情况 ：   第一种 形式 点名 只 导入 变量 ， 第二种 形式 是都 导入 进来 。 想 读者 肯定 ， 第二种 导入 形式 小心 变量 名 覆盖 ， 心里有数 即可 。   reload 函数   reload 函数 载入 模块 ， reload 函数 优点 不 启动 程序 ， 动态 重载 模块 。 reload 只能 用于 python 编写 模块 ， python3 中 ， reload 函数 移到 imp 模块 去了 ， import   imp 才能 。 比如说 ：   time 模块   time 模块 提供 时间 相关 函数 ， 底层 ， 函数 平台 不 。 类似 模块 datetime 模块 ， datetime 是以 类的 框架 解决 时间 。 简单 调用 时间 ， time 模块 ， 时间 相关 ， 推荐 datetime 模块 。   time 函数   time 函数 返回 一个 数值 ， 数值 1970 年 1 月 1 号 0 时 0 分 0 秒到 时间 过了 秒 。   gmtime 函数   函数 接受 一个 参数 ， 参数 秒 ， 返回 一个 特定 格式 时间 数组   struct _ time   。 不 接受 参数 ， 默认 接受 秒数 time 函数 返回 ， 是从 特定 时间 过了 秒 ， 特定 格式 时间 数组 时间 。   localtime 函数   类似   localtime   函数 ， gmtime 用法 返回 一模一样 ， 唯一 区别 返回 当地 时间 。   ctime 函数   gmtime 类似 ， 返回 字符串 格式 时间 。 ctime 默认 设置 时间 localtime 函数 来的 。   strftime 函数   接受 特定 格式 时间 数组   struct _ time   参数 ， 返回 字符串 格式 时间 。 例子 请 参看 例子 。   最 常用 格式 符 ：   % X   输出 09 : 27 : 19 格式 ， 小时 分 秒 一个 % X 即可 。   ， ： % I 小时 ， [ 0 - 12 ] 形式 ； % y 年 ， [ 00 - 99 ] 格式 ， 2014 年就 输出 14 ； % p ， 本地 AM PM 文字 。 。   sleep 函数   sleep 函数 用到 ， 程序 休眠 几秒 。 接受 一个 数值 参数 ， 单位 是秒 ， 零点 几秒 。 sleep 函数 大概 休眠 几秒 ， 不 去 用来 计时 ， 不 大 精确 。   更 内容 请 参见   官方 文档   。   sys 模块   sys 模块 功能 很 常用 ， 。   sys . argv   刚 python 执行 脚本 参数传递 时就 讲了 sys . argv 变量 。 一个 字符串 列表 。   新建 一个 test . py 文件 ， 执行 ：   sys . argv [ 0 ] 脚本 文件名 ， 依次 参数 。   exit 函数   编写 GUI 程序 ， 脚本 程序 中也 很 常用 。 不 带 参数 退出 程序 ， 还 带 一个 字符串 参数 ， 返回 错误 提示 信息 ， 带 一个 数字 ， 详细 讨论 略过 。   sys . platform   返回 脚本 执行 操作系统 环境 。   Linux   返回 字符串 值 ： linux ； Windows 返回 win32 ； Mac   OS   X   返回 darwin 。   sys . path   一连串 字符串 列表 ， python 脚本 模块 搜索 路径 ， 定义 python 模块 ， 只 sys . path 列表 上新 加 一个 字符串 路径 即可 。   标准 输入 输出 错误 输出 文件   sys . stdin ， sys . stdout ， sys . stderr 三个 文件 对象 linux 系统 标准 输入 标准 输出 错误 输出 文件 流 对象 。   sys . version   sys . version 输出 python 版本 信息 编译 环境 详细 信息 。   sys . version _ info [ 0 ]   返回 python 主 版本 标识 ， python3 返回 数字 3 。   sys . maxsize   返回 计算 环境 下 整数 ( int ) 类型 最大值 ， 32 位 系统   \\ ( 2 * * 31 - 1 \\ )   。   sys . stdin . isatty ( )   测试 输入 流 终端 。 终端 ， 返回 True 。   更 内容 请 参见   官方 文档   。   subprocess 模块   想 都 到了 计算机 都是 多任务 ， 多任务 机制 多个 进程 运行 ， 计算机 一个 CPU （ 多核 越来越 普及 。 ） 计算机 只能 一个 进程 ， 进程 类似 人脑 （ 不 排除 极 现象 ） ， 看 电影 写 作业 ， 写 一会 作业 再看 一会 电影 （ 不 推荐 做 ） ， 计算机 进程 机制 类似 ， 一会 干 进程 ， 一会儿 做 进程 。   计算机 一个 进程 还 分为 很多 个线程 ， 较为 ， 不 谈了 。 编写 一个 脚本 程序 ， 系统 会给 分配 一个 进程 号 ， cpu 就会 转过 头来 执行 （ 计算机 进程 之间 切换 很快 ， 才会给 一种 多任务 错觉 。 ） 脚本 程序 还 再 开出 子 进程 ，   python subprocess 模块 负责 这方面 工作 。   call 函数   shell = True 选项 后 用法 简单 直观 ， 网上 提及 安全性 兼容性 ， 推荐 不 shell = True 选项 。   不 shell = True 选项 ，   $ HOME   系统 变量 正确 翻译 ， 实在 home 路径 ， os . path expanduser 函数 。   getoutput 函数   取出 进程 命令 输出 ， 返回 字符串 形式 。   getstatusoutput 函数   进程 执行 状态 。   Popen 类   Popen 类 创建 一个 进程 管理 实例 ， 进程 沟通 ， 暂停 ， 关闭 操作 。 函数 基于 Popen 类的 ， 较高级 课题 ， 暂时 略过 。   更 内容 请 参见   官方 文档   。   shutil 模块   相当于 os 模块 补充 ， shutil 模块 进一步 提供 系统 级别 文件 文件夹 复制 ， 删除 ， 操作 。   复制 文件     copyfile   src dst 两个 参量 都是 完整 文件 路径 名 ， 第一个 参量 是待 复制 文件 ， 第二个 参量 复制 后的 文件名 ；   copy   函数 第一个 参量 是待 复制 文件 ， 第二个 参量 目标 文件夹 路径 ；   copy2   函数 copy 函数 类似 ， 尝试 保留 文件 元 信息 metadata （ 模块 开头 理论 上 不尽然 ） 。   复制 文件夹   copytree   函数 第一个 参量 是待 复制 文件夹 路径 名 ， 第二个 参量 目标 文件夹 路径 名 ， 其将 创建 不 。   删除 目录   rmtree   函数 用于 删除 文件夹 ， path 目标 文件夹 路径 名 。   文件夹   move   函数 一个 文件 一个 文件夹 一个 文件夹 内 。   chown 函数   chown   函数 类似 linux 系统 下的 chown 函数 ， 函数 基于 os . chown 函数 ， 接口 更 友好 。   函数     函数 类似 linux 系统 下的 函数 。   更 shutil 模块 内容 请 参见   官方 文档   。   os 模块   getcwd 函数   终端 运行 python 运行 python 脚本 ， 总 一个 变量 存储 工作 目录 位置 。 getcwd 命令 查看 工作 目录 。   LaTeX 文件 运行 python 小 脚本 ， python 命令 运行 脚本 ， 调用 python 命令 地方 工作 目录 。 加载 模块 py 文件 运行 时的 工作 目录 主 py 文件 脚本 当前目录 ， 都是 运行 python 命令 地方 。   终端 调用 python 终端 工作 目录 所在 ， pwd 命令 查看 。 所示 ：   mkdir 函数   新建 一个 文件夹 。   chdir 函数   os 模块 里有 一个 chdir 函数 更改 工作 目录 所在地 。     .     ..   语法 ， 简单 \\ \" test \\ \" 调转 test 文件夹 。   删除 文件   os . remove ( path )   支持 路径 表达 。 路径 目录 会抛 出 一个 OSError 异常 。   os . rename   第一个 参数 目标 文件 目录 ， 第二个 参数 是要 替换 名字 。 命令 重 命名 文件 ， 文件 。   支持 路径 语法 表达 ， rename windows 下不 替换 原 文件 ， repalce 替换 文件 。   os . repalce   rename windows 下不 替换 原 文件 ， repalce 替换 文件 。   支持 路径 语法 表达 。   删除 空 目录   os . rmdir ( path )   支持 路径 语法 表达 ， 只能 删除 空 目录 。 删除 目录 ， 请 shutil . rmtree ( path ) 。   listdir 命令   相当于 简单 ls 命令 ， 返回 一个 字符串 列表 ， 其内 包含 path 下 文件 文件夹 名 （ 包括 链接 文件 ） 。   介绍 os . path 模块 isfile 函数 新建 一个 函数 listdir _ file ， listdir _ dir listdir _ link ， 文件 ， 目录 链接 文件 区分 开来 。   遍历 目录 树   一个 生成 器 对象 ， 数值 含义 ： （ dirpath ,   dirnames ,   filenames ） ， dirpath filenames 合并 出本 目录 下 文件 文件名 路径 ， dirpath dirnames 合并 出本 目录 下 目录 路径 名 。   os . walk 函数 写了 一个   gen _ file   函数 ， 其是 一个 生成 器 函数 ， 会 遍历 目录 树 ， 返回 目录 下的 文件 信息 。 代码 所示 :   函数 管理 目录 下 （ 正则表达式 过滤 ） 感兴趣 文件 ， 都刷 。 操作 ， 查找 。   environ 函数   os . environ ， 返回 一个 字典 值 ， 字典 值 存储 shell 变量 值 。 系统 中 \" HOME \" 路径 名是 ：   getpid 函数   os . getpid 函数 ， 返回 运行 进程 pid 。   stat 函数   返回 文件 信息 。 st _ size 文件 大小 ， 单位 字节 。   st _ size 属性   例子 文件 大小 输出 单位 优化 :   python 小 脚本 自动 输出 合适 单位 ， 程序 逻辑 很 简单 。   st _ mtime 属性   文件 修改 时间 。   st _ ctime 属性   文件 创建 时间 ， windows 下是 最初 文件 创建 时间 ， unix 下是 文件 metadata 改变 时间 。   进程 发送 信号   os 模块 kill 函数 来给 进程 发送 信号 。   函数 第一个 参数 进程 pid ， 第二个 参数 发送 信号 。 :   暂停 进程 ，   进程 。   killpg   函数 进程 包括 其子 进程 发送 信号 ， 参考   网页   。     SIGINT   （ 终止 进程 信号 ）   SIGKILL   （ 强制 终止 进程 信号 ） ， 更 信号 请 参看 unix 信号 块 ，   wiki 页面   。   更 os 模块 内容 请 参见   官方 文档   。   os . path 模块   提到 sys . argv 只能 返回 python 脚本 文件名 ， python 脚本 系统 中的 位置 。 os . getcwd 等也 python 脚本 所在 目录 ， os . path 模块 一个 优点 跨平台 特性 支持 很 好 ， 方式 path 路径 都 会用 模块 函数 辅助 。   来看 例子 ：     __ file __   脚本 文件 所在 路径 。   abspath 函数   abspath 函数 接受 一个 path 路径 值 返回 一个 正规 普 适的 路径 地址 。 效果 类似 执行 :   normpath ( join ( os . getcwd ( ) ,   path ) )   。   再看 例子 演示 空 字符串 默认 工作 目录 ， 接受 路径 。   abspath 接收 是空 字符串 ， 定位 脚本 工作 目录 ， 引用 模块   os . path . abspath ( ' ' )   ， 脚本 工作 目录 。 os . path . abspath ( \\ \" . \\ \" ) 返回 脚本 工作 目录 。   dirname 函数   dirname 函数 接受 一个 路径 值 返回 路径 除开 一个 元素 路径 值 。 例子 ， 路径 指向 文件 ， dirname 函数 返回 除开 文件名 路径 ； 接受 路径 指向 目录 ， 返回 除开 一个 文件夹 名的 路径 值 。   basename 函数   例子 所示 ， basename 函数 接受 一个 路径 值 返回 路径 一个 元素 ， 路径 指向 文件 ， 返回 文件名 ； 路径 指向 目录 ， 返回 目录 文件夹 名 。 路径 提取 出 文件名 功能 。   split 函数   路径 path 字符串 分割 ， 视作 dirname basename 组合 。   splitext 函数   路径 path 后缀 分开 ， 针对 文件名 输入 ， 第一个 为该 文件 名字 ， 输出 数组 第二个 值是 文件 后缀 。 函数 提取 文件名 后缀 名字 很 有用 ， 组合 出新 文件名 。   join 函数   用于 连接 多个 路径 值 合并 成 一个 新的 路径 值 ， 简单 字符串 拼接 ， 函数 路径 组合 操作系统 普适 性和 灵活性 。   join 函数 多个 参数 生成 新 path windows 下又 输出 。   expanduser 函数   ~   符号 ， 展开 为以 / home / wanze 基础 路径 ， 兼容 大部分 系统 （ windows 下也 。 ）   join 函数 接受 很多 不 定量 参数 ， 组合 一个 新的 路径 ， 不用 费心   /     \\   ， 不 写 ， join 函数 自然 料理 好 。   exists 函数   os . path . exists ( path ) ： 测试 路径 文件 。 返回 True ， 返回 False 。   isfile isdir islink   os . path . isfile ( path ) ： 接受 一个 字符串 路径 变量 ， 文件 返回 True ， 返回 False （ 文件 不 文件 文件夹 情况 都会 返回 False ） 。   类似 isdir islink 函数 。   samefile 函数   os . path . samefile ( path1 , path2 )   两个 文件 路径 返回 True ， 返回 False 。   getmtime 函数   os . path . getmtime ( path )   返回 文件 修改 时间 ， 返回 值是 秒 ， 可用 time 模块 ctime localtime 函数 转换 成   time . struct _ time   对象 ， strftime 更好 格式 输出 。   getctime 函数   类似 getmtime ， 返回 文件 创建 时间 。 unix 系统 中是 指 文件 元 信息 更改 时间 。   更 内容 请 参见   官方 文档   。   shelve 模块   shelve 模块 基于 pickle 模块 ， pickle 模块 支持 对象 才 支持 。 提及 pickle 模块 只能 针对 一个 对象 ， 多个 对象 ， shelve 模块 ， shelve 模块 好像 自动 对象 字典 形式 包装 。 shelve 模块 简便 。   存入 多个 对象   过程 代码 变得 简洁 ， 一个个 对象 是以 字典 形式 存入 进去 。   读取 对象   读取 对象 代码 很 简洁 ， shelve 模块 open 函数 打开 数据库 文件 ， open 函数 会 自动 返回 一个 字典 对象 ， 字典 对象 数据 存入 键值和 对象 。   例子 发现 ， 定义 类 ， 提取 放入 一个 文件 ， shelve 模块 读取 文件 是不 再 引入 定义 。 一点 值得 ， shelve 模块 内部 采用 pickle 机制 ， 猜测 pickle 例子 类的 定义 写在 写入 文件 代码 ， 载入 数据库 ； 类的 定义 放入 一个 文件 ， 类以 模块 说 模块 载入 形式 引入 ， 读取 对象 一种 更 优雅 形式 。 所示 ：   简单 程序 原型 程序 数据库 ， shelve 模块 很 好用 够用 。   更 内容 请 参见   官方 文档   。   pickle 模块   pickle 模块 对象 永久 存入 文件 中 ， 再 导入 文件 ， 自动 对象 导入 进来 。   对象 存入 文件   从文件 中 取出 对象   值得一提的是 从文件 中 取出 对象 ， 类的 定义 ， 声明 内存 中的 ， 会 出错 。   pickle 模块 dump 函数 对象 存入 文件 中 ， 文件 load 函数 加载 ， 对象 会 自动 返回 。   更 内容 请 参见   官方 文档   。   pathlib 模块   python3.4 ， python3 内置 pathlib 模块 。 python 版本 ， pip 安装 pathlib ， 差 不了 太 多了 。 讨论 参考 python3.4 pathlib 模块 官方 文档 ， 为准 。   模块 对系统 路径 灵活 操作 ， python 取代 bash 系统 运维的 ， 文件名 ， 路径 等的 操作 ， pathlib 简化 一块 工作量 。 来看 一个 例子 ：   Path 接受 路径 语法 ， \\ \" . \\ \" \\ \" .. \\ \" 都是 可用 。 Path 对象 方法 glob iterdir 方法 ， glob 类似 linux glob 命令 ； iterdir 遍历 当前目录 。 遍历 返回 一个 迭代 对象 （ 读者 看 ， 一个 生成 器 对象 ） ， 展开 一个 Path 对象 。 Path 对象   _ file   方法   _ dir   方法 判断 Path 对象 文件夹 文件 路径 。   Path 对象 很多 便捷 方法 ， 很 好用 ， ：   iterdir   ，   exists   ，   _ file   ，   _ dir   ，   parents   ，   cwd   。 更 信息 请 参看 官方 文档 。   marshal 模块 python 变量 二进制 形式 读写 入 文件 中 ， jieba 分词 词典 缓存 做的 。   官方 文档 推荐 确实 类似 简单 存储 需求 ， 推荐 pickle shelve 模块 ， 说 ， 模块 简单 下吧 。   支持 对象 类型 ：   The     types     supported :   booleans ,   integers ,   floating   point   numbers ,   complex   numbers ,   strings ,   bytes ,   bytearrays ,   tuples ,   lists ,   sets ,   frozensets ,   dictionaries   简单 ：   load 方法 加载 目标 文件 对象 ， 返回 值是 送入 对象 。   dump 方法 是把 想要 送 进去 对象 ， 送入 文件 中 去 。   logging 模块   软件 开发 中 ， 两个 东西 最 易被 初学者 忽视 ， 实际上 却是 最 有用 工具 :   一个 单元 测试 ； 一个 日志 输出 管理 。 python 官方 内置 模块 logging 更好 管理 日志 汇报 系统 。 一个 日志 汇报 系统 程序员 调试 debug ， 用户 专业 人员 汇报 发生 错误 信息 ， 还 理解 程序 运行 的和 运行 到了 ， 在干 些 ， 都是 有用 。   logging   简单 函数 调试 print 函数 输出 信息 ， 编程 早期 有用 。 后续 调试 编程 都 推荐 单元 测试 方法 。 而在 大型 软件 项目 中 ， print 函数 则是 更 少 ， 程序员 希望 用户 信息 才能 print 函数 （ io 重 定向 print 函数 不 讨论 之内 ） 。   程序员 想要 大型 软件 内部 运作 ， 丑陋 做法 print ， 注释 掉 。 不 ， 程序员 做的 工作 都能 保存 拿到 台 面上 ， 毕竟 都 劳动 。 logging 模块 第一个 用途 :     logging . info ( )   函数 ， 输出 信息 ， 信息 调低 logging 等级 （ 默认   WARNING   ） ， 才会 显示 。 低于   WARNING   等级 一个 函数   logging . debug ( )   。 info 函数 信息 程序员 用来 确认 程序 预期 运行 ， debug 函数 信息 bug ， 程序员 希望 有助于 debug 输出 信息 。   logging . warn ( )   函数 用来 发出 警告 信息 ， 程序员 修改 程序 信息 ；   logging . warning   函数 用来 发出 警告 信息 ， 情况 程序员 预料 之中 ， 用户 不 做 ， 程序 不 修改 ， 信息 记录 。   特别 错误 异常 捕捉 ， python   ...   ...   语句 ， raise 抛 出 异常 ， 不必 多说 。 情况 ， 程序员 不 愿抛 出 异常 ， 希望 压抑 错误 ， logging 模块   error ( )   函数   exception ( )   函数   critical ( )   函数 。   函数 等级 :   最 简单 一个 例子 所示 :   basicConfig 函数 日志 系统 配置 。 设置 日志 报告 等级   level = logging . DEBUG   ， 将会   DEBUG     DEBUG   等级 日志 信息 ； 设置   logging . INFO   ， 则就 只   INFO     INFO   等级 信息 。   日志 信息 输出 文件   更 专业 做法 是将 日志 输出 文件 中 去 ， 调试 ， 大型 软件 项目 来说 ， 日志 信息 很多 ， 保存 文件 ， 编辑器 shell 工具 工具 查看 会更 便捷 。 要将 日志 信息 都 输出 文件 中很 简单 ，   basicConfig   设置   filename   参数 即可 :   默认   filemode     \\ \" a \\ \"   ， 日志 信息 累积 。 运行 几次 小 py 脚本 ， 效果 。   filemode   设置   \\ \" w \\ \"   ， 则只 保存 那次 运行 日志 信息 。   logging 模块 中级 教程   logging 模块 中级 几个 词汇 ： loggers ,   handlers ,   filters ,     formatters 。   loggers   记录器   运行 logging . info ， 调用 默认 记录器 ， 会 针对 python 模块 文件 创建 一个 记录器 。     __ __   一种 简便 命名 方法 ， 勤快 某种 情况 下有 手工 记录器 取个 名字 。     getLogger   函数 指定 名字 定义 （ 是指 第三方 模块 下定义 ） ，   getLogger   指定 目标 名字 就会 记录器 。 DIY 第三方 模块 日志 记录器 有用 。   记录器 挂载 卸载 处理器 对象 过滤器 对象 ：   logger . addHandler ( )   logger . removeHandler ( )   logger . addFilter ( )   logger . removeFilter ( )   记录器   setLevel ( )   方法 设置 最小 记录 级别 ， Handler 级别 协作 关系 。   记录器 propagate 参数 值得 详细 说下 ， 记录器 名字 定义 ，   __ __   python 自带 模块 结构 语法 ， 上层 下层 关系 ， 比如说   main . test   记录器   main   记录器 。 讨论   propagate   参数 ， 默认 True ， 发送   main . test   记录器 信息 会 传递 上层   main   记录器 。 设置 False 往上 传递 。   handlers   处理器   负责 分发 日志 信息 目标 地去 。 介绍 几个 Handler 类 ：   StreamHandler   信息 流的 形式 输出 ， 指 输出 终端   FileHandler   信息 写入 文件 中 去   RotatingFileHandler   信息 写入 文件 ， 文件 大小 超过 值 ， 新建 一个 文件 写 。   TimeRotatingFileHandler   信息 写入 文件 ， 隔 一段 时间 ， 比如说 ， 就会 自动 再 新建 一个 文件 再 写 。   处理器 对象   setLevel   方法 ， 提及 ， 记录器   setLevel   协作 关系 ， 更 详细 描述 ， 信息 先 记录器 并分 发给 处理器 对象 ， 再 处理器 再 分发 目的地 。   处理器 挂载   格式 器   对象   过滤器   对象 。   handler . setFormatter ( )   handler . addFilter ( )   handler . removeFilter ( )   filters   过滤器   formatters   格式 器   ， 信息 格式 定义 。   format 涉及 到的 参数 设置 所示 :   字典 统一 配置   django setting . py 会有 配置 ， 含义 很 ， 定义 处理器 ， 格式 器 ， 记录器 。   json 模块   json   json 全称 JavaScript   Object   Notation ， JavaScript 对象 表示法 。 json 一种 基于 文本 ， 人类 易读 数据 存储 交互 格式 。 json 文件 保存 后缀   . json   。 json 是从 javascript 语言 衍生 ， 数据 存储 交互 独立 语言 。 json xml 数据 存储 交互 方案 相比 有更 易读 读写 速度 更 快的 。   json 存储 格式 语法   json 存储 格式 语法 很 简单 ， 是最 数字 ， 支持 两种 数字 类型 ， 整数 型和 浮点 型 ， python int float ； 字符串 双引号 ， python 字符串 概念 ； 布尔 值 true false ， python True False ， 一个 null python None ； json 数据   [ ]   ， 元素 逗号 分隔 ， 正是 python 列表 概念 ； json object 对象   { }   包围 ， 其内 key : 形式 ， 其正 python 字典 概念 。   python 语言 内置 json 模块 ， 读写 json 文件 只 简单   import   json   即可 。   小试 牛 刀 ，   [ 1 , 2 , 3 , 4 , 5 ]   组 数存 (   dump   ) 进 test . json 文件 去 。   json 不 支持 元组 ( tuple ) 字节 ( bytes ) 类型 ， bytes 类型 去 惊扰 ， tuple 元组 存储 ， 转换 成 列表 即可 。   简单 读取 json   load   函数 ， 所示 ：   lst2 就被 赋值   [ 1 , 2 , 3 , 4 , 5 ]   ， 运算 。   存储 字典 值   例子 稍 作 修改 存储 字典 值了 ：   存储 文件 美化   dump 函数 句 读者   indent   选项 ：   test . json 文件 数据 会 缩进 ， 会 更好 看 。     sort _ keys   选项 会很 有用 ， 默认 False ， 设置 True ， 输出 文件 key 排序 了的   。     ensure _ ascii   选项 默认 True ， 中文 字符 保存 会 变为   \\ uabcd   东西 ， 设置 False ， 则能 显示 中文 字符 。   dumps loads 函数   dumps loads 函数 是非 文件 接口 版 ， 简单 下 即可 。   itertools 模块   repeat 函数   定义 函数 ：   返回 一个 迭代 对象 ， 封装 一个 用处 用于 填充 map 函数 zip 函数 常 数值 。 填写 repeat ( 5 ) 一个 返回 一个 迭代 对象 ， 不停 返回 数字 5 而不 长度 。   starmap 函数   starmap 函数 定义 所示 ：   接受 一个 迭代 对象 ， 逐个 迭代 对象 中的 元素 解包 送入 函数 参数 （ 函数 执行 ） 。   inspect 模块   更 信息 请 参看   官方 文档   。   getfile 函数   传入 python   object ， 返回 定义 object 是在 文件 中的 。 获取 文件 系统 路径 地址 :   值得一提的是 ， 模块 安装 系统 ， 文件 地址 类似 形式 :   getcallargs 函数   所示 :   相当于 模拟 执行 func 函数 ， 返回 执行 func 函数 时其 接受 参数 字典 值 （ 包括 必 填 参数 选 参数 ） 。   functools 模块   partial 类   functools 模块 定义 一个 partial 类 ， 输入 参数 所示 :   其将 返回 一个 partial 对象 ，   __ call __   方法 ， 类似 函数 调用 。   func   属性 ， 未来 函数 调用 ；   args   属性 ， 未来 函数 参数 ；   keywords   属性 ， 未来 函数 选 参数 。   简单 来说 partial 原 函数 对象 func 封装 （ 特别 适合 做 装饰 器 ） ，   newfun = partial ( func , args , keywords )   ， 调用 newfun 对象 好像 调用 原 func ， 加上 额外 参数 ， args 非可 选 参数 类似 列表 append 形式 ， keywords 可选 参数 说 关键字 参数 类似 字典 update 形式 。   一个 简单 演示 例子 :   输出 :   逻辑 执行 fun1 ， fun partial 封装 成 p1 ， 新增 参数 字符串 ' p1   a ' b = 4 ， p1 参数 都加 进去 。 执行 p1 参数 变化 。   datetime 模块   简单 日期 时间 操作 time 模块 函数 即可 ， datetime 模块 是用 类的 方式 ， 适合 日期 时间 。 值得一提的是 mongodb python 接口   pymongo   （ 连接 mongodb python 第三方 模块 ） ， 日期 时间 输入 输出 都是 datetime   对象 ， 很 。   简要 介绍 ， 更 内容 请 参看   官方 文档   。   timedelta 对象   timedelta 函数 返回 一个 timedelta 对象 ， 一个 时间 间隔 对象 。 函数 参数 情况 所示 :   必 填 参数 ， 简单 控制 第一个 整数 天的 间隔 :   两个 时间 间隔 对象 之间 相加 相 减 ， 返回 仍 一个 时间 间隔 对象 。 而更 一个 datetime 对象 减去 一个 时间 间隔 对象 ， 返回 减去 datetime 对象 ， 两个 datetime 对象 相减 返回 一个 时间 间隔 对象 。 很 。   datetime 对象   datetime 函数 创建 一个 datetime 对象 :   year ， month day 是必 填 参数 。 一个 简单 例子 :   pymongo 存入 mongodb 形式 :   utcnow 方法   datetime 对象       utcnow   两个   类 方法   （ classmethod ） 返回 日期 时间 datetime 对象 。 utcnow 不 接受 参数 ， 方法 接受 一个 tz 指定 时区的 参数 ，   pytz   模块 （ 一个 时 区 推荐 第三方 模块 ） 指明 时 区 。   查看 pytz 时 区   参看   网页   。   方法 指定 一个 时 区   参看   网页   。   方法 utcnow 方法 区别   看 例子 :   方法 指定 默认 时 区是 \\ \" UTC \\ \" ， 返回 datetime 对象 utcnow 返回 datetime 对象 基本上 没什么 区别 ， 微秒 （   \\ ( 10 &# 94 ; { - 6 } \\ )   秒 ） 区别 理解 。 再看 方法 不 加 参数 会 :   显示 时间 本地 时间 ， 默认 时 区是 本地 时区 参数 。 谈到 明白 ， 后台 数据库 日期 时间 输入 需求 ， 时间 戳的 一致性 ， 推荐 都 utcnow 方法 生成 时间 戳 ， 实际上 都以 UTC 格林威治 时 区 为准 。 前端 显示 用户 日期 时间 ， 引用 前端 数据库 日期 时间 ， 才 引入 时区的 转换 。 前端 python 生成 实时 时间 ， 就用 方法 再 引入 pytz 时区 控制 。   datetime 对象 属性   含义 所示 :   year   年   month   月   day   日   hour   时   minute   分     秒   microsecond   微秒   strftime 方法   datetime 对象 调用   strftime   方法   __ format __   方法 一个 好看 想要 日期 时间 字符串 格式 :   格式 符号 python 官方 文档 述及 ， 而更 实际上 是和 linux 系统 下的   date   命令 格式 符 ， 读者   date     来看 ， 信息 :     % F     % T   python 官方 文档 中 无 ， 内部 API 是和   date   命令 。   支持 时间 间隔 运算   提到 一个 datetime 对象 减去 一个 timedelta 对象 返回 一个 datetime 对象 ， 一个 datetime 对象 减去 一个 datetime 对象 返回 一个 时间 间隔 对象 。 一年 时间 表达   datetime . datetime . utcnow ( )   -   datetime . timedelta ( 365 )   。 爱因斯坦 生日 时间 间隔 表达 :   利用 时间 间隔 操作 判断 。   struct _ time   对象 转化   datetime   对象   参看   网页   mktime 函数 接受 time 模块   struct _ time   object ， 来自 time 模块   gmtime   、   localtime   、   strptime   函数 ， mktime 函数 返回 一个 时间 戳 ， datetime 模块   fromtimestamp   函数 接受 时间 戳 。   总的 过程 :   datetime   对象 转化   time _ struct   对象   参考   网页   模块   模块 提供 python 正则表达式 支持 ， 字符串 操作 ， 介绍 字符串 类型 方法 （ split ， replace ） ， 解决问题 就用 ， 更 快更 简单 。 实在 动用 正则表达式 理念 才 模块 ， 克制 写 很多 很 （ 情况 ） 正则表达式 冲动 ， 正则表达式 引入 将会 程序 都 难懂 不可捉摸 。   更 内容 请 参见   官方 文档   。   模块 中的 元 字符集   .   一行 内的 任意 字符 ， . compile 指定   . DOTALL   ， 多行 内的 任意 字符 ， 包括 换行符 。 还 字符串 模板 加上   ( s )   效果 。   *   字符 匹配 。   +   字符 匹配 。     字符 匹配 。   { m }   字符 匹配 ( ) m 次 。   { m , n }   字符 匹配 m 次到 n 次 ， n 次 省略 ， 视作 默认 值是 无穷大 。   &# 94 ;   字符串 ， 加上   . MULTILINE   选项 ， 行首 。 字符串 模板 加上   ( m )   效果 。   $   字符串 结束 ，   &# 94 ;   类似 ， 加上   . MULTILINE   选项 ， 行尾 ， 简单 理解   \\ n   换行符 。 字符串 模板 加上   ( m )   效果 。   $   符号 . 函数 中 替换 一个 字符串 ， 效果 原 字符串 尾 加上 字符串 ， 类似   &# 94 ;   替换 成 字符串 ， 效果 原 字符串 头 加上 字符串 。   &# 94 ;     $   字符串 中都 真实 字符 ， 标记 ， 替换 总 人 怪怪的 感觉 。   [ ]   [ abc ] 字符 组 匹配 一个 字符 ， 字符 a b c 。 类似 [ a - z ] 匹配 小写 字母 ，   [ \\ w ]   匹配 任意 字母 数字 ， 请看 特殊字符 类 。  |  相当于 正则表达式 内的 匹配 逻辑 。   ( )   圆括号 包围 将会 记忆 ， 调用 。 谈及 。   模块 中的 特殊字符 类     &# 94 ;   方括号 [ ] ， 最 ， 才 排除 型 字符 组的 。   转义   正则表达式 转义 会 纠结 。 一个 简单 原则 谈及 作用 字符 转义 ， python 中的 字符 都 写成   r ' '   形式 ， raw   string 形式 ，   \\ n   写成   \\ n   ，   \\ section   简单 写为   \\ \\ section   即可 ，   \\   字符 转义 。   字符 组的 方括号 内 [ ] 字符 是不 转义 ， 实在 不 转义 ， 正则表达式 工具 测试 。   模块   compile 方法 生成 regular   expression   object 一条 线 略过 ， 接下来 讨论 基于 （ 原始 ） 字符串 模板 。   字符串 模板 提及   ( m )     ( s )   用法 ，   * * ( i ) * *   忽略 大小写 。   匹配 查找   search ， match 方法 简单 用法 ：   将会 返回 一个 match   object ， match   object 逻辑 上 真值 。 match 字符串 匹配 精确 匹配 ， 正则表达式 0 突兀 。 推荐 search 方法 ， 限定 行首 ， 字符串 讨论 正则表达式 符号 表达 。 请看 例子 。   说道 圆括号 将会 记忆 ， 匹配 ， 默认 正则表达式 匹配 group 中的 0 元素 ， 左 到右 ， 子 group 编号 依次 1 ， 2 ， 3 ...... 。   信息 情况 ， 最 简单 情况 判断 真值 ， 字符串 模板 匹配 到了 即可 。   分割 操作   模块 split 函数 看作 字符串 split 方法 升级 版本 ， 描述 正则表达式 ， 匹配 成功 都将 一个 分隔符 ， 原 输入 字符串 分割 开来 。   请 参看 例子 理解 其做 工作 。   替换 操作   基于 正则表达式 替换 操作 有用 ， search 方法 ， 再 加上 匹配 字符串 索引 值 ， 修改 原 字符串 ， 再 search 循环 操作 ， 一个 替换 操作 。 模块 方法 解决 。   非 最长 匹配   小节 参考   python   cookbook     2.7   小节 ， 比如说 ：   匹配 两个 双引号 之间 内容 ， 默认 最长 匹配 ， 多个 双引号 句子 都会 匹配 进去 ， 最 短 匹配 ：   非 捕获 组   看 正则表达式 ，   ( : ... )   括号 组 是非 捕获 组 ，   . group   去 。   默认   .   匹配 换行符 号的 ， 引入 换行符 则要 上所 示 加上 。   argparse 模块   简要 介绍 python3 官方 文档 argparse 模块 用法 ， 用于 快速 制作 一个 刷 参数 python 脚本 。   看 简单 情况 :   简单 一个 例子 ， 脚本 还 不 接受 参数 ， 只   - h       查看 信息 ， 所示 。   新建 一个 parser ， ArgumentParser usage 是可 选 参数 ， 命令 行的 描述 信息 。 调用 parser   parse _ args   方法 ， 命令 行 接受 参数 刷 进去 。   简单 添加 一个 参数   例子 太 简单 ， 简单 添加 一个 参数 。   命令 行的 信息 示了 :   输入 则有 :     parse _ args   方法 返回 Namespace 对象 ， 推荐   vars   函数 来将 字典 值 ， 会 更好 地方 便 。   代码 稍 作 修改 ， 长 名字 可选 参数 还 加上 短 名字 可选 参数 支持 ，   parse _ args   方法   vars   返回 字典 值 。 字典 key 默认 是长 名字 可选 参数 。 还 设置 目标 参数 名 :   添加 参数 选项 设置   演示 设置 目标 参数 脚本 中 变量 名 :   字典 输入 :   默认 设置 长 名字 可选 参数 ， 没 折腾 。 类似 还   add _ argument   方法 添加 选 参数 ，   add _ argument   选项 配置 :   required = True   参数 输入 值 ， 报错     描述 信息 ， 。   default   参数 默认 值 ， 默认 None ， 选择 设置 成 一个 值 。   type   目标 参数 数据 类型 ， 默认 字符串 ， 设置 int float 。 设置 格式 ， 字符串 那种 设置 形式 :   ​   parser . add _ argument ( ' delay ' , type = int )   必 填 参数 添加 所示 ， \\ \" target \\ \" 名字     之外 ， 选 参数 用法 大致 类似 ， 刷入 args 字典 key \\ \" target \\ \" 名字 。   必 填 参数 选 参数 细节 上 差异 ， 会 提及 。   nargs 选项 设置   nargs 设置 参数 脚本 中 变量 将是 一个 列表 。 nargs 设置 一个 数字 ，   nargs = 4   ， 脚本 参数 接受 4 输入 值 ， 收集 进 一个 列表 。   :   nargs = ' * '   是对 选 参数 设置 ， 作用 于必 填 参数 ， 必 填 参数 意义 。 其将 收集 任意 多的 输入 参数 值 ， 多个 可选 参数 之间 星号 ， 请 参看 官方 文档 。   nargs = ' + '   作用 于必 填 参数 ， 意义 类似 正则表达式 ' + ' 号 ， ' * ' 号比 一个 输入 值 ， 报错 。   nargs = ' '   ' ' 号 情况 挺 ， 不 太 喜欢 ， 其和 nargs 设置 显得 格格不入 。 变量 值 列表 单个 值 ！ 改变 默认 值的 。 参数 不 输入 ，   foo   东西 不 输入 命令 行 ， foo 默认 取 default 值 ， ​   foo   东西 不 值 ， foo 取   const   选项 赋的 值 。 不 太 喜欢 东西 。   给出 一个 完整 例子 :   运行 情况 所示 :   命令 行 选项 关联 动作   parser   add _ argument   方法   action   参数 用来 控制 命令 行 选项 关联 动作 ， 都不 设置 ， 默认   store   ， 存储 值 。 类似   store _ const   ,   store _ true     store _ false   。   store _ const   默认 store ， 指明 值的 ， 设置 action   store _ const   :   就会 自动 设置 该值 ， default 默认 值的 区别 选项 值 常量 值 。   store _ true     store _ false   写为 :   则其 存储   True   值 :   是要 讲 定义 动作 ， 类似   version   用法 ， 一种 影响 程序 工作 流的 选项 ， 官方 文档 推荐 子类 化   argparse . Action   方法 ， 麻烦 。 发现   click   模块 好 （ 一个 解决 创建 命令 行 脚本 工具 推荐 第三方 模块 ） ， 很 :   ctx param click 模块 再 细讲 ， 过程 argparse 美观 多了 。   configparser 模块   简单 配置 文件 管理 就用 python 内置 模块 configparser 。 python2 模块 名字   ConfigParser   。   python3 configparser 简单 ， 分为 几步 :   新建 一个 configparser 对象   读取 config 文件   调用 read 方法 读取 config 文件 。   如同 字典 操作 configparser 对象   接下来 如同 字典 操作 configparser 对象 。   ' DEFAULT '   section ， 大致 表达 :   调用 write 方法 写入   不 默认 更改 大小写   请 参看   网页   ， configparser 模块 默认   option     section key   改成 小写 ， 不 太 喜欢 风格 ， configparser 刷成 字典 值时 ， 字典 key 大小写 区分 ， 改动 ， 不 自动 小写 操作 :   configparse 特殊字符   configparse 特殊字符 会报 错 ， 参考     ， 推荐   RawConfigParser   ， 解决问题 。   csv 模块   csv 模块   reader     writer   两个 函数 ， 还 提供   DictReader     DictWriter   两个 基于   reader   writer 两个 辅助 类 。 reader writer 接受 文件 对象 ， 参见 官方 样例 ：   reader writer 两个 函数 接受 参数 定制 ， csv 方言 格式 。 不 做 修改 ， 默认 采用 excel 格式 csv 方言 ：   字 段的 含义 作出 ：   delimiter   分隔符 ， 意义 很 。   lineterminator   换行符 ， 意义 很 ， 两种 ：   \\ r \\ n     \\ n   。   skipinitialspace   默认 False ， 空格 设置 分隔符 时有 意义 ， 字符 空格 会被 忽略 ， 情况 设置 True False 区别 不 大 。   quoting   设置 quote 规则   csv . QUOTE _ MINIMAL   情况 下才 加上 双引号 ， 逗号 字符串 ， 双引号 字符串 ， 换行符 号在 字符串 。   csv . QUOTE _ ALL   是都 加上 双引号 ， 数字 。   csv . QUOTE _ NONNUMERIC   数字 不 加 ， 字符串 都 加上 双引号 。 （ 情况 下 csv 模块 才会 正确 数字 解析 float 类型 ）   csv . QUOTE _ NONE   都不 加 （ 设置 好 escapechar 选项 ）   quotechar   设置 quote 字符 ， 设置 双引号 。   doublequote   用来 双引号 字符串 中的 情况 ， 默认 True ， 字符串 将会 双引号 之外 再 加上 双引号 ， 设置 False ， 会 加上 一个   escapechar   。   csv 输出 格式 太多 excel 格式 ， 简单 csv 文件 读写 所示 ， 是不 太多 参数 ：   编写 csv 方言   示你 指定 csv 方言 选项 ， 所示 定义 一个 csv 方言 类 ：   csv 模块 reader writer 函数 加上   dialect = ' YourDialectCSV '   即可 。   DictReader DictWriter 类   开头 一行 是字 段名的 csv 文件 ， 推荐 DictReader DictWriter 两个 类 ， 两个 类 初始 实例 化的 接受 dialect 选项 参数 ， 参数 会 原封不动 传递 reader   讨论 ， 很 简单 ， 看下 官方 样例 即可 ：   tempfile 模块   tempfile 模块 用于 创建 临时文件 临时 文件夹 ， 模块 系统 平台 上都 工作 ， 很 有用 。   windows 系统 下的 临时 文件夹 所在 ：   最 核心 两个 函数   mkstemp     mkdtemp   。   mkstemp   mkstemp 函数 用于 新建 一个 临时文件   返回 第二个 参数 目标 临时文件 路径 名 ， 第一个 文件 参数 ， 操作系统 级别 文件 句 柄 （ C 语言 文件 句 柄吧 ） ， 要转 成 python 文件 对象 如上 示 ，   os . fdopen   打开 。   textwrap 模块   textwrap 模块 编辑器 常见 换行 显示 功能 。 默认   width = 70   。   fill 函数 等于 ：",
            "tags":"python_language",
            "url":"articles/python-modules.html"
        },
        {
            "title":"python语言学习教程四pypi生态圈",
            "text":"setup . py 配置   本章 知识 理解 前人 编写 有用 模块 包的 基础 ， 编写 模块 包的 基础 。   请 Github 上的   pyskeleton 项目   阅读 本章 。   官方 内置 distutils 模块 类似 功能 ， 更 常用 第三方 模块 setuptools ， 相当于 distutils 模块 版 ， 初学者 推荐 setuptools 模块 。 更 内容 请 参看 setuptools 模块   官方 文档   。   安装 先 安装 pip3 ：   pip3 安装 setuptools ：   最 简单 \" setup . py \" 文件 所示 ：   第一行 是从 setuptools 模块 中 引入 setup 函数   find _ packages   函数 。   setup 函数 接受 一系列 字典 值 ， setup 函数 字典 值的 含义 慢慢 道来 ：     软件 名字   version   软件 版本号   author   软件 作者   author _ email   软件 作者 邮箱   maintainer   软件 维护者   maintainer _ email   软件维护 者的 邮箱   contact   软件 联系人 。 不 写 ， 则是 维护者 名字 ， 则是 作者 名字 。   contact _ email   软件 联系人 邮箱 ， 不 写 ， 则是 维护者 邮箱 ， 则是 作者 邮箱 。   license   软件 license   url   软件 项目 主页 地址   description   软件 简要 描述   long _ description   软件 完整 描述   platforms   软件 测试 运行 平台   classifiers   软件 分类 ， 请 参考   网页   给出 值 。 字符串 列表 。   keywords   软件 pypi 上 搜索 关键词 ， 字符串 列表 。   packages   软件 依赖 模块 。 ：   文件夹 下有   __ init __. py   文件 ， 都将 视作 python 模块 包 ， 其内 py 文件 都将 进去 。   手工 输入 模块 名字 ， 字符串 列表 。   entry _ point   zwc 是你 shell 调用 名字 ， zwc 是你 模块 ， 一个 zwc 是你 主 模块 子 模块 ， main main 函数 。 shell 调用 程序 接口 。 类似 gui _ script 控制 调用 GUI 图形 命令 入口 。   install _ requires   接受 字符串 列表 值 ， 依赖 pip 安装 模块 名 放入 进去 ， 软件 安装 会 自动 检测 安装 依赖 模块 。   package _ data   软件 模块 额外 附加 （ py 文件 ） 文件 ， 设置 类似   { \" skeleton \" : [ ' * . txt ' ] , }   skeleton 软件 模块 （ 文件夹 名 ） ， 跟着 一系列 文件名 列表 ， 接受 glob 语法 。 只能 包含 模块 文件夹 packages 控制 文件夹 内容 。   include _ package _ data   设置 True   不 常用 属性 值列在 ：   scripts   不 推荐 ， 推荐 entry _ point 生成 脚本 。   setup _ requires   不 推荐 ， 基于 PEP - 518   。   py _ modules   不 推荐 ， 推荐 packages 管理 模块 。   data _ files   package _ data 只能 模块 文件夹 数据 文件 ， 数据 文件 包含 ， data _ files 控制 ， 跟着 参数 格式 例子 所示 ：   值得一提的是 data _ files 接受 glob 语法 。   data _ files 不 推荐 ， 推荐 package _ data 管理 ， pkg _ resources 方法 引用 资源 文件 。 请看 。   pip develop 模式   小节 参考     。   第三方 包 不 修改 ，   python   setup . py   install   ， 写的 包 ， 频繁 变动 ， 加载 引用 本地 文件夹 ， 推荐 采用   python   setup . py   develop   命令 安装 。     pip   install   - e   .   命令 ， 安装 本地 文件夹 develop 模式   python   install   .   。   pipenv   pipenv   install   - e   .   develop 模式 ， 修改 代码 会 实时 生效 。   pkg _ resources 模块 管理 读取 资源 文件   所示 ：   第一个 参数 模块 名字 ， 第二个 参数 模块 中的 文件 路径 表达 。   例子 resource _ filename ， 返回 引用 文件名 。 命令 ： resource _ string ， 参数 resource _ filename ， 返回 字节 流 。 字节 流 赋值 变量 ， 存储 文件 。   pypi 上传 软件   正确 README 文档   pypi 支持 markdow 文档 格式 。 推荐 官方 文档     ：   段时间   codecs   读取 README 文件 奇怪 ， 原因 不明 。 如同 读取 即可 。   配置   long _ description _ content _ type   ， 喜欢   reStructuredText   格式 ， 设置   text / x - rst   即可 。   推荐 升级 最新 setuptools ， wheel twine 模块 。   句 ：   dist 文件夹 生成 源码 tar 包和 wheel 包 。   推荐 运行 下 ：   确保 文档 格式 没 。   推荐 twine 上传   twine 上 传到 pypi 很 简单 ：   每次 都 输入 用户名 密码 ， 安装   keyring   模块 ， 运行 ：   本地 保存 用户名 密码 。   pypi 下载 国内 源   豆瓣 pypi 源   https : / / pypi . douban . / simple     清华 pypi 源   https : / / pypi . tuna . tsinghua . . cn / simple   都 。   临时   - i     index   选项 ：   永久 更改 本地 配置 ：   pypi 只 下载 软件 源文件   下载 pypi 上的 目标 软件 源文件 安装 。 参考   网页   。   python 虚拟 环境 管理   Virtualenv 模块 作用 建立 一个 封闭 独立 python 开发 环境 ， 一个 python 项目 开发 会 涉及 多个 模块 ， 激活 virtualenv 环境 ， pip 命令 安装 模块 安装 项目 文件夹 内的 ， 建立 单独 固定 模块 版本 开发 环境 。 python 虚拟 环境 ， 控制 python 版本 ， 控制 python 模块 版本 ， 项目 类似 绿色 安装 版 可移植性 。   安装 pip 安装 常规 安装 即可 。   新建 一个 项目   新建 一个 项目 virutalenv 命令 ， 一个 文件夹 名字 ， 等下 新建 文件夹 名字 。   path 项目 名字 ， 等下 会 创建 名字 文件夹 ， 设定   \" . \"   ， 文件夹 下 创建 。   常用 选项 ：   python = python2     python = python3   不 指定 选项 ， 虚拟 环境 会 操作系统 默认 python 版本 。   system - site - packages   ， 加上 选项 ， 虚拟 环境 安装 系统 里去 python 模块 。 参考   网页   ， 个很 值得一提 小 技巧 ， 设定 venv 引用 系统 级的 python 模块 ， 不想 ， 是不 安装 虚拟 环境 ， 只 虚拟 环境 中 创建 一个 空白 文件 即可 ：   想 引用 系统 级的 python 模块 ， 文件 删除 即可 。   激活 本地 虚拟 环境   运行 命令 本地 虚拟 环境 ：   激活 虚拟 环境 ， python 虚拟 环境 设定 python 解释器 ， pip 安装 模块 安装 虚拟 环境 之下 。   退出 本地 虚拟 环境   运行 deactivate 命令 即可",
            "tags":"python_language",
            "url":"articles/python-pypi.html"
        },
        {
            "title":"python语言学习之资料参考",
            "text":"python 入门 教程 ， python 官 网上 tutorial 。 原 作者 ： Guido   van   Rossum   Fred   L .   Drake   ； 中文 翻译 ： 刘 鑫等 ； 版本 ： 2013 - 10 - 28 ； pdf 下载 链接 ：   python 入门 教程   。   learning   python ， python 语言 参考 ， 参看 python 学习 手册 （ 第四 版 ） 。 原 作者 ： Mark   Lutz ， 中文 翻译 ： 李 军 ， 刘 红 伟等 。   programming   python ， 作者 Mark   Lutz python 编程 进阶 讨论 ； 版本 ： 第四 版 。   python   官 网上 资料   。   第三方 模块 参考 手册 ， numpy ,   scipy ,   matplotlib 第三方 模块 官 网上 发布 官方 参考 手册 。   dive     python3   english   version   ,     中文版   。   A   Guide     Python ' s   Magic   Methods ， 作者 ： Rafe   Kettler   , 版本 ： 2014 - 01 - 04 ，   Github   地址   .   Foundations     Python   Network   Programming   ， python 网络 编程 基础 ， [ 美 ]   John   Goerzen   著 ， 莫 迟等 译   。   中文 在线 阅读 网页   ，   english   version   。   Unix 网络 编程 卷 1 :   套 接字 联网 API   ,   Author :   W .   R .   Stevens   ,   Bill   Fenner   等著   ,   version :   第三 版   计算机网络 顶 向下 方法   ,   Author :   James   F .   Kurose   ,   Keith   W .   Ross   , 陈 鸣译   。 本书 入门 计算机网络 相关 知识 很 不错 。   SQL 必 知必 会   [ 英 ]   Ben   Forta   著 ，   钟鸣   刘 晓霞 等译 。",
            "tags":"python_language",
            "url":"articles/python-references.html"
        },
        {
            "title":"python语言学习之编码风格推荐",
            "text":"PEP8 代码 风格 规范 python 程序员 都 内容 ， 内容 官方 文档     。   空白 格式 编辑器 加上 插件 都 自动 pep8 格式 调整 ，   autopep8   模块 ， 一块 不 多说 。   简单 地说 变量 名的 命名 规范   【 高质量 python 代码 】 ：   字母 都 大写 变量 ， 模块 文件 级别 常量 ， 单词 下划线 隔开 。   首 字母 大写 类 异常 名字 ， 多个 单词 驼峰 写法 。   一律 小写 字母 ， 下划线 隔开 。   开发者 不 命名 下划线 开头 变量 ， 写你 干什么 。   编码 风格 推荐   带 两个 语句 列表 解析 。   生成 器 表达式 改写 数据 量 较大 列表 解析 。   循环 写上 语句 。 建议 有利于 程序 简洁 直观 ， 接受 。   函数 返回 值是 返回 值才 意义 ， ， 情况 ， 抛 出 异常 。   python 哲学   参考   网页 翻译   。   美 优于 丑 。   直白 优于 隐晦 。   简单 优于 。   优于 纠结 。   扁平 优于 嵌套 。   稀疏 优于 稠密 。   可读性 是有 价值 。   特例 ， 特例 打破 规则 。   纯粹 性和 实用性 之间 倾向 实用性 。   出错 决不能 无声无息 忽略 。   无声无息 。   面对 二义性 情况 时 ， 拒绝 猜的 诱惑 。   一件 事 一种 做法   — —   一种 做法   — —   一种 显而易见 做法 。   刚 做法 显而易见 ， 毕竟 荷兰人 。   『 』 优于 『 决不 』 。   『 决不 』 优于 『   马上   』 。   一个 难于 解释 ， 个差 想法 。   一个 很 解释 ， 是个 想法 。   命名 空间 是个 拍案叫绝 想法   —   放手 多用 ！",
            "tags":"python_language",
            "url":"articles/python-style-guide.html"
        },
        {
            "title":"python语言学习教程五网络编程篇",
            "text":"只 讨论 TCP 套 接字 编程 ， UDP 协议 暂不 讨论 。 TCP 套 接字 编程 过程 所述 :   套 接字 编程   客户机 负责 发起 连接 ， 其将 新建 一个套 接字 对象 （ python 中是   socket   函数 创建 ） ， 好比 一个 封闭 黑 箱子 里开 一个 门 ， 创建 套 接字 对象 过程 中 ， 指定 连接 服务器 IP 地址 端口号 （   connect   方法 ） 。   接下来 TCP 三路 握手 过程 ， 传输 层 最底层 东西 ， 客户机 程序 服务器 程序 都 不用 操心 ， 是是 操作系统 程序 负责 。 服务器 程序 关心 是在 三路 握手 期间 ， 类似 听到 敲门声 ， 开出 一个 门 。 服务器 程序 听到 敲门声 ， 处于 监听 端口 状态 。 服务器 程序 创建 一个套 接字 对象 ，   bind   端口号 ， 调用   listen   方法 监听 端口 。   服务器 监听 套 接字 调用   accept   方法 ， 阻塞 ， 接下来 听到 敲门声 ， 敲门声 TCP 三路 握手 第一路 信号 发送 ， TCP 三路 握手 两路 ， 暂时 不 太 关心 。 等到 TCP 三路 握手 ， 服务器 accept 方法 创建 一个套 接字 对象 。 套 接字 对象 称之为   连接 套 接字   。 服务器 连接 套 接字 调用 accept 方法 理解 接受 客户机 敲门 ， 顺利 ， 其将 客户机 新开 一个套 接字 ， 一个 新门 。   客户机 一个套 接字 ， 情况 稍微 简单 点 ， 往套 接字 塞 信息 （   sendall   方法 ） 发送 信息 ， 套 接字 读 （   recv   方法 ） ， 读 信息 。 服务器 ， 实际上 客户机 对等 来看 ， 第二个 新建 连接 套 接字 看作 看作 类似 客户机 第一个 套 接字 ， 读 读 信息 ， 写 发送 信息 。 服务器 要新 开 一个套 接字 ， 猜到 ， 是因为 服务器 多个 客户机 请求 ， 第一个 监听 套 接字 理解 为总 大门 ， 开启 连接 套 接字 理解 小门 ， 才是 客户机 一对一 管道 连接 。   简要 描述 太 过于 抽象 ， 再 来看 一个 最 简单 代码 ， python 官方 文档 socket 模块 第一个 例子 ， 地方 稍 作 改动 。   服务器端   server . py   代码 :   运行 server . py ， 如前所述 ， socket 函数 创建 一个 监听 套 接字 ， 套 接字 监听 端口 bind 方法 指定 ， 监听 套 接字 监听 （ 调用 listen 方法 ） 。 调用 监听 套 接字 accept 方法 ， 收到 TCP 连接 请求 ， 其将 返回 一个 连接 套 接字 ， conn 。 程序 主 循环 ， 连接 套 接字 recv 方法 来读 ， sendall 方法 来写 。 close 方法 关闭 连接 套 接字 。   客户机 端   client . py   代码 :   客户机 新建 一个套 接字 ， 套 接字 connect 方法 拨号 服务器 ， sendall 方法 来写 ， recv 方法 来读 。 过程 大抵 。   一副 图画 加深 小节 印象 。   将更 讨论 套 接字 编程 ， 并用 python socket 模块 介绍 编码 细节 。   socket 模块   host 主机 名   host 最 简单 熟知 IP 地址 ， 本地 hosts 文件 解析 网络 DNS 系统 解析 名字 。   localhost     python . org   。 socket 模块   gethostbyname   函数 ， 获取 hostname IP 地址 。   gethostbyname 函数 只 支持 IPv4 地址 ， 推荐   getaddrinfo   函数 ， 支持 IPv4 IPv6 地址 。 参数 设置 :   port 填写 80 ' http ' 形式 ， 设置 None 。 family 地址 族 ， type 是套 接字 类型 ， 先 暂时 略过 讨论 。   函数 返回 值是 一个 列表 ， 其内 元素 结构 :   所示 :     AF _ INET   地址 族是 创建 socket 套 接字 对象 时的 默认 地址 族 ， IPv4 地址 。 套 接字 类型   SOCK _ STREAM   创建 套 接字 对象 默认 值 ， 其是 字节 流套 接字 。   getaddrinfo 函数 返回   family , type , proto   三个 参数 传递 socket 函数 用于 创建 一个套 接字 对象 。 canonname 冷门 ，   sockaddr   传递 套 接字 对象   connect   方法 套 接字 连接 操作 。   来用 脚本 试 :   读者 还 域名 来试 。   地址 族   AF _ INET   IPv4 地址   AF _ INET6   IPv6 地址   冷门 地址 族 :   AF _ UNIX   ，   AF _ NETLINK   ，   AF _ TIPC   套 接字 类型   SOCK _ STREAM   字节 流套 接字   SOCK _ DGRAM   数据 报套 接字   两个 套 接字 类型 是全 平台 。 冷门 套 接字 类型 :   SOCK _ RAW   ，   SOCK _ RDM   ，   SOCK _ SEQPACKET   传输 协议   传输 协议   proto   设置 0 。 指定 传输 协议 :   IPPROTO _ CP   TCP 传输 协议   IPPROTO _ UDP   UDP 传输 协议   IPPROTO _ SCTP   SCTP 传输 协议   timeout   设置 None ， 则套 接字 阻塞 模式   设置 0 ， 则套 接字 为非 阻塞 模式   设置 sec 秒 ， 则套 接字 会 等待 sec 秒 ， 抛 出   socket . timeout   异常 。     setdefaulttimeout   函数 全局 设置 创建 socket 对象 timeout 。   阻塞 模式 还 设置 ：   listen 方法   服务器端 套 接字 监听 。   python3.5 ， backlog 参数 为可 选 参数 。 backlog 等待 连接 数 （ 超过 数 ， 新的 连接 将被 拒绝 ） 。 数 设置 5 ， 系统 才 5 ， 再 提高 一点 ， python3.5 ， 数 可选 参数 ， 文档 上说 会 自动 设置 一个 合适 数 ， 不 操心 。   更 细节 请 参看 官方 文档 。   异步 编程   常规 同步 ( synchronous ) 编程 平时 编程 模型 ， 顺序 结构 ， 阻塞 式 ， 多个 函数 逐个 执行 ， 一个 执行 完 才能 执行 下 一个 ， 图所 示 :   一种 线程 并发 模型 :   python GIL 概念 ， 很多 人对 指责 ， 实际上 支持 多线程 并发 语言 ， 怕 便利 带来 是更 多的 困扰 。 想一 想 人脑 思考 时间 只能 做 一件 事 ， 也许 python GIL 一种 。 实际上 要用 多线程 并发 ， 建立 好 模型 ， 最终 多个 分支 线路 互不 干扰 ， 平行 放入 一个 列表 中 约束 ， 才能 放心 多线程 并发 。 而在 约束 模型 下 ， python   multiprocess   模块 能很 好地 胜任 类型 工作 。   讨论 异步 编程 模型 :   异步 编程   一个 名字   非 阻塞 编程   ， 主 程序 建立 事件 循环 ， 主 事件 循环 过程 阻塞 程序 过程 ， 插入 执行 。 实际上 类似 GUI 程序 主 设计 理念 ------ 事件 驱动 循环 机制 ， 异步 编程 一个 名字   事件 驱动 编程   。   例子 学习 。   低效 诗歌 服务器   例子 来自 参考 资料   [ @ twisted 异步 编程 入门 ]   ， 改成 python3 版本   slowpoetry . py   。   获取 诗歌 client 端 程序   _ poetry . py   。   读者 利用 两个 脚本 测试 效果 。 两个 脚本 ， 客户端 服务器端 都是 阻塞 式的 。 先开 一个 服务器端 :   开 两个 终端 ， 刷 命令 ， 后 执行 终端 获取 文本 是被 阻塞 了的 ------ 服务器 阻塞 。   在开 一个 服务器端 :   一个 客户端 运行 :   客户端 获取 文本 一个个 来的 ， 客户端 阻塞 。   一个个 ， 一个 做 完 才能 下 一个 模式 是很 好 理解 ， 进程 间的 通信 ， 请看 select 风格 I / O 复用 讨论 。   Select 风格 诗歌 服务器   Unix 五种 I / O 模型   讨论 Unix 五种 I / O 模型 ：   阻塞 式 I / O   ， 默认 阻塞 式 I / O 。   非 阻塞 式 I / O ， 程序 持续 轮询 内核 操作 就绪 。   I / O 复用 ， select poll 文件 描述符 管理 I / O 。   信号 驱动 式 I / O   异步 I / O   五种 I / O 模型 中 ， 最 阻塞 式 I / O 模型 ， 而非 阻塞 I / O 轮询 机制 太 过于 浪费 资源 ， 信号 驱动 I / O 异步 I / O 很少 ， 用的 最   I / O 复用 模型   。 python 中的 twisted 模块 python3.4 新   asyncio   模块 事件 循环 都是 基于   再 建立 类 异步 I / O 概念 。   重点 python selectors 模块 分析 I / O 复用 模型 。 selectors 模块 python3.4 才有 ， 建构 select 模块 之上 。 五种 内置 Selector :     DefaultSelector   即可 ， python 会 自动 选择 平台 Selector 。   创建 一个 Selector 对象 所示 :   监控 文件 读写 事件   Selector 对象 有个 register 方法 ， 所示 ：   fileobj 为某 文件 对象 （ Linux 中 皆 文件 ， 套 接字 视为 一个 文件 。 ） 。   监控 事件 :   EVENT _ READ   读 事件 ， 读的 定义 参考 资料   [ @ Unix 网络 编程 卷 1 ]   描述 :   套 接字 接受 缓冲区 中的 数据 字节 数 大于 等于 套 接字 接受 缓冲区 低水平 标记 大小 。 套 接字 读 阻塞 ， 其将 返回 一个 大于 0 值 （ 读 入的 字节 数 ） 。   SO _ RCVLOWAT   套 接字 选项 设置 套 接字 低水平 标记 ， TCP UDP 套 接字 默认 值是 1 。 【 很 好 理解 ， 1 字节 ， 接受 1 字节 更 多的 字节 有了 读 事件 。 】   连接 读 半部 关闭 ， 套 接字 读 操作 不 阻塞 返回 0 （ 返回 EOF ） 。 【 套 接字 对面 关闭 ， 读的 ，   '   read '   判断 读 结束 后续 。 】   套 接字 一个 监听 套 接字 且已 连接 数不 0 。 【 是指 服务器端 创建 监听 套 接字 ， accept 阻塞 ，   conn ,   addr   =   s . accept ( )   ， 客户端 敲门 ， 会有 一个 读 事件 ， 就会 批准 自动 创建 一个 监听 套 接字 ， 已 连接 数为 0 ------ 已 连接 数 含义 还 不 。 】   情况 中 ， 一个套 接字 错误 ， 套 接字 读 操作 不 阻塞 返回 - 1 。 【 细节 暂时 还 不 。 】   EVENT _ WRITE   写 事件 ， 写的 定义 参考 资料   [ @ Unix 网络 编程 卷 1 ]   描述 :   套 接字 发送 缓冲区 中的 可用 空间 字节 数 大于 等于 套 接字 发送 缓冲区 低水平 标记 大小 ， 套 接字 已 连接 （ 套 接字 不 连接 ， UDP 套 接字 ） 。 套 接字 设置 为非 阻塞 ， 写 操作 返回 一个 正值 （ 传输 层 接受 到的 字节 数 ） 。   SO _ SNDLOWAT   套 接字 选项 设置 套 接字 写 低水平 标记 ， TCP UDP 套 接字 默认 值是 2048 。 【 套 接字 阻塞 ， 写 操作 会 套 接字 一端 recv 阻塞 阻塞 ， 一个 猜测 。 读 实际上 个反 ， 可读 相当于 数据 量 超过 标记 ， 送 一点点 数据 不行 ， 还 送到 量 ， 才可 读 ； 而可 写 是送 一点点 数据 都是 写的 ， 送的 数据 量 很大 ，   可用   缓冲区 空间   小于   标记 ， 写了 。 】   连接 写 半部 关闭 。 套 接字 写 操作 SIGPIPE 信息 。 【 试过 ， 后续 程序 会 出错 。 服务器 主动 发动 数据 模式 ， 都 情况 捕捉 好 异常 。 】   非 阻塞 连接 套 接字 已 连接 连接 已 失败 。 【 非 阻塞 连接 初次 连接 成功 写很 好 理解 ， 连接 失败 写 ？ 非 阻塞 初次 连接 失败 连接 半部 关闭 情况 ， 一条 。 】   情况 中 ， 一个套 接字 错误 ， 套 接字 写 操作 不 阻塞 返回 - 1 。   更 多的 内容 请 参看   selectors   模块 官方 文档 。   例子 诗歌 服务器 写成 Select 风格 异步 版本   select _ slowpoetry . py   :   客户端 编写 简单 一点 ， 代码 所示   select _ _ poetry . py   :   改动 两点 :   1 .   客户端 开启 几个 sock ， sock 读 时间 绑定 download _ poetry 方法 ， 数据 读了 ， 就会 执行 操作 。   2 .   下载 目标 fileobj write ， 接受 到的 字节 流给 写 进去 即可 。   Asyncio 风格 诗歌 服务器   Selectors 模块 ， 程序 高效 异步 模式 ， 代码 中 几个 丑陋     True   压缩 一个 ， 追求 代码 美观 程序员 来说 会对 会 感到 很 满意 。 程序 刚     True   看 不 习惯 它了 。 慢慢 构建 出 \\ \"   reactor   \\ \" 术语 取代 主 循环 ， 图所 示 :   reactor   twisted 模块 中 实际上 一个 reactor 变量 ， 主 Selector 事件 驱动 。 asyncio 模块 类似 eventloop 概念 :   事件 驱动 编程 还 一点 ， 上 图   事件 循环   概念 事件 驱动 编程 核心 概念 ， 实际上 select 风格 异步 编程 中 ， 影子 ， 开启 事件 循环 ， 剩下 工作 挂载 函数 ， 函数 会 涉及 函数 挂载 取消 挂载 操作 ， 脑海 中 想象 一个 事件 循环 大圈 ， 四周 八围 挂载 函数 操作 ， 事件 驱动 编程 风格 。 实际上 事件 驱动 编程 会让 很多 工作 变得 简单 ， 事情 变得 ， 关键 头脑 习惯 编程 风格 ， 脑海 里还 熟悉 事件 驱动 模型 。   常规 eventloop 版   Asyncio 风格 诗歌 服务器 第一版 ， asyncio 模块 有不 懂 读者 请 参看 模块 官方 文档 。   诗歌 获取 客户端 写成 asyncio 版本 。 代码 所示 ， 改动 很大 。   值得一提的是 读 完毕 判断 逻辑 :   读 半部 关闭 ， 则将 返回 0 ， 判断 读 操作 完毕 。   定义 协议 版   asyncio 模块 还 提供 很多 功能 读者 不用 socket 模块 ， 更 高层 基于 协议 编写 网络 程序 。   诗歌 服务器 第二 版 ， 例子 参考   网页   修改 而成 。   代码 变得 简单 可怕 。   create _ server   方法 。 方法 ， 基于 定义 协议 创建 一个 TCP   server （ 返回 是协 程 对象 ） 。 创建 协议 对象 。   定义 协议 继承 Protocol 类 ， 定义 方法 :   connection _ made   callback 继承 Protocol 类 ， 逻辑 一个 连接 建 好了 ， 执行 函数 。 接受 一个 参数 transport 。 协议 传输 层 。   data _ received   callback 继承 Protocol 类 ， 数据 传 进来 ， 函数 将被 执行 。 接受 一个 参数 传 进来 data 。   eof _ received   数据 结束 完毕 调用 。 一端 transport 发送 写入 结束 信号   write _ eof ( )   。   配套 获取 诗歌 客户端 所示 :",
            "tags":"python_language",
            "url":"articles/python-web-programming.html"
        },
        {
            "title":"python2和python3兼容性问题",
            "text":"WARNING   警告 ， 本文 归档 ， 年久失修 ， 内容 已 过于 陈旧 ， 放在 权做 读者 参考 。 【 2019 】   2to3 内置 模块   python 有个   2to3   内置 模块 自动 python2 脚本 python3 脚本 移植 工作 ， 感觉 过分 依赖 工具 ， 适合 初学者 。 python2 python3 很多 地方 不 。 模块 有很 深的 ， 手工 修改 会更 合适 （ 会 涉及 到新 编写 思路 ） 。 模块 请 参看 官方 文档 。   / /     /   python2 中 ， 两个 整数 相除 会 返回 一个 整数 ， python3   / /   。   兼容 方案   文件 头上 加上 一行 ：   就都 python3 语法 规则 ， :   /   常规 除法 ，   / /   整除 — — 返回 商 。   print 函数   是最 常见 错误 ， 推荐 第一步 就在 文档 find   print 字符串 操作 ， ：   形式 都 换成 ：   python2 python3 都 兼容 形式 ， 好 犹豫 ， 大胆 修改 。   python2   还 小 ， 简单 理解 python3   python2 支持 重 定向 语法   python3 file 选项 ：   兼容性 方案   推荐 模块 最 写上 :   python3 语法 print 函数 。 python2 运行 。   unicode 字符串   说 Unicode 字符串 历史 ， python2 诞生 Unicode 字符串 （ 宽 字符 解决 编码 方案 统称 ） 要早 ， python2 早期 基于 ASCII 编码 ， ASCII 编码 8 位值 编码 ， 单纯 ， python2 一个 str 类型 8 位 字符 二进制 数据 。 python2 才 引入 unicode 字符 类型 ， 宽 字符 文本 。   python2 兼容 python3 引入 bytes 类似 bytearray 类型 。 兼容性 。 python2 python3 代码 兼容 上 一个 坑 python2 str 类型 8 位 文本 二进制 数据 统称 ， 默认 ASCII 编码 情况 下 ， 不知不觉 ， 系统 默认 编码 默认 ASCII ， 8 位值 数据 不 到底 文本 。 （ python3 str 默认 UTF - 8 编码 ， 支持 8 位 文本 支持 宽 字符 文本 ， 其就 真的 文本 含义 。 ）   都 同意 python3 新 分类 是很 ：   str   文本 ，   bytes   字节 流 。 编程 都 一律 采用 思维 。   写 python2 代码 都 推荐 文件 头上 写上 ：   写了 python2 中 随便 定义 字符串   返回 unicode 类型 ， python3 str 类型 。 程序员   （ \\ cite { 高质量 python 代码 } ）   编码 时 更 多地 业务 逻辑 字符 编码 二进制 形式 存放 。   简单 见 字符串 都 简单 字符串 （ 或者说 文本 ） ， 程序员 编码 ， 确实 到了 点 ， 操作 字符 bytes 形式 ， 确实 ， 再 转换 操作 。   转换 ：   历史 遗留 代码 ， 遗憾 ， python2 python3 一块 裂痕 ， 详细 阅读 修改 重写 代码 恐怕 不了 。   ​   input raw _ input   python2 中的 raw _ input 函数 python3 input 函数 。 python2 一个 input 函数 ， python3 中 eval ( input ( ) ) ， 函数 推荐 废弃 掉 。   兼容 方案   类都 继承 object   python3 中 类都 默认 object 子类 。   兼容 方案   兼容 方案 引入 builtns 引入 object ， 都 指明 继承 object 。   execfile 函数   python2 中 execfile 是个 内置 函数 ， 运行 ， 用来 执行 python 脚本 。   兼容 方案   < > 替换   ! =   不 等于 号 < > 废弃 ， 推荐 ! = ， python2 python3 都是 兼容 。   模块 包的 导入   python2 python3 模块 包的 结构 很多 地方 发生 变动 ， 实际上 python3 ， 版本 升级 ， 内置 模块 包 内部 发生 变动 ， 新 函数 类 。 不可避免 ， python2 模块 包 官方 提醒 要被 废弃 ， 值得 。 一块 ， 平时 阅读 官方 文档 （ 变动 官方 文档 都会 ） 。",
            "tags":"python_language",
            "url":"articles/python2-python3.html"
        },
        {
            "title":"人工智能的未来阅读笔记",
            "text":"前言   意义 上 来说 ， 计算机科学 领域 神经网络 发展 大脑 研究 科学 关系 太大 ， 说最 早期 哲学 上 启发 ， 计算机科学 领域 神经网络 学科 更 是从 数学 研究 出发 慢慢 发展 。 本书 — — 杰夫 · 霍金斯 2004 年 出版 《 人工智能 未来   — — 来说 ， 目的 要在 计算机科学 领域 加上 一点 数学 花边 ， 更 多的 是从 哲学 思考 层面 启迪   人工智能   研究 。 人工智能 一个 很 宽广 研究 领域 ， 如果说 神经网络 解决 ， 之于 人工智能 研究 领域 来说 ， 沧海 粟来 形容 。 读者 阅读 本书 ， 没 去 联想 神经网络 学科 ， 更 多的 是从 人工智能 关注 出发 。   笔者 来说 类人 智能 ， 或者说 类似 人的 机器人 是不 ， 一个 很 关键 分界点 ， 机器人 创造 ， 创造 局限 形式 内容 创造 ， 意义 创造 。 图灵 仅仅 模仿 层面 来说 机器 智能 ， 由人 给定 机器 意义 目的 效用 ， 机器 设计 选择 多种 目的 解决 方案 ， 机器 智能 一千年 之内 。   参考 人脑 构造 结构 工作 原理 是持 保留 意见 ， 机器 智能 基于 特性 发展 进化 ， 人的 创造 ， 上天 人的 创造 中 给与 人 启迪 ， 人 自我 设限 创造 遵照 上天 原先 那种 创造 道理 ， 中国 人的 古话 来说 盲从 古 师而 不 懂 举一反三 。 本书 人脑 构造 工作 原理 讨论 权做 参考 ， 给与 读者 一点 灵感 火花 ， 茶余饭后 有趣 ， 足矣 。   历史   弗朗西斯 · 克里克 科学 美国 人中 发表 一篇 文章 《 大脑 思考 ， 君 DNA 结构 发现 人 ， 天才 思考 投入 到了 大脑 研究 之中 。   克里克 积累 大脑 详尽 知识 ， 大脑 工作 原理 来说 仍 一个 难解 迷 。   说 ： 最 是在 概念 上 缺乏 一个 总的 框架 。   振聋发聩 声音 唤醒 《 人工智能 未来 书的 作者 — — 杰夫 · 霍金斯 心中 长久以来 愿望 ， 去 研究 大脑 ， 制造 一个 智能 机器 。   人工智能 关键 人物 阿兰 · 图灵 ， 提出 \" 通用 计算 \" 概念 ， 证明 建构 细节 上 有所不同 ， 上讲 计算机 都是 等效 。   图灵 建造 智能 机器 ， 感到 电脑 智能化 。 提出 一个 著名 图灵 检验 。 一台 电脑 诱使 一个 询问 一个 人 ， 说 台 机器 智能 。   杰夫 · 霍金斯 提出 见解 ， 图灵 犯了 二十 世纪 上半叶 占 主导 地位 心理学 思潮 — — 主义 — — 错误 ， 都 试图 定义 智能 ， 确实 智能 一种 表现 ， 绝不 智能 本质 智能 首要 解释 。   1   早期 人工智能 热潮 充斥 过度 自信 ， 解 数学 证明 题 ， 虚构 一个 积木 世界 ， 下 象棋 ， 专家系统 解答 。 创造者 像人 思考 。   1986 年 ， 杰夫 · 霍金斯 学习 智能 大脑 功能 理论 研究 成果 。 ， 人工智能 第二个 研究 小 高峰 ， 代表 神经网络 。 神经网络 建造 一个 系统 ， 编程 计算机 ， 模拟 神经元 连接 。 是在 一条 正确 道路 上 ， 显示 进展 令人 失望 ， 弄 出的 仿真 预测 模型 证明 不用 神经网络 传统 编程 方法 。 是因为 急功近利 思想 ， 神经网络 都 建立 极为 简单 模型 上 ， 相互 少量 连接 神经元 排成 三列 。   反馈     时间   概念 。 更 新 大脑皮层 一个 统一 重复 层级 结构 ， 神经网络 都对 结构 缺乏 。   人脑 开发 智能 机器 必由之路 — — 杰夫 · 霍金斯   新 大脑皮层   大脑 ， 一层 薄薄的 皮包 覆 ， 层皮 新 大脑皮层 。 杰夫 · 霍金斯 智能 藏在 新 大脑皮层 之中 。 杰夫 · 霍金斯 智能 都 于新 大脑皮层 ， 丘脑 海马 作用 。   古 脑与 人的 欲望 情感 ， 杰夫 · 霍金斯 早期 智能 机器 类似 人的 欲望 情感 。   正常人 小脑 损害 生活 太大 ， 小脑 原始 时间 观念 ， 新 大脑皮层 会 事件 流 出新 时间 观念 。 大脑 一部分 器官 原始 控制 很大 一部分 功能 都被 新 大脑皮层 取代 。   人类 大脑皮层 展开 相当于 4 张 A4 打印 纸的 大小 。 面积 大小 ， 大脑皮层 纵向 还 分为 六层 。 有人 估计 300 亿个 神经元 。 弗朗西斯 · 克里克 《 惊人 假设 书中 说道 ： \" 思想 大 脑细胞 产物 ， 魔力 ， 浆汁 。 思想 神经元 闪动 信息流 。 \"   2   。   蒙 卡斯 尔的 假说   1978 年 ， 弗龙 · 蒙 卡斯 尔 发表 一篇 论文 《 大脑 功能 组织 原则 ， 文章 指出 大脑皮层 外表 上和 结构 上都 惊人 ， 不论是 主管 视觉 输入 主管 触觉 大脑皮层 区域 、 控制 肌肉 区域 、 布洛 卡 语言 区 区域 。 实际上 。 暗示 说 ， 区域 发挥 作用 千差万别 ， 功能 方法 。   蒙 卡斯 尔 ， 解剖学 家 到了 大脑皮层 惊人 相似性 ， 深究 含义 。 蒙 卡斯 尔却 相似性 意味着 更 多的 东西 。   大脑皮层 视觉 区域 ， 运动 区域 肌肉 运动 ， 区域 中央 神经系统 连接 。   大脑皮层 之间 细小 差异 正是 连接 差异   大脑皮层 功能 区域 都 遵循 一个 算法 ， 视觉 、 听觉 、 运动 输出 之间 差异 。   威斯 康辛 州 大学 生物 医药 工程学 教授 保尔 · 巴 奇 · 瑞塔 发明 一种 人的 舌头 上 显示 视觉 模式 方法 ， 戴上 装置 ， 盲人 舌头 来看 东西 。 原理 前额 戴上 一个 小型 摄像头 ， 影像 信息 一个 像素 一个 像素 传输 舌头 上的 压力 点上 ， 视觉 影像 转化 无数 压力 点 模式 。 大脑 却 很快 学会 正确 辨别 模式 。   2003 年 ， 韦恩 舌头 装置 ， 一个 球向 滚 ， 伸手 抓起 桌上 一杯 饮料 。 走 ， 门 ， 门框 。 他用 舌头 东西 ！   实例 告诉 大脑皮层 灵活 ， 死死地 说 区域 主管 视觉 区域 是管 语言 。 分工 人脑 基因 ， 大脑皮层 能力 远 不止 。 大脑 模式 ， 模式 来自 不 ， 时间 上以 固定 方式 ， 大脑 感觉   3   。   大脑 记忆 解决问题   杰夫 · 霍金斯 大脑皮层 记忆 电脑 芯片 记忆 区别 ：   大脑皮层 存储 模式 序列   大脑皮层 以自 - 联想 方式 回忆 模式   大脑皮层 恒定 形式 存储 模式   大脑皮层 层级 结构 存储 模式   三个 杰夫 · 霍金斯 用较 短的 篇幅 了下 ， \" 模式 \" 读者 理解 大脑 中 构建 理念 世界 模型 ， 前 三个 区别 大意 ， 大脑皮层 存储 记忆 模型 顺序 ， 大脑皮层 存储 记忆 模型 联想 功能 ， 大脑皮层 存储 记忆 模型 类似 柏拉图 讨论 理念 世界 模型 抽象 恒定 ， 实际上 是同 语 反复 ， 是又 新造 一个 词语 恒定 表征 。   该书 第四章 太多 价值 东西 ， 恒定 表征 造了 一个 新词 对人 头脑 中的 理念 世界 泛泛 哲学 讨论 ， 前人 做 很多 很 ， 顺序 联想 不 计算机 记忆 模拟 。 机器 智能 人的 智能 界限 不 在于 计算   1 + 1   ， 在于 理解   1   ， 很多 预先 假定 计算机 有了   1   模型 推出 创造 能力 ， 殊不知   1   模型 本身 创造 能力 之上 。   大脑 做 事情 时时刻刻 都在 预测   杰夫 · 霍金斯 该书 第五章 大谈 大脑 预测 能力 ， 说 房间 ， 实际上 都是 一系列 默认 空间 扫描 序列 ， 时时 序列 中 下 一个 信息 作出 预测   4   。   走路 ， 会 预测 脚 着地 ； 听 歌的 ， 会 预测 下 一个 音符 ； 听 别人 说话 ， 会 预测 会 听到   5   。   常驻 程序 基于 现有 模型 序列 预测 功能 不 机器 智能 模拟 上有 困难 。 大脑 预测 能力 活动 功能 一部分 ， 思考 智能 关键 。   新 大脑皮层 分层 结构   该书 第六章 杰夫 · 霍金斯 大 篇幅 讨论 新 大脑皮层 分层 结构 ， 看得出 作者 做 相关 资料 查阅 研究 工作 ， 生理 解剖学 上的 东西 讨论 重点 ， 杰夫 · 霍金斯 新 大脑皮层 分层 结构 讨论 做出 更 简要 汇总 整理 ：   新 大脑皮层 纵向 分为 六层 ， 六层 细胞 垂直 柱是 皮层 最 计算 单元 ：   六层 细胞 形态各异 ， 对某 刺激 信号 兴奋 。 最小 计算 单元 计算 单元 发生 ：   新 大脑皮层 记忆 知识 建立 一种 庞大 网络 。   人的 智能 暂且 不 讨论 ， 杰夫 · 霍金斯 人 大脑 工作 思考 很 价值 。 一句 简单 来说 ：   知行 合一   。 换成 该书 话语 简要 描述 人的 皮层 脑 大体 上的 分层 结构 ， 信息 向上 流向 向下 流向 。 向上 流向 感知 ， 向下 流向 预测 。 杰夫 · 霍金斯 人的 皮层 脑的 信息 基本上 融为一体 ， 上 顶层 底层 单元 都是 类似 结构 ：   单元 内部 都在 恒定 表征 — — 常用 术语 来说 模型 。   模式 推导 出 因果 讨论 人的 大脑 工作 来说 不 大 ， 章节 内容 启发性 。   谈及 最小 计算 单元 该书 谈到 生物学 细节 ， 海马 组织 快速 模式 识别 命名 细胞 负责 命名 价值 太大 ， 功能性 类的 细节 不 生物学 上的 类比 。   人 大脑 统一 ， 一体 ， 知行 合一 某种 宇宙 上天 融为一体 境界 ， 说 很 直白 ， 看不到 现有 计算机 架构 可能性 。 上天 造的 东西 很 很 简单 ， 显得 内部 东西 都很 融洽 ， 很 美 ， 事实 确实 。 说道 玄学 上的 细胞 底层 信息 DNA 信息 都是 融为一体 ， 也就是说 说 ， 上 来说 计算机 两层 之间 信息 无缝 融合 都是 。   很 作者 大谈 人的 智能 创造力 提及 大脑 最小 神经 单元 ， 最小 概念 模型 创造 概念 之上 。 谈及 人的 智能 奥妙 不 在于   1 + 1   ， 在于   1   。 作者 谈及 大脑 分层 结构 ， 结构 下 放到 最小 那种 神经网络 反馈 结构 中 ， 恒定 表征 ， 或者说   1   。   1   模型 确实 具备 抽象 泛化 性质 ， 等同于 人脑   1   人脑 模型 ， 是持 怀疑 态度 。   基于 进化史 四 脑 分类   本文 结尾 笔者 还 想 加点 料 ， 大脑 一个 简单 进化史 描述 。   人类 宇宙 信息 都有 历史 或者说 进化史 ， 大体 分为 三个 阶段 ：   神经系统 包含 信息 超过 基因 信息 — — 代表 个体 生存 很   皮层 脑的 信息 超过 本能 脑的 信息 — — 代表 程序 式的   语言 文字 信息 超过 大脑 信息 — — 代表 社会 文化 发展 个体 生存 还 。   大脑 中的 神经细胞 某种 内在 统一性 ， 进化 阶段 专门化 四个 ：   一是 本能 脑 ， 死板 程序 式的 ；   二是 皮层 脑 ， 近似 自动 吸收 存储 信息 前期 程序 式的 信息处理 ；   三是 额脑 ， 人 目的 ， 人 目的 制定 出 计划 ；   四是 情绪 脑 ， 目的 效益 性 判断 。   本能 脑 负责 外部 接受 信息 ， 皮层 脑 负责 接受 到的 信息 转化 为额 脑 读 懂 信息 ， 额脑 欲念 世界 。 还 多了 一个 情绪 脑 ， 情绪 脑的 作用 更 快速 执行 。 某种 情绪 激活 ， 一类 信息 会 特别 活跃 ， 做出 指定 对策 ， 执行 。 如果说 三个 调配 信息 ， 情绪 脑 调配 能量 。 在总 能量 情况 下 ， 能量 利用 。   谈论 人的 进化 是会 特别 额脑 概念 。 直立人 发展 皮层 脑 ， 智 人则 发展 额脑 。 正是 额脑将 智 人和 直立人 区别 开来 。 额脑和 语言 宗教 信仰 意志力 人的 社会性 都有 关系 。   额脑和 皮层 脑有 区别 ？ 额脑 皮层 脑 靠近 额部 一块 进化 。 皮层 脑 ， 只 活在 。 接受 信息 ， 存储 ， 还 能做 早期 简单 信息处理 工作 。 人 生活 ， 沉浸 世界 里 。 仅此而已 ， 脑中 唯一 非 现实 世界 创造 做梦 — — 皮层 脑神经 连接 随机 漫游 。   随机 漫游 证明 有用 ， 地给 物种 带来 利益 ， 大脑 极度 兴奋 。 偶尔 意义 漫游 。 （ 直立人 发现 火的 用处 ， 都 靠近 。 ）   而额 脑的 作用 控制 主动 创造 随机 漫游 。 思维 底 向上 ， 上 向下 两种 思考 风格 ， 实际上 都是 主动 随机 漫游 。   智人 日益 进化 额脑 ， 主动 随机 漫游 ， 探求 ， 。 活在 皮层 脑中 — — ， 活在 额 脑中 — — 未来 — — 或者说 一个 创造 主观 世界 之中 。   脚注   独自 一人 思考 ， 外在 ， 否认 智能 。   ↩   杰夫 · 霍金斯 赞同 观点 ， 一种 牛顿 物理学 兴起 机械 还原 主义 错误 。   ↩   意义 上 来讲 ， 蒙 卡斯 尔的 假说 后续 实验 都 支持 大脑 输入 信息 上的 灵活性 ， 都 基于 面对 实验 智能 体 内部 先验 智能 ， 韦恩 是因为 大脑 内部 智能 存储 看和 听的 很多 智能 经验 ， 针对 特定 输入 模式 微小 调整 ， 韦恩 看的 经验 听的 经验 ， 不 舌头 去看 舌头 去 听的 。   ↩   关注点 扫描 序列 很多 因素 相关 ， 文化 相关 。 常说 中国 人 习惯 看 总体性 东西 。 总体 根于 局部 ， 中国 人 扫描 序列 。 想 中国 字 西方 识别 字母 关系 。 西方 几个 字母 辨认 才 单词 ， 中国 字的 识别 则是 一种 笔画 式的 框架 式的 。   ↩   会 预测 错误 ， 好奇心 就被 挑逗 。   ↩",
            "tags":"notes",
            "url":"articles/ren-gong-zhi-neng-de-wei-lai-yue-du-bi-ji.html"
        },
        {
            "title":"requests模块",
            "text":"requests 模块   网络 编程 推荐 requests 模块 ， requests   官网   ， 中文 文档   链接   。 更 信息 请 参看 官方 文档 。   安装   安装 推荐 pip pip3 命令 简便 安装 。   HTTP 协议 支持   几个 函数 一看 名字 HTTP GET ， POST ， PUT DELETE 方法 ， HTTP 冷门 方法 HEAD OPTIONS   requests 模块 类似 head 函数 options 函数 。   函数   第一个 例子 改写 ：   函数 HTTP GET 方法 获取 网页 内容 ，   socket 全局 设置 timeout   ， 设置 一个 timeout 参数 。 提取 文本 内容 简单 调用 text 属性 即可 ， 错误 捕捉 ， 不 赘述 。   params 参数   params 参数 url 关键词 值等 ， 带点 提及 urlencode 函数 功能 ， 语句 简洁 。 类似 例子 演示 ：   search _ engin 原始 url 做 修改 ， 语法 简洁 。   post 函数   函数 ：   data 参数   data 参数 ， POST 方法 传输 数据 ， 字符串 ， 字典 值 ， json 数据 （ json 模块 dumps 函数 ） 。   headers 属性   接受 一个 字典 值 ， 用于 定制 POST 方法 HTTP 请求 头 。   返回 reponse 响应 对象   函数 返回 reponse 对象   url 属性   返回 响应 url   text 属性   返回 响应 文本 内容   encoding 属性   返回 响应 encoding 。   content 属性   返回 响应 二进制 形式 。 利用 属性 下载 文件 。   download _ file   函数 参考   网页   。   用了   stream   =   True   参数 设置 ，   json 方法   响应 json 文件 ， 调用 方法 自动 json 文件 解码 （ 相当于 json 模块 loads ） 。   status _ code 属性   响应 状态 码 ， 404 。   headers 方法   服务器 响应 HTTP 头 信息 。   _ redirects   GET   OPTIONS   POST   PUT   PATCH   DELETE   方法 重 定向 默认 打开   True   HEAD 方法 默认 重 定向 关闭 。   timeout 参数   timeout 参数 控制 ， 超时 则将 抛 出   requests . exceptions . Timeout   异常 。   异常   异常 下 ：   网络 （ ： DNS 查询 失败 、 拒绝 连接 ） 时 ， Requests 会抛 出 一个   ConnectionError   异常 。   罕见 无效 HTTP 响应 时 ， Requests 则会抛 出 一个   HTTPError   异常 。   请求 超时 ， 则抛 出 一个   Timeout   异常 。   请求 超过 设定 重 定向 次数 ， 则会抛 出 一个   TooManyRedirects   异常 。   Requests 显 式抛 出的 异常 都 继承   requests . exceptions . RequestException   。   会话   会话 对象 跨 多个 requests 请求 对象 参数 设置 ， cookies 。   Session 对象 requests   API 方法 ， ， post 。 会话 对象 设置 参数 都会 保留 ， 调用 方法 还 加上 额外 参数 设置 ， 所示 :   SSL 验证   加上   verify = True   目标 主机 SSL 验证 。   响应 体的 content   响应 体 含有 content 却 内容 较多的 情况 ，   Stream = True   来让 推迟 content 下载 ， 而只 获取 header 信息 。   response . content   才 下载 content 。     Response . iter _ content     Response . iter _ lines   方法 控制 工作 流 ，   Response . raw   底层 urllib3 读取 响应 对象 。   response . iter _ content   迭代 读取 响应 体的 content 内容 ， 设置 读取   chunk _ size   。   response . iter _ lines   迭代 读取 响应 体的 content 内容 ， 读 一行 。 行的 内容 小于 chunk _ size ， 不 设置 即可 。   身份 验证   代理   附录   urllib . request 内置 模块   urllib . request 模块 稍微 ， 其是 python 官方 一块 支持 ， 参考 requests 模块 相 官方 模块 更好 一点 。   urlopen 函数   urlopen 函数 urllib 模块 request 子 模块 ， 提供 简单 获取 目标 url 网页 内容 接口 。 一个 简单 例子 所示 ：   刚 就用 一个 稍 显 例子 演示 ， ， 天朝 网络 特色 。 百度 url   http : / / www . baidu .   ， 大部分 情况 下你 都 不用 操心 ， 处在 天朝 网络 大 背景 下 ， 早点 介绍 。 例子 返回 error 种类 间接 GFW 工作 原理 。   google . . cn https 连接 还 工作 （ 暂时 。 。 ） ， 会 慢 ， http 连接 则会 返回 404 错误 ， 天朝 网络 常见 网络 错误 ， 分析 GFW dns 投毒 。 google . 连接 http https 连接 都会 返回 OSError 错误 ， 说的 ： Network     unreachable ， GFW 后缀 google . url 硬件 级别 网络 掐断 。   urlopen 函数 第一个 参数 url 连接 不用 多说 ， 很多 选项 ， 很 参数   timeout   参数 ， socket 套 接字 工作 模式 相关 。 不 加上 timeout 参数 ， 墙的 网站 就会 尝试 程序 陷入 卡死 状态 。 会 介绍   urlretrieve   函数 ， urllib . request 模块 ， 函数 用于 网络 下载 东西 ， 内置 timeout 参数 ， 设置 全局 网络 socket timeout （ socket 模块 setdefaulttimeout 函数 ） ， 全局 timeout 设置 稍微 大 一点 。   套 接字 socket timeout 参数 控制 阻塞 时间 ， 网络 数据 不 传递 完 ， 好比 下载 过程 时间 ， timeout 控制 下载 时间 ， 超过 时间 返回 错误 。 有个 ， 程序 默认 全局 socket timeout 都 设置 10 秒 ， 会 urlretrieve 函数 下载 东西 ， 本身 超过 10 秒 ？ 参看 requests 文档     ， 其对 timeout 有很 解释 ， 说 timeout 仅对 连接 过程 ， 响应 体的 下载 无关 。   网络 上的 情况 ， 网络 异常 回避 话题 。 一个 简单 读取 网页 程序 跟上 异常 捕捉 ， 偏执 追求 程序 健壮 ， 做的 工作 。   返回   urlopen 函数 返回 urllib . response 模块 Response 对象 ， 提供 简单 文件 风格 操作 接口 ，   read ( )   方法 ，   readline ( )   方法 ， 记住 read 返回   bytes 流   。   Response 对象   geturl ( )   方法 ， 返回 url 字符串 ，   info ( )   方法 ， 返回 一个 字典 值 ， 网页 信息 。 请 读者 试验 。   HTTPError URLError 异常   HTTPError URLError 子类 ， URLError OSError 子类 ， OSError 加载 模块 引用 ， 简单 就用 OSError 捕捉 。   ContentTooShortError 异常     urlretrieve   函数 下载 数据 量 少于 预期 数据 量时 返回 错误 。   访问 网页 401   error   路由器 例   192.168 . 1.1     192.168 . 0.1   ， 小 脚本 稍 作 修改 ：   运行 会 返回 ：   返回 401 异常 ， 网页 网页 认证 才能 访问 。 一个 简单 小 脚本 附带 网页 认证 功能 ：   getpass 内置 模块 getpass 函数 提供 终端 输入 密码 不 显示 功能 。   build _ opener ( )   函数 ， 接受 一系列 handler ，   HTTPBasicAuthHandler   创建 一个 handler 实例 ，   add _ password   方法 用户名 密码 属性 ， realm uri 还 不 。 认证 网页 head 。   调用 urllib 子 模块 request   install _ opener   函数 ， 其将 全局性 安装 openr ， urlopen 函数 就会 opener 。 不 做 ， opener . open 单独 打开 一个 response ， 不 推荐 。   加上 代理 功能 来翻 墙   修改 最初 第一个 例子 ， 代理 功能 ， 理论 上 写 ， 效果 ， GFW 很 强大 。 。   修改 url GET 数据   对接 搜索引擎 。   要讲 addGETdata 函数 ， 修改 url 目标 形式 ， 都是 ， 目标 搜索引擎 网站 来了 。   POST 方法 获取 数据   不 太 灵活 ， baidu zhihu 两个 不 ， 采用 POST 方法 ， 默认 中 缀 search ， 不 太 适合 ， 采用 POST 方法 伪装 头部 ， 网站 会 禁止 。 方法 略过 。 修改 url GET 很 简单 。   HTTP 补充 理论 知识   HTTP 协议 支持 四种 方法 ：   GET :   web   service   提取 信息   POST :   web   service   发送 信息   PUT :   web   service   更新 信息   DELETE :   web   service   删除 信息   GET POST 区别   参考   网页   。 谈及 修改 网页 url 获取 资源 ， 实质 HTTP GET 方法 ， GET 方法 信息 放在 url 上的 ， web   service 服务器 会 分析 url ， 客户机 回应 方式 。 POST 方法 不 修改 url ， web   service 服务器 接受 url 上并 额外 信息 ， POST 方法 会 传输 一个 信息 包 。 GET 方法 服务器 互动 采用 GET 方法 ， url 局限性 ， GET 方法 不 ， 是就 服务器 支持 POST 方法 互动 。 PUT DELETE 方法 少 用了 ， 服务器 不 支持 冷门 方法 。   HTTP 返回 错误 码 含义   参考 资料   Foundations     Python   Network   Programming   ， python 网络 编程 基础 ， [ 美 ]   John   Goerzen   著 ， 莫 迟等 译   。   计算机网络   [ 美 ]   特 南鲍 姆   diveintopython3   web   services   一章     中文 网页   。",
            "tags":"python_companion",
            "url":"articles/requests-module.html"
        },
        {
            "title":"SMILE",
            "text":"SMILE   Simplified   molecular   input   line   entry   specification ， 简化 分子 线性 输入 规范 。 最 广 最为 熟知 线性 标记 法了 。 详细 介绍 线性 标记 法的 规则 ， 更 细节 请 参看   网页   。   SMILE 规则 简介   原子   钠 原子 ：   [ Na ]   氯 原子   [ Cl ]   ， 原子 同位素   [ 2H ]   ，   [ 13C ]   。   离子   钠 离子 ：   [ Na + ]   氯 离子 ：   [ Cl - ]   铜 离子 ：   [ Cu + 2 ]     [ Cu ++ ]   。   离子 化合物   点 符号   .   两个 原子 之间 不 成键 ， 氯化钠   [ Na + ] . [ Cl - ]   。   单质   氢气   [ H ] [ H ]   ,   氧气   [ O ] = [ O ]   ， 氮气   [ N ] # [ N ]   ， 原子 外面 默认 单键 连接 ，   =   双键 ，   #   三 键 。   氧气 氮气 简写   O = O     N # N   ， 氢气 不行 。 氢原子 ， 是会 自动 加上 ， 符合 日常 有机化学 结构式 表达 风格 ， 双氧水   表达   OO   即可 。 加氢 规则 不用 多说 ， 学过 有机化学 。 值得一提 方括号 是不 自动 加氢 ，   [ H ]   一个 氢原子 ，   [ OH2 ]   两个 氢原子 ， 是水 分子 。   有机 化合物   讨论 ， 有机 化合物 表达式 能猜 出了 ， ：   CCCC   丁烷 ，   CCO   乙醇 。 分支 ： 一是 有机 化合物 顺序 链 有机化学 中 学习 IUPAC 命名 法来 ； 二是 圆括号 分支 子 基团   ( )   。 异丁烷   CC ( C ) C   ， 新 戊烷   CC ( C ) ( C ) C   ， 醋酸   CC ( = O ) O   ， 双键 。   环的   环己烷   C1CCCCC1   , 核心 理念 编号 原子 连键 。 化合物 萘 ：   SMILES 表达 ：   涉及 萘 IUPAC 编号 ， 时针 右上 1 ， 4 跳 5 ， 再 678 ， 两个 碳 跳 ， 知识 冷门 。 数字 1 2 互换 ， 任意 。   例子 还 涉及 一个 知识点 ， 芳香 性的 原子 （ 苯环 上的 C ， 杂环 原子 ONS ） 都要 小写 。 苯你 写了 ：   c1ccccc1   。   立体 化学   双键 两端   / C = C /     \\ C = C \\   反 ( trans ) 双键 ，     / C = C \\     \\ C = C /   ( cis ) 。   手性 还 很 熟悉 ， 暂时 略过 。   isometric _ smile   isomeric _ smile   说的   unique   SMILE   唯一 smile ， 加上 同位素 手性的 。 正是 唯一性 ， 化学 信息 数据库 isometric _ smile 化学 分子 唯一 ID 。   参考 资料   维基 百科 SMILES   open   smiles   官方 文档",
            "tags":"chemistry",
            "url":"articles/smile.html"
        },
        {
            "title":"巫师1讲了一个什么故事",
            "text":"巫师 1 一个 游戏 快 过时 ， 巫师 1 剧情 回想 真的 很少 游戏 与之 比肩 ， 剧情 做 得比 巫师 3 都 还好 。 巫师 1 究竟 讲了 一个 故事 ， 越玩 越引 人 入深 不能自拔 。   故事 开篇 ， 承继 巫师 小说 系列 ， 白狼 稻草 叉捅 半死不活 失 忆了 维 瑟 米尔 艾 斯 卡尔 救走 拖 回到 凯尔 莫罕 。   经典 失忆 桥段 算不上 一个 亮点 ， 很多 游戏 二代 三代 都会 主角 失 忆啊 ， 主角 重做 设定 ， 游戏 主角 一个 零 慢慢 变强 过程 ， 巫师 1 一个 游戏 一代 做 承继 小说 剧情 。   正 游戏 要素 ， 主角 技能 操作 炼金术 实际上 剧情 关系 不 大 ， 游戏 游戏 性而 设计 ， 简单 略过 不 谈了 。   巫师 1 剧情 是从 一群 人 围攻 凯尔 莫罕 ， 凯尔 莫罕 实际上 就被 围攻 ， 凯尔 莫 罕的 建筑设计 上 很多 地方 都 保留 一种 残破 迹象 。 群 人 围攻 ， 群 人是 ？ 围攻 凯尔 莫罕 ， 目的 ？   特 莉丝 对话 为首 一个 很 强大 术士 名叫 萨 弗拉 ， 会 群 人是 火 蜥蜴 帮 。 萨 弗拉 召唤 一个 很大 巨 魔 螳螂 ， 很快 突破 凯尔 莫 罕的 大门 。 特 莉丝 很 困惑 ， 凯尔 莫罕 价值 东西 ， 猎 魔 对特 莉丝 隐瞒 ， 进攻者 们的 目的地 凯尔 莫 罕的 地下 实验室 。 实验室 秘密 物品 ， 秘密 物品 是和 猎 魔 人的 变异 ， 会 火 蜥蜴 帮 利用 制造 一种 新的 变种 人 。   序章 基本上 一个 引子 ， 剧情 上 留下 更 多的 疑问 ， 剧情 发展 最终 指向 基本上 围绕 引子 展开 ， 疑问 。   猎 魔 人的 大本营 人 攻打 ， 还 能忍 ， 接下来 去 追查 ， 丢失 东西 找 回来 。   故事 第一章 维吉玛的 郊外 开篇 一个 男孩 夏 妮被 一群 魔兽 追杀 ， 三个 角色 剧情 上都 ， 男孩 叫亚汶 ， 基本上 贯穿 剧情 最 核心 人物 ， 种种 迹象 来看 ， 亚汶 大反 派 。 游戏 剧情 来看 ， 杰洛特 和亚汶的 对话 影响 杰洛特 大反 派 — — 蔷薇 玫瑰 骑士团 大师 — — 对话 。 游戏 说是 ， 基本上 假定 ， ， 用玄 玄的 时空 穿越 都 解释 。 大反 派 大师 早就 ， 才是 杰洛特 亚汶 ， 亚汶和 大师 ， 亚汶 大师 ， 大师 亚汶 ， 都 不可思议 能力 ， 作者 解释 ， 读者 阅读 中也 感受 ， 却 解释 。 作者 剧情 设计 上很 超 一点 ， 一点 ， 一个 主观 世界 架构 ， 感知 外围 验证 理解 是很 。 剧情 发展 走向 蒙上 一种 神秘感 吸引 人的 感觉 。   第二个 角色 夏 妮是 都 懂得 ， 杰洛特 老朋友 ， 剧情 发展 中也 扮演 角色 。 第三个 角色 魔兽 ， 魔兽 词条 实际上 说的 很 ， 魔兽 人心 腐化 堕落 之地 ， 小 村落 会 一点点 揭开 表面 宁静 村落 内在 人心 腐化 堕落 。 游戏 杰洛特 章 再 回到 村落 。 游戏 设计 上的 简化 ， 几章 来看 ， 一章 内的 几个 地图 切换 ， 更 解释 ： 杰洛特 再也 不想 回到 恶心 人的 地方 。   该作 剧情 设计 多么 好了 ， 游戏 正式 第一章 第一个 画面 透露 出了 多的 信息 。 第一章 意义 上 来讲 过多的 推进 主线 ， 追查 火 蜥蜴 帮 。 本章 找到 火 蜥蜴 帮 村落 一个 小的 巢穴 ， 信息 很多 。 是因为 玩家 还 一个 慢慢 熟悉 游戏 操作 过程 ， 不 马上 推动 主线 带来 玩家 情绪 上的 紧张 感 ； 第二 叙述 上的 起承转合 ， 正 处在 一个 承接 引子 阶段 ， 不 太多 突发 事件 ； 是因为 调查 角度 入手 太 多的 进展 。   第一章 过多的 推进 主线 ， 第一章 很多 环境 渲染 上 玩家 世界 感知 。 引入 一个 猎 魔人 贝 加尔 ， 贝连 加尔 变种 猎 魔 人的 厌恶 反思 提高 游戏 剧情 深度 ； 引入 人类 非 人类 种族 冲突 ； 引入 了亚汶 神奇 男孩 ； 引入 永恒 之火 ， 蔷薇 玫瑰 骑士团 。   亚汶 值得 ， 游戏 选择 上 杰洛特 选择 亚汶 交给 永恒 火的 教士 ， 蔷薇 玫瑰 骑士团 ， 永恒 火的 武装 组织 ， 武装 组织 提及 大师 创建 ， 假定 ， 剧情 作者 假设 选项 ， 亚汶在 永恒 火的 慢慢 抚养 下 成长 永恒 火的 蔷薇 玫瑰 骑士团 大师 。 称之为 bug ， 作者 明说 大师 亚汶 ， 背后 之间 千丝万缕 ， 大师 亚汶 佩戴 护身符 ， 亚汶和 希 里 上古 血的 能力 ， 穿越 时空 能力 。 亚汶和 希 里 都 末世 预言 ， 大师 实际上 做的 事情 度过 末世 ， 最终 是希 里 消灭 末世 冰霜 。 巫师 3 希 里的 穿越 时空 能力 局限 在了 空间 穿梭 ， 时间 穿越 概念 。 欣赏 。 强行 要说 亚汶 大师 ， 亚汶的 时间 穿越 是最 bug 那种 时间 穿越 ， 时间 穿越 过程 中 长大 ， 一个 时 空中 多种 时间 线 形态 。 好在 作者 说亚汶 大师 ， 归于 神秘 色彩 。   第一章 女巫 角色 是很 ， 正 雪崩 之下 ， 雪花 无辜 。 细心 去看 ， 女巫 雅比 盖尔 角色 实际上 很多 地方 事情 做 得不 地道 ， 明明 人买 药水 是要 干什么 ， ， 只 负责 卖 药水 ； 很多 地方 引诱 利用 杰洛特 。 最终 选择 保护 女巫 ， 魔兽 杀了 ， 全村 人给 屠 。 做 ， 想起 贯穿 巫师 小说 最 经典 对白 ：   Evil     Evil .   Lesser ,   greater ,   middling …   Makes     difference .   The   degree     arbitary .   The   definition ' s   blurred .   If   I ' m     choose       evil     …   I ' d       choose     . \"   最终 杰洛特 玩家 选择 ， 没 办法 置身 之外 ， 再 做 一个 巴尔 维坎的 屠夫 。   第一章 主线 实际上 杀 魔兽 ， 围绕 着杀 魔兽 揭开 村子 不为人知 黑暗 面 。 最终 杰洛特 带着 内心 厌恶 一丝 线索 了维吉玛城 。   第二章 设计 很 有意思 ， 单独 来看 都是 一个 不错 侦探 故事 ， 杰洛特 主线 去 追查 火 蜥蜴 帮 头目 ， 找到 侦探 雷蒙 德 帮忙 ， 雷蒙 德 列出 一大 串的 嫌疑犯 清单 ， 置身 在维吉玛城的 势力 ， 游走 奔波 ， 最终 发现 竟然 远在天边 近在眼前 雷蒙 德 找的 火 蜥蜴 帮 头目 扎 。 游戏 年头 ， 前前后后 跑 路 人 厌倦 ， 剧情 来说 ， 不 看 攻略 ， 不 看 对白 ， 玩家 怀疑 错人 付出 代价 ， 设定 很 有意思 。   第二章 第三章 再合 讨论 ， 本来 就在 一个 大的 地图 上 ， 再 单独 去 分析 子 ， 会 发现 人物 设计 性格 鲜明 ， 最 印象 深刻 文森 特 · 梅斯 卡门 故事 ， 本来 文森 特 · 梅斯 城镇 守卫 一种 严肃 死板 感觉 ， 刚 接触 卡门 一个 简单 保护 妓女 免遭 骚扰 故事 ， 游戏 设计 一两个 完 。 没想到 到了 文森 特和 卡门 一段 地下 情 ， 一个 城镇 守卫 一个 高等 妓女 ， 。 没想到 文森 特 竟然 一个 狼 人 ， 剧情 发展 ， 杰洛特 面临 一个 两难 境地 ， 猎 魔 人的 天职 杀掉 怪物 狼 人 ， 卡门 竟然 不 嫌弃 文森 特是 狼 人 ， 希望 解除 狼 人 诅咒 。 杰洛特 帮 卡门 忙 【 奖励 繁琐 程度 真的 投入 回报 比例 ， 想 玩家 推进 内心 正义感 善心 ， 游戏 乐趣 】 来回 奔波 ， 终于 文森 特和 卡门 放下 成见 接受 。 故事 单独 一个 短篇小说 都是 不错 有趣 ， 留下 很 深的 印象 。   第二章 第三章 主线 推进 很多 ， 最终 第三章 结尾 会 杀掉 二号 反派 【 序章 得来 感觉 】 教授 。 还 会 获知 公主 雅坦也 参与 。 松鼠 党和 骑士团 之间 矛盾 跃然纸上 ， 分支 是很 有趣 不 一一 谈论 。   剧情 到了 第四章 会 发现 主线 推进 变 慢了 ， 故事 设计 起承转合 原则 来的 ， 先 推进 主线 ， 氛围 热烈 ， 会到 一个 平缓 期 。 第四章 平缓 期里 ， 几个 关键 东西 ： 是亚汶 ， 第四章 和亚汶的 对话 影响 剧情 ， 简单 来说 亚汶 大师 ， 和亚汶的 对话 会 影响 大师 对话 。 二是 松鼠 党 绑架 了亚汶 ， 接受 骑士团 仇恨 松鼠 党 ， 松鼠 党 游戏 剧情 事件 角色 变得 越来越 ， 第五章 游戏 剧情 大 背景 — — 松鼠 党 作乱 。 杰洛特 面对 面对 松鼠 党的 ， 再 ， 选择 玩家 手中 ， 松鼠 党和 松鼠 党的 对立面 都 说 错 ， 观点 ， 松鼠 党太 过于 激进 ， 一刻 某种 感情 上你 不得不 同情 人 ， 是在 第四章 山洞 里你 见到 松鼠 党的 悲惨 生活 现状 。   第五章 剧情 解决 头号 大反 派 扎和 解决 公主 雅坦的 麻烦 。 扎 没什么 好说 ， 剧情 最 都 头号 大反 派 ， 第五章 最终 才 最终 大 BOSS 骑士团 大师 。 公主 雅坦 ， 人物 个性 上 来说 ， 公主 雅坦在 政治 上 喜欢 胡作非为 是很 ， 作者 剧情 上 引入 公主 雅坦更 多的 一种 回 温 ， 篇 短篇小说 《 逐恶 回 温 。   最终 章 直面 最终 大 BOSS 大师 ， 这本 意外 ， 大部分 游戏 最高潮 都会 面临 一个 大反 派 ， 巫师 1 最终 章有 两个 点 设计 好 ： 是和 亚汶 世界 上 很多 事情 讨论 最终 影响 大反 派的 世界观 ， 游戏 整体性 提升 一个 档次 ， 玩家 游戏 游玩 过程 思索 重温 。 二是 杰洛特 登上 山顶 面对 大 BOSS ， 会 一路 过的 人来 ， 玩家 内心 温暖 ， 玩家 游戏 游玩 过程 重温 。   说 一个 游戏 剧情 起承转合 最终 会 迎来 一个 高潮 ， 高潮 过后 ， 玩家 久久 释怀 ， 游戏 玩完 好像 内心 留下来 点 。 巫师 1 无疑 上做 好 。 游戏 高潮 ， 登山 顶和 老朋友 都来 他和 最终 大 BOSS 段 。 实际上 巫师 3 狂 猎的 还 会 ， 设计 真的 好 ， 游戏 整体性 更 强 ， 游戏 剧情 游玩 体验 都 融为一体 。   巫师 1 剧情 设计 上 优秀 出色 ， 有人 说 CDPROJECT 出道 巅峰 认同 。 本文 浅尝辄止 讨论 ， 笔者 游玩 过程 回味 。",
            "tags":"game",
            "url":"articles/wu-shi-1jiang-liao-yi-ge-shi-yao-gu-shi.html"
        },
        {
            "title":"wxpython学习笔记",
            "text":"WARNING   警告 ， 文档 归档 ， 缺少 新的 内容 ， 旧的 内容 错误 ， 推荐 pyside2 GUI 编程 。 GUI 编程 请 参看   pyside2 学习 笔记   【 2019 】   。   wxpython 基础   本文 假设 读者 熟悉 一种 桌面 图形 开发 ， 比如说 PyQt ， 图形 桌面 开发 概念 读者 熟悉 ， 言简意赅 地就 wxpython 相关 特色 核心 概念 ， 针对 讨论 。   说下 安装 ， wxpython pyqt5 都 ， 都 pip 安装 ， linux 下和 windows 都 安装 。   Sizer . Add 参数 详解   Sizer . Add ( item ,   0   ,   wx . ALIGN _ RIGHT ,   0 )   右 对齐 布局 ， 第一个 参数 proportion 详细 讨论 ， 第三个 参数 设置 border 宽度 。   Sizer . Add ( item ,   0 ,   wx . ALIGN _ CENTER ,   0 )   居中 布局   Sizer . Add ( item ,   0 ,   wx . EXPAND ,   0 )   扩展 布局 ， （ vertical   sizer 水平 扩展 ； horizontal   sizer 垂直 扩展 ）   proportion 参数   默认 0 ， 0 不 缩放 ， 估计 设置 父 窗体 Layout ， 子窗 体将 自动 Layout 。 设置 整数 则是 某种 缩放 比的 。 参考 资料 谈了 缩放 比的 ， 暂时 很 关心 。 讨论 原文 ：   proportion 参数 是被 wx . BoxSizer 用作 因数 去 sizer 大小 改变 时 ， sizer 调整 孩子 尺寸 。 水平 方向 调整 sizer ， stretch 因数 孩子 水平 尺寸 改变 （ 坚 直 方向 改变 box   sizer 基于 第三个 参数 ） 。   0 不 缩放 ， 1 父 窗 体缩 放而 缩放 。   Flag 参数   这块 东西 ， Flag 较多 ， 建议 沉下 心来 学 ， 会 频繁 用到 ：   控制 border   扩展   对齐   举 组合 例子 ：   Frame 样式   wx . FRAME _ NO _ TASKBAR   栏   wx . FRAME _ SHAPED   非 矩形 框架   wx . FRAME _ TOOL _ WINDOW   wx . FRAME _ FLOAT _ ON _ PARENT   框架 漂浮 父 窗体 之上   wx . STAY _ ON _ TOP   总 最 上   wx . SIMPLE _ BORDER   装饰 边框   布局 太 布局   手写 布局 代码 ， 肯定 Sizer ， BoxSizer 最 常用 ， 特别 布局 BoxSizer ， 横竖 拼接 加上 Add 参数 调配 ， 基本上 都是 调 。 panel 类 都写 上了 一个   . box   惯例 ， 情况 下会 Sizer ， GridSizer ， GridSizer 放在 BoxSizer ， 不 大 。 惯例 ， 引用 面板 ， 想到 主 Sizer ， panel . box 即可 ， 题外 话了 。   FlexGridSizer   FlexGridSizer 布局 页面 分成 二维 表格 ， 表格 元素 高度 ， 宽度 不 （ GridSizer ） 。   rows   行   cols   列   vgap   垂直 加点 空间   hgap   水平 加点 空间   wxpython ID   window   identifiers   整数   窗 体在 系统 中的 唯一性 ， wxpython 中 定义 窗 体的 ID ：   窗体 ID 定义   赋值 一个 正 整数 ， 不 推荐   wx . NewID ( )   传递 wx . ID _ ANY     - 1   窗体 构造 器   笔者 推荐 读者 名字 定义 定位 窗体 ， 代码 更 可读性 。   标准 ID   官方 文档 标准 ID 列表   ID 查找 窗体   1 、 wx . FindWindowById ( id ,   parent = None )   2 、 wx . FindWindowByName ( ,   parent = None )   3 、 wx . FindWindowByLabel ( label ,   parent = None )   窗 体内 调用   . FindWindowById   则是 窗 体内 查找 ， 找到 第一个 。   名字 查找 窗体   笔者 推荐 读者 写 大型 GUI 程序 几个 核心 窗 体都 定义 好 唯一 名字 （ 大部分 窗 体都 接受 一个 可选 参数 ） ， 查找 。 编程 会 带来 很大 便利 。   理解 wxpython 中的 事件   event   wx . Button 上 鼠标 单击 触发 一个   wx . EVT _ BUTTON   事件 ， event 定义 想要 绑定 事件 。   handler   处理器   source   不 指定 ， 父 窗口 多个 触发 源 ， 比如说 多个 按钮 ， 指定 下 。   id   id 定义 事件 触发 源 ， 情况 下 id 来会 更 些 ， id2 id 一串 连续 窗体 。   wxpython 事件 处理过程   事件 触发 >   获取 事件 触发 对象   检查 事件 触发 对象 处理事件 （   SetEvtHandlerEnabled ( boolean )   禁用 窗体 处理事件 ） 【 UI 层面 Disable   Enable 禁用 窗 体和 用户 交互 ， 间接 接受 到的 事件 ， PostEvent 】   event . Skip ( )   方法 事件 跳 过了 ， 理解 错误 ， 更 准确 说法   事件   。   事件 触发 链中 ， 方法 ， 事件 将会 传播 ， 事件 终止 。   目标 事件   传播 propagate   ，   还 会 触发 父 容器 事件 ， App ， 最 顶层 结束 传播 。 【 默认 情况 ， wx . CommandEvent 子类的 实例 向上 展开 容器 级 。 事件 都不 传播 。 】 【 Button 单击 CommandEvent ， 鼠标 浮动 上和 离开 都是 MouseEvent 】   习题 1   请 读者 解释 写法 ， 鼠标 浮动 上和 离开 事件 只能 定向 . button 。   按钮 点击 传播 ， 本窗 体上 触发 按钮 事件 ， 本窗 体上 找 方法   OnButtonClick   ， 找到 方法 ， 执行 ， 执行 过程 中 Skip 方法 ， 事件 到此 结束 ； ， 会试 向上 传播 ， 顶层 窗体 。 向上 传播 过程 传播 事件 ， 本窗 体的 父 窗 体也 触发 按钮 事件 ， 试着 实行   OnButtonClick   方法 。   鼠标 是不 传播 事件 ， 指明 按钮 绑定 。   . button . Bind   过程 执行 初始 挂在 方法 ， 找 不到 就抛 出 异常 。   大体 ， 读者 不 明白 ， 请 阅读   wxpython     action   本书 第三章 ， 这部分 ， 本书 讲的 很 好 。   习题 2   一个 按钮 点击 事件 会 触发 两个 动作 。   简单 来说 写 两个   . button . Bind ( )   语句 绑定 两个 函数 ， 说的 ， 两个 函数 都要 跟上   event . Skip ( )   。   手动 触发 事件   手动 触发 一个 事件 会省下 很多 代码 。   获取 事件 触发 对象   常见 wx . Event 子类   wx . CloseEvent   frame 框架 关闭 时 触发   wx . CommandEvent   按钮 单击   菜单 选择     wx . KeyEvent   按键 事件   wx . MouseEvent   鼠标 事件   wx . PaintEvent   窗体 重 画时 触发   wx . SizeEvent   窗体 大小 布局 改变 时 触发   wx . TimerEvent   wx . Timer 类 创建 定时 事件   按钮 三 事件   按钮 GUI 设计 中是 频率 高的 一个 组件 ， 绑定 最 常用 三个 事件 ：   . Bind ( wx . EVT _ BUTTON ,   . OnButtonClick ,   . button )   绑定 按钮 事件   . button . Bind ( wx . EVT _ ENTER _ WINDOW ,   . OnEnterWindow )   绑定 鼠标 位于 其上 事件   . button . Bind ( wx . EVT _ LEAVE _ WINDOW ,   . OnLeaveWindow )   绑定 鼠标 离开 事件   调用 Layout 方法   动态 调整 GUI 元素 ， 会 网上 例子 会 调用   Layout 方法 ， 发现 不 调用 影响 不 大 ， 发现 不 调用 页面 会 变形 ， 到底 调用 Layout 方法 。 请 参看   篇 文章   。   StaticText     SetLable   操作 ， Layout 下   sizer 显示 隐藏 面板 元素 Layout   下 。   窗体 触发   EVT _ SIZE   事件 ， wxpython 会 自动 Layout 重排 。 重排 父 窗 体的 sizer 会 自动 Layout ， 父 窗 体的 子窗 体也 会 重排 操作 ， 子窗 体不 重排 ， 接受   EVT _ SIZE   事件 ， 调用 Layout 方法 。 StaticText   更改 Layout ， 调用 其父 窗 体的 Layout ， StaticText 自动 调整 。     网页   介绍 ， 加上 一点 实践 经验 ， 不 推荐   SetSizerAndFit   方法 ， 体验   SetSizer   工作 ， 加上 Fit 会给 布局 带来 困扰 ， ScrolledPanel Fit 会 发生 截断 。   总的 原则 试验 确实 可行 ：   SetSizer   发现 不 对劲 ， Layout   Layout 还 不 对劲 ， 布局 ， 情况 下你 更改 数据 ， Refresh   TODO   Layout     Refresh   区别   一个 ， Refresh 才有 ， 重 画的 透明 组件 再 设置 标签 ， Refresh 才会 再次 重画 动作 ， 值得 读者 。 子 面板 Layout 会 自动 Refresh 。   ScrolledPanel   特别 值得一提的是   ScrolledPanel   内容 发生 变动 ， Layout 之外 还 加上 ：   实践 发现 内容 变动 都 加上 句 ， 侧边 滚动 条会 丢失 ， 内容 会被 隐藏 。   设置 背景 颜色 字体 颜色   wxpython 窗体 对象 （ 两个 方法 是挂 wx . Window 上的 ） ，   SetBackgroundColour   设置 背景 颜色 ，   SetForegroundColour   设置 前景 颜色 ， 前景 颜色 字体 颜色 。   动态 调成 面板 背景 颜色 ， 记得 调用 Refresh 方法 激活 重画 事件 。   图片 转成 python 编码   编写 一个 python 脚本 ：   调用 wxpython 提供 工具   img2py   ， 输出 images . py   图片 对象 方法 ：   最 常用   GetBitmap   获取 Bitmap 图片 对象 。   后台   wxpython 后台 推荐   wx . CallAfter     wx . CallLater   调用 。 python 内置 多线程 会让 界面 奇怪 。   Timer   wxpython 计时器 挂 很 。   动态 组件 切换   boxsizer 挂载 面板 ， 隐藏 面板 ， 显示 初始 想要 显示 panel 。 Add ,   Show   Hide   方法 操作 ， Layout ， 基本功 。   值得一提的是 ， panel Layout ， 多个 panel 切换 父 panel 子 panel size 都是 ， 子 panel size 大小 ， 动态 切换 更好 效果 ， 调用 父 panel Layout 。   子 Panel 重写   参数 变化 ， 子 panel 重写 ， 推荐 box Replace 方法 ：   大体 过程 上 ， 切换 推荐 采用 写法 ：   隐藏 box 包含 子 面板 ：   显示 子 面板   . box . Show ( . category _ sp1 _ panel )   记得 调用 父 面板 级别 Layout 。   全局 捕捉 异常   过程 很 简单 ， python   sys . excepthook   重载   MyExceptionHook   函数 ， 异常 交给 。   验证 器   验证 器最 对话框 数据 格式 限定 ， 发现 验证 器 有用 ， 对话框 管理   . data   做的 工作 交给 验证 器来 做 ， 验证 器这 一块 早 接触 。   验证 器先 定义 一个 验证 器类 ， 继承   wx . Validator   。 定义 一个   Clone   方法 ， 返回 验证 器 副本 。   验证 器 第一个 功能 验证 数据 ， 验证 器类 中 定义   Validate   方法 做 。 方法 默认 还 传递 一个   win 参数 进来 ， win ， 比如说 验证 器类 挂载 TextCtrl 上的 ， TextCtrl 实例 win ， 引用 win 数据 。     Validate   方法 返回   True   ， 验证 成功 ， 返回   False ， 验证 失败 。 再 返回 还 做 事情 。   验证 器类 还 定义   TransferToWindow   方法 ， 验证 器 启动 动作 ； 定义   TransferFromWindow   方法 验证 器 验证 结束 后的 动作 。 两个 函数 都 简单   return   True   ， 都 不用 做 ， 两个 方法 去来 维护 一个 对话框 维护 全局 数据 集 。 还 没 接触 验证 器的 ， 写了 几十 行 代码 维护 一个 类似 data 数据 集 ， 对话框 控 件稍 变动 ， 就要 触发 一个 事件 数据 同步 动作 。 验证 器的 方案 优雅 。   Dialog 几个 控件 ， 几个 控件 validator 独立 ， 写 验证 器类的 统一 一个 类 ， 运行 时有 好几个 验证 器 作用 。 请看 例子 ：   例子 跟着 wxpython     action   书上 例子 优化 ， 书上 例子 很 好地 解决 dialog 数据 传输 ， 最 神奇 ， 原 对话框   . data   属性 发生 更改 ， 确认   TransferFromWindow     . data   指的 验证 器 ， 。 调用 dlg data 数据 ， 没想到 修改 数据 。 ， Why     works   .   一个 初步 猜测 wxpython 验证 器 聪明 地将 传输   . data   数据 进来 记住 ， 只能 做 解释 。   试验 发现 面板 层次 稍微 点 ， . data 操作 风格 不行 ， 验证 器要 管理 多个 数据 做的 。 验证 器 多了 ， 数据 传输 ， 到母 面板 ， 提取 数据 ， 都是 小 细节 。   代码 一个 演示 功能 ， 读者 写 代码 寄托 神奇 魔法 ， 明晰 指定 数据 ， 去 。   wxpython asyncio 集成   小节 参考   代码 文件   。 看了 ， 空闲 事件 Timer 事件 都 触发 ， 重复 得很 ， 选择 一个 Timer 触发 即可 。   看了 asyncio 相关 文档 ， stop 事件 循环 中的 丢失 ， 总的 效果 asyncio   事件 循环 后台 运行 。   利用 进程 间 通信 启动 一个   讲了 wxpython 确保 一个 程序 实例 运行 ， 利用   wx . SingleInstanceChecker   类 ， 很 简单 。   那种 效果 ， 下 点击 图标 ， 弹出 原 窗体 ， 第二次 启动 尝试 悄然 结束 即可 。   仔细 分析 查了 资料 发现 ， 实际上 一个 简单 进程 间 通信 。 第二次 启动 进程 ， 发送 一个 简单 消息 给原 效果 。   进程 间 通信 原理 发现 这块 还 挺 ， windows win32   API 操作 ， 不 熟悉 ， 套 接字 做 进程 间 通信 ， 说白了 开了 小的 server 监听 端口 client 请求 。 方式 兼容性 ， 总 感觉 杀鸡 用牛 刀了 ， 想发 简单 信号 即可 ， python signal 模块 windows 兼容性 不好 ， windows win32 操作 麻烦 还 不 个好 方案 ， 写个 简单 套 接字 。   好在 asyncio 事件 循环 提及 ， 挂载 上了 ， 也就是说 只 利用 asyncio 模块 教程 写 个最 简单 套 接字 发送 一个 简单 消息 即可 。   大概 代码 如上 示 ， 效果 还 挺 不错 。   基本上 只用 到了 asyncio 套 接字 编程 最 基础 知识 ， 有个 ， 还 试探 ： 道理 只   . eventloop . create _ task   挂 即可 ， 而不   run _ _ complete   ， 提及 wxpython asyncio 集成 ， 要稍 asyncio 事件 循环 才 启动 ， 计时器 才刚 创建 ， 没 试过 ， 。   程序 触发 事件   wxpython 程序 触发 事件 ， 所示 ：   核心   wx . PostEvent   方法 ， 值得一提的是 ， 方法 触发 事件 调用     找到 目标 button ，   GetId   方法 用的 。   TextCtrl 代码 改变 文本   TextCtrl 代码 改变 文本 方法 ：   AppendText   尾部 添加 文本   Clear   EmulateKeyPress   一个 按键 事件   SetInsertionPoint   设置 插入 点   SetValue   WriteText   插入 点 插入 文本   Remove   删除 指定 文本   Replace   替换 指定 文本   对接 系统 剪贴 板   文本 放入 剪贴 板   剪贴 板中 取 内容   清空 剪贴 板的 动作 ：   Clear   方法 。   ScrolledPanel   带 滚动 条的 面板 ， 值得 额外 一提 东西 ：   SetupScrolling   方法 很 ， 谈到 ， 带 滚动 条的 面板 内容 发生 变动 ，   Layout   之外 ， 还 加上   SetupScrolling   一句 。   选项 很 ：   scroll _ x   设置 False   横向 滚动 条不 显示   scroll _ y   设置 False   则竖 滚动 条不 显示   rate _ x   最小 一步 滚动 距离   rate _ y   最小 一步 竖 滚动 距离 ，   scroolIntoView   滚动 尽可能 子 面板 合适 显示     Scroll   方法 程序 滚动 。   wxpython 鼠标 图案   面板 ， 继承 Window 类都   SetCursor   方法 设置 鼠标 图形   默认 ：   wx . CURSOR _ ARROW   ， 常用 显示 点击 手 型是   wx . CURSOR _ HAND   ， ：   wx . CURSOR _ ARROWWAIT   只能 windows 下 ， 繁忙 光标   wx . CURSOR _ BLANK   不 光标   wx . CURSOR _ WAIT   沙漏 等待 光标   wx . CURSOR _ WATCH   手表 等待 光标   wx . CURSOR _ SPRAYCAN   绘图 光标   wx . CURSOR _ SIZING   尺寸 调整 时 光标 ， 四个 指向   wx . CURSOR _ SIZEWE   水平 尺寸 调整 光标 ， 指向   wx . CURSOR _ SIZENS   垂直 尺寸 调整 光标 ， 指向   wx . CURSOR _ RIGHT _ BUTTON   右 按键 下 光标   wx . CURSOR _ PENCIL   钢笔 样 光标   wx . CURSOR _ PAINT _ BRUSH   画 刷样 光标 ， 绘图 程序 中   wx . CURSOR _ MAGNIFIER   放大镜 ， 缩放   wx . CURSOR _ MIDDLE _ BUTTON   一个 按键 下的 鼠标   还 定义 光标 图案 ：   wx . CursorFromImage ( image )   ComboBox 内容 修改   参考     。   ComboBox 官方 手册 上找 不到 相关 方法 ， ComboBox 继承   ItemContainer   ， 调用 方法 ， 动态 修改 ComboBox 内容 。   Clear   清空   Append   附加   Delete ( ,   n )   删除   Insert   插入   Set ( ,   items )   替换   定义 对话框   情况 下 继承   SizedDialog   会很 ：   继承   wx . Dialog   ， 像自 定义 panel 做 ， 添加 button 推荐 标准 ID ， 类似 关闭 对话框 判断 点击 按钮 ：   列表 控件   列表 控件 支持 三种 模式 ：   style = wx . LC _ ICON   图标 模式 ， 大概 看上去 windows 上的 文件 浏览 样子   style = wx . LC _ SMALL _ ICON   小 图标 模式   style = wx . LC _ LIST   列表 模式   类似 于小 图标 模式 ， 是按 列 排列   style = wx . LC _ REPORT   报告 模式   类似 excel 表单 那种   更 详尽 查阅 文档 ， item 添加 Panel 控件 ， 建议 读者 下   wx . lib . agw . ultimatelistctrl . UltimateListCtrl   ， 读者 一列 排序 ， 下   wx . lib . mixins . listctrl . ColumnSorterMixin   item   textctrl   输入 ， 下   wx . lib . mixins . listctrl . TextEditMixin   ， mixin ，   ultimatelistctrl 没 mixin 。   网格 控件   网格 控件   wx . grid . Grid   感觉 列表 控件 ， 涉及 到的 方法 很多 ， 建议 查阅 文档 。   树 型控 件   TreeCtrl   显示 层次 数据 ， 目录 结构 时 用到 。   HTMLWindow   文本 显示 需求 ， HTMLWindow 用一 种类 html 标记 语言 渲染 而成 ， 底层 用的 浏览器 渲染 ， wxpython 了的 渲染 ， 简单 来说 wxpython 种类 html 标记 语言 一种 快速 定义 文本 显示 界面 功能 。   wxpython 还 提供 html2 包 ， 其是 利用 浏览器 底层 渲染 ， 显示 ， 更 接近 浏览器 显示 效果 。   DateTime python datetime 对象 互转   一节 参考   python   cook   book     # 12   recipe 。 记录 下 ， 有时候 会 用到 ：   boxsizer 两个 值得 方法   AddSpacer   作用 增加 一段 固定 空白 距离 ， boxsizer 覆 写了 sizer AddSpacer 方法 ， 横向 竖 混淆 。   AddStretchSpacer   方法 sizer ， boxsizer 调用 ， 还 没 。 方法 方法 区别 增加 一段 可缩 放的 空白 距离 ， 其在 Qt 一段 弹簧 样的 东西 。 利用 缩放器 很 空间 居中 比例 位置 调整 。   wxpython 编码 风格 推荐           import   *   引入 语法 。     size = ( 500 , 400 ) ， 不 推荐   wx . Size   ， 提法   网页   说的 ， 会 争议 性 ， 说 简单 好 。 点就 x ,   y 两个 值 ， 来说 ， 确实 数组 对会 点 ， 编码 ， size 参数 实际上 指明 第一个 参数 x ， 第二个 参数 y 。   凡是 面板 都 子类 化 ， 面板 类的 控件 面板 管理 。 说要 做 ， 做的 好处 很多 。 面板 类的 控 件可 管理 ， 后续 管理 操作 编码 带来 很多 便利 ， 面板 子类 化是 大型 GUI 程序 道路 。   多个 按钮 推荐   StdDialogButtonSizer   ，   TODO   ， 体验 再 讨论 几句 。   代码 重构 ： 思考 视图 操作 分离   说 编程 世界 公认 理念 ， DRY 原则 。   编码 中 wxpython 额外 风格 推荐 。   DIY 原则 ， ：   数据 代码 分离 ， 数据 何种 方式 加载 进来 ， 都是 完善 小 细节 ， GUI 编码 特殊性 ， 就要 数据 代码 分离 。   GUI 程序 编码 复杂度 提高 ， 请 立刻 重构 代码 ， 面向对象 风格 写法 ， GUI 程序 内在 面向对象 思想 是很 融洽 ， 程序代码 很 简单 不用 上 面向对象 ， 稍微 写 几天 ， 就要 第一次 重构 。 请 视图 层 结构 特色 ， 编写 gui 模块 类的 结构 层次 。   说到 数据 代码 分离 ， GUI 很多 变量 数据 实际上 常量 数据 ， 建议 发生 变动 常量 数据 都 再开 模块 统一 管理 。 一个 不错 风格 常量 数据 包括 变量 数据 配置 数据 最终 都在 一个 全局 变量 模块 中 汇总 。 代码 中的 编写 引用 ， 后续 写 代码 debug 模式 编写 ， GUI 程序 运行 时 ， 写个 简单 debug 菜单 ， 程序 运行 时 变量 常量 参数 打印 。   程序 核心 面板 都给 一个 名字 ， 事件 ， 调用 窗体 ， 窗体 ， 调用 目标 窗 体的 子窗 体来 操作 ， 做 完善 ， 窗体 提供 方法 操控 本窗 体的 子控 件 ， 调用 子控 件 。   提到 篇 参考 文章 更进一步 提出 MVC 架构 ， 最 关键 一点 利用 pypubsub 模块 ， 程序 内部 消息 发送 接收 ， 视图 层和 模型 层 解耦 。 模型 层只 负责 管理 好本 程序 本地 数据 ， 控制 层 负责 模型 层和 视图 层 交互 ， 控制 层 ， 视图 层是 不 模型 层 交互 。   样例 代码 不 贴了 ， pypubsub 模块 是很 简洁 ， 关键 在于 理解 MVC 层 层的 分工 设计 思路 。 仔细 分析 参考 文章 样例 代码 ， 会 发现 设计 很 精妙 地方 。 请 读者 设想 一个 ， GUI 程序 编写 类似 MVC 架构 中都 会 ， 底层 模型 或者说 数据 更 精确 一点 变量 发生变化 ， 变化 内部 计算 ， 是从 外部 API 获取 到的 数据 ， GUI 程序 数据 池 变动 ， 数据 视图 层 相关 ， 希望 视图 层 做出 调整 。 手工 请求 数据 ， 再 刷新 页面 想法 实在 太 愚蠢 ， 设计 一个 控制器 ， 控制器 负责 内部 运算 外部 获取 数据 ， 检测 数据 变化 ， 数据 变化 送给 本地 模型 层 ， 做好 变化 记录 ， 样例 程序   changing   过程 ， 本地 模型 层 数据 变化 ， 改变 视图 层 显示 ， 发送 changed   信号 页面 更新 驱动 。   视图 层   写的 GUI 程序 放在 视图 层 ， 视图 层的 panel 类等 ， 面板 子控 件 ， 可变 元素 ， 挂在 面板 上 调用 ， 业务 GUI 显示 需求 ， 些 更好 针对 面板 子控 件的 组合 。   面板 属性 ， 利用 python   @ property   面板 属性 ， 面板 可变 元素 调用 属性 来的 ， 引用 属性 方法 ， 指向 外部 可变 内容 ， 视图 层 内部 代码 每次 引用   .   ， 都会 调用 定义 属性 方法 ， 实时 再 计算 ， 最新 信息 。   视图 层 常数 信息 ， 讨论 编码 风格 推荐 ， 慢慢 抽 ， const 常数 模块 统一 管理 ， 一句 话 ， 努力 数据 代码 分离 。   控制 层   控制 层的 ：   接受 模型 层 ， 组织 好 本地 常量 变量 数据   接受 好 视图 层 模型 层 发送 消息 ， 针对 消息 动作   ， 视图 层 引用 可变 数据 方法 支持 控制 层 提供   模型 层   模型 层不 视图 层 交互 ， 所说 ， 只 负责 管理 好 本地 数据 发送 信号 ， 实际上 模型 层也 引入 控制 层 ， 一个 单纯 简单 管理 本地 数据 接口 。   一般来说 变动 业务 相关 数据 模型 层 。   二次 思考 MVC 架构   流行 web 框架 是以 一种 成熟 MVC 架构 风格 ， 很多 东西 太 大的 ， GUI 编程 web 视图 层和 控制 层不 太 好 分离 。 GUI 程序 越来越 ， 确实 感觉 东西 杂乱 ， 思路 清晰 ， 一会 数据 变动 ， 视图 层 忘记 跟着 变动 ， 一会儿 数据 变动 ， 信号 忘记 发送 。   方式 ， 程序 常量 汇入 全局 变量 池 ， 面板 控 件内 GUI 要素 ， 都 汇入 全局 变量 池 ， 操作 带来 很大 便利 。 全局 变量 池中 变量 ， 建立 起了 模型 层 。   模型 层中 目标 变量 ， 发生 变化 ， 就将 发送 一个 信号 。   视图 层 监听 目标 信号 ， 实时 变动 界面 体现 数据 变化 。   GUI 层 事件 。   控制 层还 逻辑 模型 层 交互 。   提到 都是 正确 ， 关键 在于 都混 杂乱 ， 再 加上 GUI 事件 信号 ， 程序员 思维 混乱 。   试着 约定 ， 再 试着 重构 整理 下 代码 试试看 。   常量 ， 模型 层 变量 ， 全局 变量 分离   程序 涉及 到的 常量 ， 模型 层 变量 ， 全局 变量 分离 ， 早期 都 汇入 全局 变量 挺 ， 全局 变量 规模 变得 庞大 ， 分离 减轻 程序员 头脑 负担 。   模型 层和 视图 层 分离   模型 层 不 视图 层的 东西 ， 面板 。   视图 层 不 模型 层的 东西 ， 全局 变量 视图 层 （ 控制 好 这部分 量 ） ， 变量 模型 层 。 【 视图 层 模型 层的 数据 ， 推荐 接口 统一 管理 】   模型 层 视图 层 发送 消息 （ _ changing ） 而只 发送 （ _ changed ） ， 控制 层 修改 模型 层 数据 。 视图 层只 负责 监听   ( _ changed )   消息 。 控制 层只 监听 ( _ changing )   。   模型 层 信号 规范   模型 层是 数据 层 ， 业务 逻辑 视图 层 数据 显示 ， 其是 数据 依赖 ， 或者说 数据 驱动 ， 控制 层或 视图 层就 监听 数据 模型 。   监听 信号 名 规范 ：   变量 名 _ changed   【 模型 层 数据 发生 变动 ， changed 模式 可被 控制 层 视图 层 监听 】   变量 名 _ changing   【 视图 层 数据 发生 变动 ， 发射 changing 信号 ， 信号 只 控制 层 监听 ， 模型 层 不用 。 】 （ 再 着重 讨论 下 changing 信号 changed 信号 分工 ， changed 信号 信息 变动 源更 多的 外部 ， 模型 层 数据 变动 ， 程序 内部 视图 层 跟踪 变动 ， 逻辑 交给 控制 层 中继 ； changing 信号 更 多的 程序 本地 信息 变动 驱动 源 ， changing 第一 是本 GUI 视图 层 内部 面板 组件 之间 信息 同步 ， 才是 情况 控制 层 监听 更改 模型 层 数据 。 简言之 ， changing 第一 视图 层 内部 ， changed 第一 外部 数据 变动 视图 层 跟踪 变化 ， 才是 视 控制 层 监听 信号 编写 更 内部 程序 逻辑 。 ）   _ changing     _ changed   值 发生 变法 才 发送 消息 ， 情况 下 发送 消息 （ 设置 _ send 选项 ）   _ appending   _ appended   情况 下 列表 引入 append 模式 会很   _ clearing   _ cleared   情况 下 数据 清空 还原 默认 值 操作   传递 数据 值 ， append 模式 只 传递 附加 。   代码 重构 后感   思路 ， 模型 层 建立 通用 模型 ， 代码 重构 ， 发现 MVC 架构 项目 早期 实际上 还 增加 很多 额外 代码 量 ， 后期 是会 降低 代码 量的 。   写 代码 提及 规则 ， 还 额外 再 加上 一条 ：   写的 代码 写完 放在 一个 地方 供 ， 不用 阅读 。   涉及 代码 复用 性 ， 代码 设计 ， 提及 MVC 架构 努力 模型 层 视图 层的 分离 时也 努力 去 追求 一点 。   TODO ：   pypubsub 模块 学习 debug ， 查看 阅读 信息 发送 信息 函数 执行 。   三次 思考 MVC 架构 【 PLUS 】   二次 思考 MVC 架构 内容 正确 ， changing 信号 细节 补充 ：   建立 视图 层 变量 ， 写法 建立 方法 类似 模型 层 变量 做法   视图 层 面板 绑定 好 事件 ， 内容 发生 变更 发送 信号 视图 层 相关 面板 数据 同步 工作 。   视图 层 变量 更 多的 面板 操作 记录 临时 变量 相关 ， 外部 驱动 发生 数据 更改 ， 驱动 方法 优先 选择 面板 SetValue 还 会 发送 GUI   Event 方法 ， 方法 ， 手工 添加 ， 好 模型 层 初始化 变更 则会 自动 触发 视图 层的 变更 。   事项   pypubsub   4.0 版本 确认 两个 面板 监听 topic ， 面板 函数 ， 参数 格式 。   一个 写为 ：   pypubsub 会抛 异常 ， 两个 都 写作 ， 种 形式 ， 都没 。   类 变量 实例 变量   算是 python 基础 知识 ， 写的 复用 面板 ， 千万 记得 ：   写 方法 定义 特别 面板 上的 元素 ， 挂在 类上 不 大 ， 定义 初始化 函数 ， 好让 多个 实例 化后 面板 子 面板 元素 ， 才 出错 。   wxpython 定义 窗体   本文 重点 讨论 wxpython 较为 底层 绘图 知识 利用 知识 建立 定义 窗体 。   GDI   wxpython 底层 绘图 有个 GDI （ Graphics   Device   Interface ） 概念 ， 理解 通用 绘图 接口 ， 利用 通用 绘图 接口 ， 一套 绘图 方法 ， 显示器 ， 打印机 绘图 。 程序员 不用 硬件 底层 绘图 编程 。   GDI 具体来说 绘图 类和 方法 。   DC   绘图 前 ， 创建 一个 设备 上下文 DC （ device   context ） ， DC 具体来说 wx . DC 类 。 中不 wx . DC 类 ， 选择 更 设备 向的 DC 子类 。 子类 分为 三类 ：   用于 绘制 屏幕 上下文   用于 绘制 地方 而非 屏幕   用于 缓冲 一个 设备 上下文   用于 绘制 屏幕   wx . ClientDC   wx . PaintDC   是在 EVT _ PAINT 事件 中 ， 设备 上下文 ， wx . ClientDC   。   wx . WindowDC   希望 客户 区 绘制 ， 窗 体的 边框 ， 标题 栏等 都 想 绘制 ， 。   wx . ScreenDC   希望 屏幕 上 绘制 ， 。   非 屏幕 设备 上下文   wx . MemoryDC   用于 内存 中的 位 图 bitmap 上 绘制   wx . MetafileDC   只 windows 下 ， 绘制 写入 文件 中   wx . PostScriptDC   跨平台 ， 写入 eps 文件 中   wx . PrinterDC   只 windows 下 ， 写入 打印机 中   缓冲 设备 上下文   wx . BufferedDC   wx . BufferedPaintDC   缓冲 一个 设备 上下文 ， 做 几个 重 绘的 ， 屏幕 闪烁 ， 缓冲 是个 选择 。 绘制 屏幕 闪烁 ， 推荐   dc   =   wx . BufferedPaintDC ( )   带 颜色 线条   wxpython 里的 StaticLine 是不 定制 颜色 ， 请看 类 一个 定义 颜色 线条 功能 。 例子 演示 定义 窗体 ， OnPaint 上 画上 窗 体 图形 ， Bind 好你 想要 事件 动作 。   绘图 变得 来越 更 多的 定制 需求 ， 窗体 更 多的 方法 支持 特性 。   一个 很 简单 例子 ， 学到 很多 东西 ：   定义 重画 事件 ，   wx . PaintDC   。   绘画 区域 x , y 计算 ，   ( 0 , 0 )   面板 绘画 区域   . GetClientSize ( )   方法 。     dc . SetPen   设置 画笔 ， 设置 颜色 ， dc . DrawLine 画 一条 直线 ， 绘画 过程 。   定义 一个 个性化 复用 小 面板 组件 。   TODO   ：   一个 ， 继承   wx . Panel   才行 ， 道理 暂时 还 没 想 明白 。   形状 绘制   带 颜色 方块   设置 画刷 ， 画 一个 矩形 。   绘制 圆弧   绘制 一个 圆弧 ， 起点   x1   y1   终点   x2   y2   中心点   xc   yc   弧线 逆时针 绘制 ， 设置 画刷 ， 而会 填充 圆弧 区域 。   画 一个 圆   x   y   中心 ，   radius 半径 ， 画 一个 圆 。   画一 直线   起点   x1   y1   终点   x2   y2   画一 直线   画 多边形   定义 一系列 点 ， 画一 多边形 ， 起点 终点 自动 相连   画 圆角 矩形   radius 控制 曲率   绘制 文本   绘制 文本 ：   SetTextForeground   设置 字体 颜色     GetTextForeground   dc . SetBackgroundMode ( wx . SOLID )   默认   wx . SOLID   文本 背景 颜色 ， 设置   wx . TRANSPARENT   ， 文本 无 背景 颜色 。   dc . SetTextBackground   设置 文本 背景 颜色   dc . SetFont   设置 字体   绘制 图片   设置 画笔   提到 形状 绘制 ， 填充 区域 画刷 控制 ， 形状 线条 颜色 ， 则是 画笔 控制 。   画笔 样式   wx . PENSTYLE _ SOLID   默认 实线   wx . PENSTYLE _ DOT   小点   wx . PENSTYLE _ LONG _ DASH   虚线   wx . PENSTYLE _ SHORT _ DASH   短 虚线   wx . PENSTYLE _ DOT _ DASH   点 划线   wx . PENSTYLE _ TRANSPARENT   笔线   wx . PENSTYLE _ STIPPLE   提供 位图 笔触   wx . PENSTYLE _ BDIAGONAL _ HATCH   反 斜线   wx . PENSTYLE _ CROSSDIAG _ HATCH   XXX   线   wx . PENSTYLE _ FDIAGONAL _ HATCH   正 斜线   wx . PENSTYLE _ CROSS _ HATCH   +++   线   wx . PENSTYLE _ HORIZONTAL _ HATCH   水平线   wx . PENSTYLE _ VERTICAL _ HATCH   垂直线   设置 画刷   画 刷的 样式   画 刷的 样式 列举 ：   wx . BRUSHSTYLE _ SOLID   默认 实心 填充   wx . BRUSHSTYLE _ TRANSPARENT   透明 ， 填充   wx . BRUSHSTYLE _ STIPPLE _ MASK _ OPAQUE   用位 图 做 笔触 ，   mask         blitting   monochrome     text   foreground     background   colors .   wx . BRUSHSTYLE _ STIPPLE _ MASK   用位 图 做 笔触 ，   mask         masking   areas       stipple   bitmap .   wx . BRUSHSTYLE _ STIPPLE   用位 图 做 笔触   wx . BRUSHSTYLE _ BDIAGONAL _ HATCH   反 斜线   wx . BRUSHSTYLE _ CROSSDIAG _ HATCH   XXX   线   wx . BRUSHSTYLE _ FDIAGONAL _ HATCH   正 斜线   wx . BRUSHSTYLE _ CROSS _ HATCH   +++   线   wx . BRUSHSTYLE _ HORIZONTAL _ HATCH   水平线   wx . BRUSHSTYLE _ VERTICAL _ HATCH   垂直线   定义 画刷 图案   画刷 指定 图片 刷 图案 。   获取 绘图 区域 尺寸   获取 窗 体的 尺寸   wxpython 内的 窗 体 （ 继承 Window ） 都有   GetSize   方法 ， 窗 体的 尺寸 ：   获取 文本 宽度 高度   空行 写为 ：   居中 定义   获取 绘图 区域 width ， 计算 好你 想要 居中 对象 width （ w ） ， 居中 绘制 起点 x ：   居 右的 定义   获取 绘图 区域 width ， 计算 好你 想要 居 右的 对象 window （ w ） , 居 右的 绘制 起点 x ：   dc . Clear   TODO   理解 还 很 深 ， 只 用来 清空 背景 画刷 。   style 管理   常数 状态 不用 多说 ， 说下 wxpython style 管理 ， 定义 常数 ， 比如说   A   =   0b1   B   =   0b10   C   =   0b100   说 定义 一个 状态 ： style   =   A  |  B   ，   执行 逻辑 操作 即可 。 想要 测试 style 包含 B 态则   style   &   B   即可 。 style 态只 占 一个 二进制 位 ， 则其和 目标 style 逻辑 操作 ， 包含 返回 非 0 值 ， 返回 0 值则 不 包含 目标 style 态 。   一个 程序 实例 运行   利用   wx . SingleInstanceChecker   很 ， 更 信息 请 参看 文档     。 做法 确保 操作系统 用户 一个 程序 实例 运行 。   页面   利用 wx . adv . SplashScreen   很 制作 出 一个 页面 ， 读者 还 看 demo 案例 中 提到   wx . lib . agw . advancedsplash     AS   ，   SplashScreen   类比 多了 定制 选项 。   程序 最小化 托盘   主 界面 关闭 事件 ：   图片 重画   一个 抹 去 事件 发送 ， 当窗 体 背景 重 画的 。   An   erase   event         a   window ' s   background         repainted .   参考 网页   窗体 拖动   想要 窗体 拖动 ， 就将 事件 绑定 ， 拖动 事件 执行 方法 在主 窗 体上 ， 主 窗体 绑定 。 原因 还 很 明白 。   扩充 颜色 定义   wxpython 内部 一套 颜色 定义 库 ， 还 利用 进一步 扩充 颜色 定义 库 ：   aquamarine ： 海 蓝色   black ： 黑色   blue ： 蓝色   brown ： 褐色   coral ： 珊瑚 色   cyan ： 青色   firebrick ： 火砖 色   gold ： 金色   gray ： 灰色   green ： 绿色   khaki ： 土黄色   magenta ： 绛红色   maroon ： 栗色   navy ： 藏青色   orange ： 橙色   orchid ： 淡紫色   pink ： 粉红色   plum ： 梅 红色   purple ： 紫色   red ： 红色   salmon ： 鲜肉 色   sienna ： 红褐色   tan ： 浅 棕色   thistle ： 蓟 色   turquoise ： 青 绿色   violet ： 紫罗兰 色   wheat ： 浅黄色   white ： 白色   yellow ： 黄色   更 颜色 请 参看   demo     ColourDB   。   app   OnInit   加载 定义 颜色 ， 请看 官方 代码 片段 ， 做 ：   wxpython 项目 骨架   笔者 钻研 wxpython 桌面 编程 一段 时间 ， 样例 请 参见   项目   。   查看 wxpython demo 程序 API 文档 。   剩下 来的 编程 需求 ， 思考 界面 设计 。   编写 项目 ， wxpython 一个 通用 骨架 参考 ， 编程 需求 或者说 业务 很 相关 。   读者 参考   项目   几个 commit 。 简要 下 。   图片 文件 管理   图片 文件 都 放在 一个 文件夹 ， 编写   encode _ bitmaps . py   文件 ， 项目   获取 图片 对象 。   程序 主 入口   编写 一个 程序 主 入口 文件 ，   image _ process _ tool . py   ， 平时 测试 运行 ， 利用   pyinstaller   编译 exe 文件 ， 一个 脚本 文件 入口 。   编写 pyinstaller spec 文件   实践 经验 来看 ， 推荐 手工 编写 pyinstaller spec 文件 。   编写 一个 全局 变量 文件   参数 全局 变量 推荐 编写 一个   global _ var . py   文件 ， 程序 中   调用 ， 很多 情况 下这 很 。   MVC 分离 架构   源码 中 分为   gui   视图 层 ，   models   模型 层 ，   controllers   控制 层 ， 小的 图形 界面 中 ， 控制 层和 模型 层并 代码 ， MVC 分离 架构 推荐 保留 。   常数 配置 统一 管理   桌面 GUI 程序 ， 是很 小型 桌面 GUI 程序 都 很多 const 常数 ， 推荐 统一 管理 。   定义 颜色   请 参看   app . py     update _ _ defined _ color   操作 ， 建立 颜色 定义 库来 规范化 程序代码 。   程序 启动 唯一性   情况 下 会 桌面 程序 多开 ， 绝大部分 情况 都是 一个 程序 一个 界面 ， 程序 ， 点击 程序 图标 ， 会自 动弹 创建 程序 实例 。   请 参看   app . py   解决 方案 。   异常 信息 更好   利用 pubsub 操作 更好 异常 信息 捕捉 ， 桌面 程序代码 变得 庞大 ， 异常 定位 ， 会让 调试 变得 困难 。 请 参看   exception _ utils . py   文件 。   参考 资料   zetcode   wxpython 教程   wxpython 官方 参考 文档   wxpython     action   ,   Author     Harri   Pasanen     Robin   Dunn",
            "tags":"gui",
            "url":"articles/wxpython-learning-notes.html"
        },
        {
            "title":"小分子网页显示第二版",
            "text":"第二 版     第一版 中   介绍 html 文件 中 绘制 数学 表达式 化学 分子式 ， 简单 来说 利用   mathjax   javascript 库 。 喜欢 markdown pelican ， pelican 下该 做 。   最 优雅 方法 引入   render _ math   插件 。   剩下 交给 pelican ， 检测 markdown 下 插入 数学 公式 或者说 化学 分子式 ， 引入   mathjax   库 。   数学 环境 简要 介绍   行内 数学 环境   TeX     $   $   ， 单独 一行 数学 表达式   ：   更 多用   Tex 写 数学 知识 请 参看   wikibook   。 值得一提的是   LaTeX 风格   \\ (   不 支持 。   \\ begin { equation }   支持 ， markdown 编辑器 不 支持 实时 预览 ， 推荐   $     $ $   。   ：   显示 效果 ：   $ $   { \\ sigma   } &# 94 ; { 2   }   = \\ frac   {   1   } { n   }   \\ sum   _ {   i = 1   } &# 94 ; {   n   } { (   X _ i   -   \\ mu ) &# 94 ; 2 }   $ $   显示 小 分子     $ \\ ce { H _ 2O } $   显示   \\ ( \\ ce { H _ 2O } \\ )   ，   $ \\ ce { AgCl _ 2 &# 94 ; - } $   显示   \\ ( \\ ce { AgCl _ 2 &# 94 ; - } \\ )   。   一种 简写 写法 ：   $ \\ ce { H2O } $   显示   \\ ( \\ ce { H2O } \\ )   ，   $ \\ ce { AgCl2 - } $   显示   \\ ( \\ ce { AgCl2 - } \\ )   。   看   ce   命令 包装 纯数学 环境 表达 显示 效果 ：   \\ ( H _ 2O \\ )     \\ ( AgCl _ 2 &# 94 ; - \\ )   。 区别 。   数字 上标 加减 号 自动 情况 见这 两个 例子 ：   $ \\ ce { Y &# 94 ; { 99 } + } $   \\ ( \\ ce { Y &# 94 ; { 99 } + } \\ )     $ \\ ce { Y &# 94 ; { 99 + } } $   \\ ( \\ ce { Y &# 94 ; { 99 + } } \\ )   。   配位 化合物   数字 写上 即可   $ \\ ce { 0.5 H2O } $   \\ ( \\ ce { 0.5 H2O } \\ )   ， 值得一提的是 ， 数字 分数 形式 会 自动 ：   $ \\ ce { 1 / 2   H2O } $   \\ ( \\ ce { 1 / 2   H2O } \\ )   。   会 带上 小数点 数字 显示 古怪 。 小数点 会被 解释 配位 化合物 结晶水 分隔 点 。   $ \\ ce { KCr ( SO4 ) 2.12 H2O } $   \\ ( \\ ce { KCr ( SO4 ) 2.12 H2O } \\ )   。 正确 显示 例子 ， 0.5 放入 数学 环境 中 即可 ：   $ \\ ce { $ 0.5 $ H2O } $   $ $   \\ ce { $ 0.5 $ H2O }   $ $   如上 示 ， mathjax 支持 ce 命令 再 数学 环境   $   $   。   显示 化学键   -   =   #   单键 ， 双键 三 键 。   \\ ( \\ ce { A - A   B = B   C # C } \\ )     \\ bond   命令 还 额外 键 ，   $ \\ ce { \\ bond { ~ } } $     \\ ( \\ ce { \\ bond { ~ } } \\ )     $ \\ ce { \\ bond { ~ - } } $     \\ ( \\ ce { \\ bond { ~ - } } \\ )   ， 类推 。   显示 化学反应 式   $ $   \\ ce { CO2   +   C   < -   2CO }   $ $   $ $   \\ ce { CO2   +   C   - > [ \\ text { text 命令 } ]   2CO }   $ $   $ $   \\ ce { CO2   +   C   - > T [ 支持 ] [ 中文 ]   2CO }   $ $   不 text 命令 ， 中文 显示 。 例子 第二个 text 命令 ， 是因为 加上 T ， 箭头 文字 都不 。   显示 箭头   $ $   \\ ce { SO4 &# 94 ; 2 -   +   Ba &# 94 ; 2 +   - >   BaSO4   v   &# 94 ; }   $ $   下降 箭头   v   ， 上式 箭头   &# 94 ;   ， 内容 一个 空格 。   推荐 一个 markdown 编辑器   typora   markdown 编辑器 ， 实时 预览 修改 markdown ， 包括 化学 公式 数学 公式 。",
            "tags":"chemistry",
            "url":"articles/xiao-fen-zi-wang-ye-xian-shi-di-er-ban.html"
        },
        {
            "title":"小分子网页显示第一版",
            "text":"mhchem 宏包   latex 基于 tikz chemfig 宏包 小 分子结构 显示 ， 包括 大型 有机 分子 结构 显示 ， 简单 小 分子 显示 推荐   mhchem   宏包 。   mhchem 看得出 来是 latex 数学 环境 显示 小 分子结构 ， 马上 就被 html 上的 mathjax 支持 ， chemfig tikz 机制 ， 永远 都 mathjax 支持 （ svg 途径 ？ ） 。 加载 宏包 ：   来说 ， 假定 读者 latex 数学 环境 内的 语法 都很 熟悉 ， 简单 理解 mhchem 宏包 数学 环境 下 ， 一个 新 命令   \\ ce {   }   ， ce 命令 上标 和下 标语 法是 类似 数学 环境 内的 语法 ， 化学 表达式 显示 会 美观 。     $ \\ ce { H _ 2O } $   显示   \\ ( \\ ce { H _ 2O } \\ )   ，   $ \\ ce { AgCl _ 2 &# 94 ; - } $   显示   \\ ( \\ ce { AgCl _ 2 &# 94 ; - } \\ )   。   一种 简写 写法 ：   $ \\ ce { H2O } $   显示   \\ ( \\ ce { H2O } \\ )   ，   $ \\ ce { AgCl2 - } $   显示   \\ ( \\ ce { AgCl2 - } \\ )   。   看 ce 命令 包装 纯数学 环境 表达 显示 效果 ：   \\ ( H _ 2O \\ )     \\ ( AgCl _ 2 &# 94 ; - \\ )   。 区别 。   数字   数字 写上 即可   $ \\ ce { 0.5 H2O } $   \\ ( \\ ce { 0.5 H2O } \\ )   ， 值得一提的是 ， 数字 分数 形式 会 自动 ：   $ \\ ce { 1 / 2   H2O } $   \\ ( \\ ce { 1 / 2   H2O } \\ )   。   会 带上 小数点 数字 显示 古怪 。 小数点 会被 解释 配位 化合物 结晶水 分隔 点 。   $ \\ ce { KCr ( SO4 ) 2.12 H2O } $   \\ ( \\ ce { KCr ( SO4 ) 2.12 H2O } \\ )   。 正确 显示 例子 ， 0.5 放入 数学 环境 中 即可 ：   $ \\ ce { $ 0.5 $ H2O } $   $ $   \\ ce { $ 0.5 $ H2O }   $ $   数学 环境   ， 如上 示 ， mathjax 支持 ce 命令 再 数学 环境   $   $   。   键   -   =   #   单键 ， 双键 三 键 。   \\ ( \\ ce { A - A   B = B   C # C } \\ )     \\ bond 命令 还 额外 键 ，   $ \\ ce { \\ bond { ~ } } $     \\ ( \\ ce { \\ bond { ~ } } \\ )   ，   $ \\ ce { \\ bond { ~ - } } $     \\ ( \\ ce { \\ bond { ~ - } } \\ )   ， 类推 。   化学反应 式   $ $   \\ ce { CO2   +   C   < -   2CO }   $ $   $ $   \\ ce { CO2   +   C   - > [ \\ text { text 命令 } ]   2CO }   $ $   $ $   \\ ce { CO2   +   C   - > T [ 支持 ] [ 中文 ]   2CO }   $ $   不 text 命令 ， 中文 latex 显示 。 例子 第二个 text 命令 ， 是因为 加上 T ， 箭头 文字 都不 。   箭头   $ $   \\ ce { SO4 &# 94 ; 2 -   +   Ba &# 94 ; 2 +   - >   BaSO4   v   &# 94 ; }   $ $   下降 箭头 v ， 上式 箭头 &# 94 ; ， 内容 一个 空格 。   mathjax 简介   网页 显示 数学 公式 利用 mathjax javascript 库 ， 显示 简单 化学 是因为 mathjax 还 引入 mhchem . js 插件 。   简单 引入 代码 所示 ：   最 关键 配置   TeX     extensions   引入   mhchem . js   。   参考 资料   网站   一块 内容 讲解 很 详细 。",
            "tags":"chemistry",
            "url":"articles/xiao-fen-zi-wang-ye-xian-shi-di-yi-ban.html"
        },
        {
            "title":"周易摇卦小程序",
            "text":"摇 卦   摇 卦先 静心 ， 并问 所求 疑问 之事 。   测一 卦   历史 记录   ×   历史 记录   Close   卦   变卦   卦 ...   变卦 ...   信息   周易 相关 资料 整理 研究 思考 汇集 成一 本书 ， 查阅 参考 。   项目 Github     。",
            "tags":"tools",
            "url":"articles/zhou-yi-yao-gua.html"
        },
        {
            "title":"javascript语言学习笔记",
            "text":"前言   本文 行文 上是 假设 读者 一门 编程 语言 了的 ， 编程 语言 概念 做 过多的 讨论 。   javascript 历史 起源 来说 一个 主角 命 ， 更 像是 编程 语言 世界 一个 注定 跑 跑龙套 。 1995 年 公司 开发 浏览器 ， 公司 浏览器 开发 一个 脚本 语言 ， 丢 给了   Brendan   Eich   ， Brendan   Eich 很 不 情愿 接受 不 喜欢 ， 大概 花了 10 天 时间 仓促 Javascript 设计 ， javascript 最 名字 不 javascript ， livescript ， javascript 名字 改 蹭 Java 语言 热度 嫌疑 。   javascript 流行 大热 创始人 料想 不到 ， 实际上 javascript 刚 发展 几年 ， 一个 前端 脚本 语言 ， 一种 轻视 态度 ， 语言 写写 浏览器 界面 动态 效果 。 node . js 相关 生态圈 日益 成熟 壮大 ， 才 惊讶 发现 javascript 编程 世界 热的 几门 语言 ， 近 几年 ， javascript 生态 成熟 壮大 ， 再也 人去 质疑 javascript 当今 编程 世界 编程 语言 主角 地位 ， 最 碎碎 念说 几句 javascript 语言 。   注释   多行 注释 推荐 写法 ：   单行 注释   / /   ， 注释 都新 一行 写 ， 代码 块 内的 注释 ， 空 一行 ：   注释 文字 内容 要和 注释 符号 空一 空格 。   javascript 代码 放在   javascript 代码 推荐 放在 HTML 文档 面 ，   < / body >   标签 ， 浏览器 更 快地 加载 页面 。 倒 特别 ， 刚 简单 javascript 代码 写 :   javascript 代码 量有 一点 推荐 单独 放在 一个 js 文件 上 ， 引入 进来 :   javascript 代码 REPL 环境   浏览器 debug 控制 台上 运行 javascript 代码 ， 安装 node 环境 node 命令 下的 REPL 环境 。   程序 中的 操作 对象   简介   javascirpt 数据 类型 分为 两类 ， 一类 原始 类型 ： 数值 、 字符串 布尔 值 ； 一类 对象 类型 。 javascript 两个 值 ：   null     undefined   。 javascript 数值 、 字符串 、 布尔 值 、 null 、 undefined 之外 就都 对象 。 提到 数组 ， 函数 都 对象 ， 只不过 其是 javascipt 内部 定义 对象 。   声明 常量 变量   javascript 变量 区分 大小写 。   javascript 利用 关键词   var   ，   const       声明 变量 常量 ， const 声明 常量 ， var 声明 变量 。 var 声明 变量 javascript 中 常用 声明 变量 关键词 ， 声明 变量 作用 域很 不同于 编程 语言 ，   函数 作用 域   。 函数 区块 内 声明 变量 函数 体都 ， 包括 花 括号 结构 任意 嵌套 函数 。 程序员 变量 作用 域 习惯 块 作用 域 ， airbnb 规范 提出 不 推荐   var   ， 推荐     ，   const       都是 块 作用 域 （ block - scoped ） 。   参考 mozilla 上的 相关 讨论 ， 变量 作用 域 显得 另类 ， 更 糟糕 是因为 作用 域会 变量 声明 语句 随意 放置 ， 会 代码 变得 混乱 难以 理解 。   javascript 编码 推荐 ， 不用 var   。   会 javascript 代码 写上   x = 1   ， 写上 关键词 ， 意义 上 来说 不 声明 变量 ， 全局 对象 上 挂载 x 属性 ， 编码 规范 来说 抵制 写法 。   全局 变量   网页 中有 全局 对象   window   ， 全局 变量 挂在   window   对象 。   数值 ( number )   javascript 不 区分 整数 值和 浮点 数值   ， javascript 中 数字 都用 浮点 数值 ， javascript 编程 语言 很大 。 数值 型 运算 ， 加减乘除 不用 多说 。   %   python 求余 操作 。 python3 中有   5 / / 2   求商的 概念 ， javascript 概念 ， 类似 效果 。   parseInt ( )   字符串 转成 整数 型 。   NaN   执行   parseInt ( ' abc ' )   ， 返回   NaN   ， 判断 是否是 NaN 所示 ：   ：   javascript 一个 全局 函数   isNaN   ， 其和 Number . isNaN 不 太 ， 推荐   Number . isNaN   。 Number . isNaN 很 判断 是否是 NaN 值 ， 全局 isNaN 更 像是 在说 输入 东西 一个 数值 转成 一个 数值 ， true ， false 则能 。   字符串 ( string )   javascript python 单 引号 双引号 都是 。     +   简单 字符串 拼接 工作 ， 字符串 模板 操作 。   javascript 字符串 类型 python 类似 ，   string [ 0 ]   支持 。 不 string [ 0 : 2 ] ， 幸运 javascript 提供 类似 python 中的 那种 切片 概念 ，   slice   方法   javascript slice 方法 python 切片 操作 区别 ，   ( start , end )   两个 参数 ， 其也 负数 末尾 算起 概念 ， 请 参看     。   字符串 方法   length :   字符串 长度   toUpperCase :   大写   toLowerCase :   小写   indexOf :   返回 子 字符串 索引 位置 ， index 索引 编号 规则 python 。   substring :   返回 子 字符串 ， 熟悉 python 那种 切片 规则 ， 推荐   slice   方法 。   replace :   替换 操作   split :   分割 操作   toString 方法   javascript 数值 、 布尔 值 、 对象 字符串 都有 一个   toString   方法 ， 大体 类似 python   str   函数 。 定义 对象 加上   toString   方法 ：   布尔 值 ( boolean )   javascript 布尔 值是   true     false   。 判断 操作 时 ， 希望 值 ， 类似 python 判断   = =   符号 ， javascript 中   = = =   。 三个 等号 ， 别出心裁 ， 好处 ， javascript 历史 遗留 。   boolean 值的 判断 遵循 规则 ：   false   0   空 字符串   \" \"   NaN   null   undefined   都被 视作 false   都被 视作 true   null   javascript   null   。 其是 一个 值 。 类似 python   None   ， 一个   undefined   。 函数 return 值就 会 默认 返回   undefined   ， 感兴趣 查 两个 区别 ， 看了 ， 挺 无聊 。 谈到   = =     = = =   区别 ，   = = =   ，   undefined   是不 等于   null   ，   = =   ， javascript 会 额外 做 类型 转换 工作 ， 两个 会 看作 。   ECMA - 262   ：   操作 一律 推荐   = = =     ! = =   ，   = =     ! =   。   typeof 操作符   查看 对象 对象 类型 ， typeof 操作符 只 返回 六种 ：   number   string   object   function   array   date   regexp   boolean   null   undefined   symbol   (     es6 )   数组   javascript 数组 （ array ） 数据结构 概念 上 大体 类似 python 列表 。   构建 一个 数组   索引 index 编号 法则 python 。   数组 方法   length :   数组 长度   indexOf :   返回 数组 子 元素 索引 位置   slice :   切片 操作 ， 类似 python   lst [ 0 : 2 ]   那种 表达 方法 。 slice 方法 不 接受 参数 默认 返回 列表 引用 ， 所说   浅 拷贝   。 浅 拷贝 简单 来说 复制 一个 字典 数组 （ 对象 ） ， 第一层 key 赋值 第一层 ， 第一层 key 一个 对象 引用 ， 拷贝 前 对象 拷贝 后 对象 都会 指向 统一 对象 ， 深 拷贝 进一步 递归 拷贝 。   push :   末尾 添加 一个 元素   pop :   一个 元素 删除   unshift :   数组 头部 添加 一个 多个 元素 ， 返回 新 数组 长度   shift :   数组 头部 删除 一个 元素   sort :   排序 ， 破坏 型 。 值得一提的是 数字 排序 大到 小的 顺序 来的 ， 不 太 :   python 中最 多说 字符串 ， number 类型 。 排序 ， 操作 （ 参看   网页   ） :   sort 方法 接受 一个 函数 参数 ， 函数 接受 两个 参量 ， 用来 判断 a b 值 大小 ， 返回 值 小于 0 ， a 放在 。 返回 值 大于 0 ， a 放在 。 排序 方法 支持 数字 字符串 情况 。 javascript   字符串   -   字符串   情况 是会 尝试 做 转换 成 number 类型 才做 。   reverse :   反转 ， 破坏 型 。   splice :   指定 索引 删除 元素 ， 此处 添加 元素 ， 相当于 update 更新 。   参数 是从 索引 2 删除 3 元素 ， 添加 元素 。 例子 splice 方法 破坏 型的 方法 ， 返回 删除 了的 元素 。   splice 方法 用于 只 删除 不 添加 纯 删除 操作 ， 只 添加 不 删除 纯 添加 操作 。   concat :   连接 两个 数组 ， 非 破坏 型 。   join :   类似 python 字符串 join 方法 ， 所示 :   fill :   数组 值来 填充   遍历 数组   遍历 数组 还 ：   大体 类似 python   enumerate   写法 。   判断 元素 数组 中   返回   - 1   则该 元素 不 数组 中 ， 数组 中 。   对象   对象 一个 整合 数据 函数 集合 。   演示 对象 整合 函数 （ 方法 ） 例子 ：   大概 猜测 出 javascript 底层 细节 ， 阶段 学习 编程 语言 来说 裨益 。 介绍 typeof 提到 数组 ， 函数 都是 对象 。   新建 一个 数组 完整 写法 ：     Array ( )   ； 新建 一个 对象 完整 写法 ：     Object ( )   。 新建 一个 类的 写法 所示 ：   class 概念 ， 推荐 对象 看作 类似 python 中 字典 概念 ， 一个 键值 映射 集合 。 编程 概念 上讲 一个 数据 类型 。 数组 ， 对象 ， 函数 ， 用户 定义 类等 typeof 去 查看 都是 object ， 都 object 。 object Object ， 层面 上 还 不 大 确切 ， 重点 ， 就算 ， 编程 概念 上 来说 区分 。 一个 实用 数据 类型 ， 一个 是很 抽象 面向对象 编程 概念 上的 底层 表述 。   语句   判断 对象 键 。   delete 语句   python del 语句 。 javascript   delete   语句 删除 不 键也 报错 。   hasOwnProperty 方法   python2 _ key 方法 ， python2 移 ， 推荐 语句 。   aribnb 提出 相关 建议 ， 持 保留 意见 ， python 出身 ， 更 喜欢 语句 。   shallow   copy   集合   javascript 中的 集合 Set 大体 python 中的 集合 概念 相近 。   var   s1   =     Set ( ) ;   / /   空 Set   var   s2   =     Set ( [ 1 ,   2 ,   3 ] ) ;   / /   含 1 ,   2 ,   3   其也   add   方法 用于 添加 一个 元素 。   delete   方法 删除 元素 。   函数   函数 所说 一个 对象 ， 一个 简单 函数 对象 定义 所示 ：   写法 介绍 匿名 函数 写法 ， 情况 下会 用到 ， 定义 函数 采用 写法 ：   两种 定义 风格 等价 。 值得一提的是 函数 return 值 ， 返回   undefined   。   arguments 用法   javascript 函数 内部   arguments   变量 ， 一个 Array ， :   其会 接受 传入 函数 参量 。   rest 用法   类似 lisp 语言 rest 参量 控制 概念 ，   rest a b 之外 参量 。 三个 点号 :   ... rest   。   箭头 函数   简单 来说 箭头 函数   lambda   表达式 更 简洁 写法 ， 说在 javascript 语境 下 其和 function 区别 ：   绑定   。   程序 中的 逻辑   一块 读者 熟悉 一门 编程 语言 ， 粗略 下扫 一遍 基本上 javascript 相关 语句 知识 。 小节 过多地 讨论 ， 上 常见 知识点 做出 。   条件 判断 结构   条件 判断 结构 ， python 大同小异 ， 圆括号 （ 记住 圆括号 加上 ） 花 括号 。   javascript 不 python 强制 缩进 风格 ， 推荐 用缩 进来 增强 代码 可读性 逻辑 清晰 性 ， :   javascript switch 语句 ， pythoner 懂 ， 多个   语句 。   switch 语句   三元 运算 符   循环   javascript python 都有 语句 ， 语句 用的 较少 ， 更 多的 语句 。   遍历 数组   遍历 数组 还 ：   大体 类似 python   enumerate   写法 。   遍历 对象   递归 遍历 对象 key :   循环   是用 语句 循环 ：   无限 循环   是用 语句 无限 循环 ：   语句   语句 简单 下吧 。       语句   异常   类似 python   ... ...   ， javascript ：   面向对象 编程   javascript 推荐 class 定义 类 ：   老式 写法 所示 ， 下 ：     javascript ， object 定义 方法 ，     指向 对象 实例 。       函数 ， ：   指定 函数 运行 ， 调用 函数 对象 。   比如说 函数 调用 ：   jquery 对象 .   函数 指定 jquery 实例 ， 网页 标签 元素 。   constructor 方法   面向对象 编程 常见 概念 ， 对象 构造 方法 ， 新建 实例 化该 对象 时被 调用 。   属性 set   面向对象 编程 是自 定义 对象 一个 设计 点 ， javascript 采用     ( )   写法 ：   类的 继承   面向对象 继承 概念 不 赘述 。   super   类似 python 语言 super 概念 ， 引用 父 类 。   instanceof   类似 python 语言 中的 isinstance 函数 。   - jquery   更 相关 知识 请 参阅 参考 资料 四 ，   Github 项目   。 重点 知识 做出 整理 。   选择   jquery 选择 库很 核心 一个 功能 ， JavaScript 提供   document . querySelector ( )     document . querySelectorAll ( )   替代 。   document . getElementById ( )   ，   document . getElementByClassName ( )     document . getElementByTagName ( )   性能 更好 。   选择 class   选择 id   ajax   更 信息 请 查看 mozilla   fetch 函数 介绍   。   fetch 请求 一个 URL ， 调用 函数 。   response . text ( )   返回 一个 Promise 对象 ， Promise 对象 ， 类 比作 python 异步 编程 协程 ， 调用 才能 内容 。   请求 JSON   api 接口 ， 调用   response . json 返回 ：   参考 资料   Javascript 权威 指南   David   Flanagan 著 .   mozilla   docs   javascript 教程     donot     jquery",
            "tags":"javascript",
            "url":"articles/javascript-language-learning-notes.html"
        },
        {
            "title":"dask模块",
            "text":"前言   python 生态圈 来说 ， 大数据 解决 方案 推荐 dask 多于 pyspark 。 接触 pyspark 痛苦 ， 学习 机器学习 积累 numpy ， pandas ， sklearn 知识 ， 。 dask python 大数据 解决 方案 ， 不 说 无缝 对接 ， 不 现实 ， 毕竟 到了 大数据 块 ， 不 说 东西 ， 应对 变量 ， 惰性 加载 惰性 求值的 ， 一个 区别 点 。 总的 感觉 ， python 爱好者 ， 之于 大数据 解决 方案 ， dask 真的 用的 很 爽 。   dask 官方 文档 写的 很 厚实 ， 这块 东西 。 本文 作者 所知 简要 地说 下 经验 。 研究 读者 去 研究   官方 文档   。   大数据 hadoop 简介   hadoop2 架构 大概 所示 ：   底层 hadoop 分布式 文件系统 大数据 文件 存储 支持 。 HDFS 架构 图所 示 ：   中层 YARN 计算 资源 调度 分配 。 YARN 架构 图所 示 ：   如上 图 所示 ， Yarn 一个 Scheduler ， Resource   Manager   资源 调度 ， 很多   worker ， Node   Manager 计算 。   最高层 MapReduce 框架 分布式 程序 一个 支持 性 框架 ， Hadoop2 可扩展性 很 好 ， dask ， spark 框架 都是 运行 Yarn 之上 。   dask 简介   dask 两 ：   基于 计算 优化 动态 调度   大数据 级别 集合   简单 来说 dask 基于 python 常见 数据 类型 概念 ， array ， dataframe ， 大数据 级别 集合 扩展 ， 很多 worker 一个 scheduler ， 调度 器 负责 计算 调度 ， 调度 器 面临 最小 计算 单位 partition ， partition 会 分散 worker 中 ， worker 会 利用 python 环境 ， 计算 。   dask 安装 python 模块 来说 难点 所在 ， 一块 难点 大数据 环境 搭建 上 。 大数据 工作组 环境 搭建 好了 ， 利用 dask - yarn 很 dask 分布式 分发 工作 。   dask - yarn   dask 连接 yarn 集群   连接 过程 如上 示 ， 安装   dask - yarn   模块 ， 连接 参数   environment   分布式 程序 python 环境 包 ， 激活 虚拟 环境 下 运行   venv - pack   命令 打包 。   worker _ vcores   申请 分配 资源 worker   cpu   核数   worker _ memory   申请 分配 资源 worker   内存 数   scheduler _ vcores   申请 分配 资源 scheduler   cpu   核数   scheduler _ memory   申请 分配 资源 scheduler   内存 数     申请 分配 资源 名字   work _ env   大数据 组 配置 好了 hadoop 环境 变量   调整 worker 资源   最 开启 worker 资源 。   数字 ， 其会 自动   scale _     scale _   。   关闭 释放 资源   cluster 关闭 动作 会 申请 自动 释放 hadoop 集群 上 申请 资源 ， 非正常 推荐 都 导致 申请 资源 仍 占 。 更 保险 见是 确保 异常 总 执行 :   强制 关闭   dataframe 最佳 实践   机器 内存 够用 ， pandas 。   代码 运算 过程 中 ， 转到 pandas ， 尽早 转到 pandas 。   pandas 优化 ： apply ， 量化 操作 ， 分类 。 dask dataframe 都 。 是向 量化 操作 风格 ， 初学 pandas 人很 忽视 。   一列 设置 索引 index ， 列的 操作 将会 加速 ， 比如说 列的 loc ， groupby ， join     merge 。   提到   set _ index   是很 昂贵 操作 ， 确认 ， 频繁 设置 索引 操作 ， 再 persist   。   聪明 persist   推荐 采用 写法 节省 占用 内存 ：   设置 分区 数   分区 数太 大 太小 都 不好   数据 存为 apache   parquet 文件 格式   dataframe map _ partitions   返回 值   参考   网页   。   函数 返回 标量 ， map _ partitions   返回   dask   Series   object   函数 返回 pd . Series   object ，     map _ partitions   会将   Series   对象 连接 ， 返回   dask   Series   object 。   函数 返回 pd . DataFrame   object   ， map _ partitions   会将 Dataframe 连接 ， axis = 0 ， 纵向 ， 返回 dask   DataFrame 对象 。   dask 单机 版   dask 单机 版在 熟悉 dask 命令 调试 代码 上 很 有用 ， 不 做 配置 dask 单机 版 。   官方 文档 ， 单机 版也 分为 单机 调度 分布式 调度 两种 ， 官方 文档 推荐 采用 分布式 调度 ， 说有 更好 诊断 功能 。   只能 linux 上 运行 。   单机 版的 线程 调度 中 区别 ：   进程 中 多个 线程   【 】   默认 dask . array   dask . dataframe   dask . delayed   scheduler = \" threads \"   分开 进程   默认 dask . bag   scheduler = \" processes \"   单线 程式   scheduler = \" single - threaded \"   参考 资料   dask 官方 文档",
            "tags":"programming",
            "url":"articles/dask-module.html"
        },
        {
            "title":"apache",
            "text":"WARNING   警告 ， 文档 归档 ， 年久失修 ， 内容 已 过于 陈旧 ， 放在 权做 读者 参考 。 【 2019 】   前言   apache2   web   server 简要 介绍 请 参看   apache   http   server   wiki   。 推荐 apache2.4 ，   apache 官方 文档   。   Ubuntu 系统 Centos 系统 之间 httpd 安装 配置 环境 差异 很大 ， 想说 知识 都 重点 ， 跟着 官方 文档 ， 折腾 出 一个 绿色 本地 安装 版本 httpd ， 跟着 官方 文档 学 配置 才是 王道 。 系统 命令 ， 系统 文件夹 下 配置 都是 不 东西 。   apache 本地 安装   apache 本地 安装 过程 大体 分为 几步 ：   安装 apr   安装 apr - util   安装 httpd   安装 mod _ wsgi   （ 选项 ， django flask ）   更 多的 细节 官方 文档   install   章节 里 ， 读者 懂 ansible ，   写的   green - install 项目   apache   role   。   说 到的 ， 日志 文件 ， 配置 文件 加载 都是 定制 ， 摸 配置 语法 才是 王道 。   挂个 简单 静态 网站   httpd . conf   写上   LISTEN   80   ， apache 将会 监听 80 端口 。 域名 指向 远程 服务器 ip 。 httpd . conf   写上 一句 ：   conf . d 文件夹 下的 配置 自动 加载 进来 。 conf . d 文件夹 conf 文件夹 平行 关系 。 conf . d 定义   VirtualHost   。   上个 完整 例子 ：   ServerName ：   apache 监听 80 端口 信号 ServerName 进一步 分发 ， 请求 域名   api . cdwanze . work ， 情况 例子 VirtualHost 。   DocumentRoot   ：   服务 静态 网站 内容 所在 文件夹 。 级别 五颗 星 。   DirectoryIndex   ：   文件夹 请求   / a / b   ， 文件夹 下有 index . html 文件 ， 显示 文件 内容 。   Directory ：   文件夹 权限 管理 ， 级别 五颗 星 ， 不 写就 会 权限 访问 错误 。   apache2.4 版本 语法   Require     granted   ， 原 2.2 配置 ：   考究 癖的 下 2.2 写法 ：   Order   , deny   — —   先写 规则 ， 再 写 deny 规则   Allow       — —   都 访问   Deny       — —   都 拒绝   2.2 配置   等同于 2.4 ：   2.2 ：   都 拒绝 ， 只   . org 访问 。   等同于 2.4 ：   2.4 Require 语句 更 简洁 ， ：   都 ， 禁止 访问 。   挂个 wsgi 站点   上 例子 ：   检测 wsgi 模块 加载 ， 加载 上 。   WSGIPythonHome   设置 python 虚拟 环境 所在 目录 ， 例子   venv / bin python 执行 脚本 。   WSGIPythonPath   设置 Django 项目 目录 所在   WSGIScriptAlias   设置 WSGI 文件 所在   Alias   Directory   设置 服务 项目 静态 文件 。   文件 权限   设置 好   Directory   之外 ， 还 会 文件 读写 权限 ， 查看 日志 发现 提示 说 文件 权限 读写 。 httpd 执行 User Group ， 看 目标 文件夹 文件 权限 。   Django 项目 wsgi 文件 执行 权限 。 Django 项目 操纵 数据库 ， sqlite3 文件 数据库 ， 会 读写 权限 。   值得一提的是 母 文件夹 执行 权限 ， 文件 都是 不 。",
            "tags":"web_server",
            "url":"articles/apache.html"
        },
        {
            "title":"elasticsearch",
            "text":"WARNING   警告 ， 文档 归档 ， 年久失修 ， 内容 已 过于 陈旧 ， 放在 权做 读者 参考 。 【 2019 】   简介   需求 ： 数据库 全文 搜索 支持 很 好 ， mongodb 中文 全文 搜索 支持 企业 版才 功能 ， 估计 中文 分词 效果 等也 太好 ， elasticsearch 专注 数据库 搜索 ， 术业有 专攻 ， 搜索 需求 ， elasticsearch 解决 。   推荐 elasticsearch   中文 插件 版   ， 集成 很多 中文 支持 插件 ， elasticsearch 官方 内置 中文 分词 效果 很 不好 ， 集成   ik 分词 插件   ， 分词 效果 。 项目 新手 马上 上路 ， 一个 还 算 效果 ， 精力 再 进一步 优化 。   elasticsearch python 接口 官方   elasticsearch - py   ， 编写 代码 推荐   elasticsearch - dsl - py   项目 ， 其也 基于   elasticsearch - py   项目 ， 提供 更 便捷 接口 封装 。   elasticsearch 数据库 结构 类似 mongodb ， 一条 记录 称为 一个 文档 （ doc ） ， 一个 文档 大体 一个 字典 值 ， 字典 套 字典 那种 。 一个 索引 （ index ） 概念 ， 大体 类似 database ， 一个 type 概念 ， 大体 类似 collections 。 elasticsearch nosql 数据库 ， nosql 数据库 存储 时很 一个 思路 ， 一个 文档 一个 doc 一个 实体 。   elasticsearch 基于 Lucene ， 下 ， 喝水 不 忘 挖 井人 。   elasticsearch windows 下的 安装 很 简单 ， 下载 好 代码 ， 解压 运行 bin 文件夹   elasticsearch . bat   文件 即可 ， 先 安装 好 java ， 配置 好   JAVA _ HOME   变量 。 下载 安装 jdk ， PATH 里 添加 jdk bin 所在 目录 即可 。   运行   localhost : 9200   打开 看 ， 文字 响应 elasticsearch 运行 。   本文 例子   本文 例子 中   book _ info     index ， elasticsearch 版本   6.2   ， 默认   doc _ type     doc   搜索 文档   elasticsearch 不 搜索 ， 会更 讨论 python   api 接口 ， 简单 elasticsearch 搜索 操作 ， 有个 大体 概念 。   搜索   给出 搜索 关键词 ， 返回 目标 index 文档 。 有用 信息 ， 返回 格式 详细 讲讲 :   先 关注 最 核心 hits 字段 ， 其内 ：   total   总共 找到   max _ score   得分   hits   搜索 到的 记录 信息 ，   _ index   目标 记录 索引   _ type   目标 记录   doc _ type   _ id   目标 记录 id   _ score   目标 记录 搜索 得分   _ source   目标 记录 内容   DSL 查询 表达式   搜索 会 一种 查询 语言 ， DSL （ 领域 特定 语言 ） 。 东西 支持 搜索 ， 查询 表达式 。   搜索 ， 讲 ， index 数据结构 设计 很 ， content   设计   Text   字段 ， 设置 好 中文 分词 全文 搜索 ， 再     Keyword   字段 ， match 搜索 则是 精确 匹配 模式 。   是对 content 字段 全文 搜索 ，   match   query 词 。   size 分 页       size   字段   query 字段   DSL 语言 最 前的 三个 字段 ， 更 DSL 查询 语句 都是   query 字段 字典 套 字典 。   高亮 搜索   第一级   query   平行 关系 ， 额外 返回 一个   highlight   搜索 匹配 高亮 信息 。   查询 语句   match _   都没 说 下的 默认 查询 ， 过滤 操作   match   全文 搜索 精确 匹配 ， match 都是   multi _ match   多字 段 查询   range   限定 区间 内的 数字 时间   term   数字 ， 时间 ， 布尔 值 不 分析 文本 精确 匹配   terms   多个 候选 项的 匹配   exists   查 字段   字段 查询 Argument   match 下 指明 字 段的 查询 ， 是如 上 结构 ，   query   查询 词 ， 平行 还 指定 更 多的 Argument ， ：   operator   多词 查询 默认 逻辑 ， 设置 逻辑 ，   minimum _ _ match   最小 匹配 度 ，   boost   字段 评分 权重 加大   bool 组合 查询   bool 下可 三个 字 段值 （ ,   _ ,   ） ， 其将 组合 查询 逻辑 。 （   _ ,   逻辑       ）   例子 content q 字段 搜索 ， source 字段 ' ' 。 bool 组合 查询 用于 过滤 语句 。   bool 还 加上   filter   执行 过滤 逻辑 ， 查询 参与 评分 ， 过滤 则不 参与 评分 。   DSL   查询 语句 很 很多 是由 复合 查询 语句 拼 成的 ， bool 一个 ， dis _ max   一个 ， ， 再 。   多字 段 搜索     multi _ match   多个 字段 搜索 。 所示 ，   默认 搜索 类型   _ fields   找到 得分 字段 ， 得分 得分 。   等于 一个   dis _ max   复合 查询 语句 。   dis _ max   执行 多个 查询 语句   tie _ breaker   因素 ， tie _ breaker   默认 0 ， 指 得分 字段 查询 得分 。   多字 段 搜索 第二个 类型   _ field   ， 字 段的 查询 得分 会 相加 。   多字 段 搜索 第三个 类型   cross _ field   ，   会把 多个 字段 合并 计算 出 一个 得分 。   多字 段 搜索 情况 很 ， 默认 类型 ， 还要 写出 一个 很 复合 查询 语句 。   更好 写多 字 段 搜索   小节 参考 篇   不错 文章   。   插入 文档     < id >   指定 目标 记录 文档 存储   _ id   。   定向 id 取出 文档   更新 文档   插入 文档 类型 ， 返回   _ version   会加 1 ， 旧 版本 文档 会在 ， elasticsearch 会 慢慢 删除 旧 版本 文档 。   更新 文档   更新 文档 提到 版本 控制 更新 文档 本质 区别 ， 一个 便捷 内部 api ， 更新 文档 删除 旧 文档 过程 。   更新 文档 原 文档 合并 ， 覆盖 写上 已有 字 段和 新增 新的 字 段 。   删除 文档   删除 文档 删除 文档 ， 文档 标记 为已 删除 ， es 会 自动 删除 文档 。   python 对接   elasticsearch _ dsl   刚 很 推荐 ， 尽可能   elasticsearch - py   模块 ， 内部 doc 语法   官方 文档   教程 都是 ， 原生 查询 语句   kibana 上也 很 好 输入 测试 。 查询 语句 繁琐 点了 ， 开个 python 脚本 文件 统一 管理 。   创建 索引   elasticsearch   数据库   index   索引 概念 ， 一个   doc _ type   概念 ， 不   doc _ type   ， 发现 大体 ， 刚   doc _ type   概念 。   elasticsearch 数据库 默认 开启 自动 创建 索引 ， 删除 索引 操作 暂时 先不 涉及 ， 精力 搜索 修改 数据库 弄 。   忽略 连接 异常   编程 希望 忽略 连接 异常 ， 加上   ignore   参数 即可 ：   返回 内容 过滤   search 方法 加上   filter _ path   参数 指明 只 属性 。   搜索   搜索 格式 所示 ：   更新 文档     Elasticsearch   对象   update     update _ _ query   方法 ， 参数 ：   看了 下 源码 ， update 方法 前 几个 都是 必 填 参数 。   update _ _ query ：   不 太 ， 同步 存储 风格 会 更好 一点 ， elasticsearch 文档 版本 控制 ， 旧 文档 会 慢慢 自动 删除 。   同步 存储   同步 存储   elasticsearch - dsl   模块 很 ， 官方 文档 推荐   DocType   ， 所示 ：   连接 推荐 设置 默认 连接 风格 ：   调用   DocType     init   方法 ：   赋值   save   。   指定 字 段为 es _ id   小节 参考   网页   。   设置   . meta . id   属性 ：   附录   插入 点 数据   数据库 学习 总 要先 插入 点 数据 ， 再 戏 出不 。   阮 一峰 elasticsearch 数据库 入门 教程   描述 ， 参考   篇 文章   ， 说 elasticsearch5 一个 index 下 多个 type ， elasticsearch6 一个 index 下 只能 一个 type ， elasticsearch7 下将 移除 type 概念 ， 简单 。 来看   elasticsearch - dsl - py   项目 提供   插入 数据   类似   model   段 代码 ：   刚 没 意识 ， 意识 ， 操作 ， 网上   elasticsearch 权威 指南   本书 描述 很 不 ， 定义 elasticsearch 数据 模型 ， 下 index 之外 ， doctype 名字 没 定义 ， 发现 大部分 搜索 工作 都能 没 管了 ， 还 不 放心 ， 放心 ， 思考 elasticsearch 数据库 架构 ， 丢弃 type 概念 。   提醒 读者 ， 移 除的 过程 ， 仔细 核对 下你 elasticsearch 数据库 返回 数据结构 信息 。   定义 插件   脱离 提及 elasticsearch 中文 插件 版 ， elasticsearch 最新 版本 6 . X ， 初步 琢磨 下 安装 分词 插件 。 JAVA 块 太 熟悉 ， 慢慢来 。   插件 两种 安装 方法 ， 绿色 版的 推荐 插件 安装 放在   plugins   文件夹 ， 推荐 找到 elasticsearch bin 文件夹 ， 调用   . / bin / elasticsearch - plugin   命令 ， 大体 所示 ：   重启 elasticsearch 服务 即可 。   开启 外网 端口   程序 host 配置   config     elasticsearch . yml   中 配置 ：   正式 产品 运营 是不 设置   0.0 . 0.0   ， 任何人 都 访问 。   Kibana   kibana ， 简单 来说 pgadmin 之于 postgresql ， 一个 图形 界面 查看 elasticsearch 数据库 工具 。   Dev   Tools   学习 elasticsearch 语法 特别 有用 ， 更 细节 请 参看 官方 文档 。   查看 集群 健康   备份   elasticsearch 备份 建立 快照 概念 ， 快照 增量 备份 策略 。   新建 一个 快照 仓库   记得 elasticsearch 配置 文件   elasticsearch . yml   配置 好 ：   新建 一个 快照   查看 已有 快照   删除 目标 快照   插件   列出 插件   安装 插件   移除 插件   参考 资料   Elasticsearch :   权威 指南   IT 自学 教程 Elastic 全文 检索   23 有用 elasticsearch 查询 例子   elasticsearch 入门 教程",
            "tags":"database",
            "url":"articles/elasticsearch.html"
        },
        {
            "title":"gunicorn",
            "text":"简介   gunicorn   挂载 python   wsgi   服务 不错 ， 进程 多线程 支持 ， 提升 服务 性能 。   配置   配置 一个 python 文件 ， 大体 内容 ：   写上 一个 python 文件 ， 启动 gunicorn 挂载 django 服务 大体 ：   配置 ：   pidfile   reload   代码 改变 自动 reload ， 前期 开发 会很 有用   accesslog   access 日志 所在地   errorlog   error   日志 所在地   workers   进程 数   threads   一个 进程 线程 数   worker _ class   worker _ connections   单 进程 连接 数   loglevel   日志 级别",
            "tags":"web_server",
            "url":"articles/gunicorn.html"
        },
        {
            "title":"makefile",
            "text":"简单 下 makefile   makefile 只能 Linux 环境 下 运行 ， 更 确切 来说 要有 gnu   make 工具 去 运行 Makefile 文件 。   makefile 内容 很 ， 实际上 过于 。 简单 功能 很 便利 。   便于 理解 ， makefile 有意 采用 一种 bash   shell 接近 风格 。   project =   一个 定义 变量 。 project 变量 脚本 名字 。 makefile 主体 格式 :   生成 target 文件 ， 确保 prerequisites 依赖 文件 都在 最新 ， 不 最新 查找 目标 生成 规则 生成 。 target 生成 执行 bash 命令 。 例子 讲解 信息 :   特别 ， 命令 请用   Tab 键   隔开   。   变量 读者 例子 ， 有意 采用 类似 bash 脚本 语法 。 写也 支持 。   $ @   符号 神秘 东西 ， 目标 文件名 ， 例子 中 目标   $ { target }   ， helloworld ，   $ @     \" helloworld \"   。   . PHONY   跟着 生成 目标 ， 生成 目标 是伪 目标 ， 或者说 生成 文件 ， 执行 命令 。     $ { CC }     $ { CCFLAGS }   用户 定义 ， 其是 make 命令 默认 变量 。   $ ( CC )   调用 系统 默认 c 编译器 ， gcc 。   make   命令 不 输入 子 命令 时 ， 默认 执行 输出 第一个 目标 命令 ， 是本 项目 目标 。   makefile 命令 都有 一个 独立 终端 ， 终端 不 共享 变量 ， 多个 命令 连接 一个 命令 ， 好在 一个 shell 执行 共享 变量 。 （ export 共享 ？ ）   makefile 扫描 两边 ， 第一遍 变量 替换 ， 第二遍 依赖 关系 。 变量 声明 跟着 规则 ， 保证 变量 声明 改变 。   强制 目标 更新   参考   网页   。   大致 所示 ， 设置 一个   FORCE   目标 ， 凡是 依赖 FORCE 目标 都将 强制 没 都再 更新 一遍 ， 原因 FORCE 目标 不 不 依赖 目标 ， makefile 目标 不 ， 每次 都 会再 更新 生成 一遍 。",
            "tags":"linux",
            "url":"articles/makefile.html"
        },
        {
            "title":"nginx",
            "text":"前言   nginx 官方 文档     ， 参看 官方 文档 。   安装   debian 系 安装 :   rpm 系统 安装 :   nginx 配置 基础   nginx 配置   / / nginx / sites -   新建 一个 配置 文件 ， 创建 一个 符号 链接   sites - enabled   。   重启 nginx 即可 。   nginx 配置 文件 格式 :   nginx 命令 行   nginx   - t   测试   nginx   - s   stop   快速 停用 nginx   nginx   - s   quit   温和 退出 nginx   nginx   - s   reload   重载 配置 文件   通用 配置   通用 配置   global   section   ， 配置 影响 server ， 常在   nginx . conf   中 配置 。   user   工作 进程 下的 user 用户名 。   worker _ processes   工作 进程 数 ，   server - configs - nginx   项目 中的 推荐 设置 :   error _ log   地方 没 设置 ， 默认 错误 日志 输出 路径 。   推荐   / / nginx / logs     / var / log / nginx   ln 命令 统一 ：   http 配置   http   http   section 配置 ， 其是 基于 http   module 。 http   section 一句 :   额外 站点 配置 放在   sites - enabled   文件夹 下 管理 ， 提到 server   放入 http   中 ， 实践 中 会 创建 一个   sites -   文件夹 ， 创建 站点 配置 ， 启用 就用 ln   命令 创建 一个 符号 链接 。   keepalive _ timeout   设置 响应 头   KeepAlive   时间 。   server _ tokens   默认   推荐 。 nginx 版本 信息 隐藏 。   需求 要到 配置 。 比如说   client _ max _ body _ size   ， nginx 请求 实体 过大 错误 信息 :   参考   网页   ， http   section 配置 :   server 配置   listen server _   配置 很 关键 ， 请 参看 附录 介绍 nginx 分配 请求 逻辑 。   location 配置   location 配置 放在   server 。   location 描述   url   该做 动作 。   url 匹配 ， nginx 正则表达式 最长 匹配 最佳 匹配 ， 再 正则表达式 匹配 。   静态 文件 服务 ：   反向 代理 服务 ：   反向 代理 ， 一个 很 知识点 uri 改写 规则 。 东西 很多 ， :   匹配 到的 会被 改写   http : / / 127.0 . 0.1 : 5000 / socket . io   例外 情况 ， 再 详细 讨论 。   root alias 区别   比如说 想要 服务 静态 文件 ：   root ， root 找 ，   / static /     url   传   full   path 。 root ， 再 指定 static 文件夹 名了 。     alias ：   / static /   将被 替换   / home / cdwanze / project / tinyblog / static /   去找 文件 。   小节 参考   网页   。   附录   nginx 分配 请求 逻辑   这部分 内容 很 关键 ， 慢慢 看下 。   请求 ip 端口号 核对   listen   信息 。   请求 Host 字 段来 核对   server _   信息 。   核对 分为   通配符 前   核对   通配符 后   核对   正则表达式   核对   listen server _ 核对 若都 匹配 都 会回 滚到 默认   default _ server   中 。 ( 实践 中 推荐 default _ server   return   444 ， 提升 服务器 访问 级别 。 )   核对 匹配 进一步 配置 请求 。   403 权限 访问 错误   用户 主 文件夹 下的 随便 文件夹 来写 网页 ， nginx server   root   配置 好后 会   403 错误 ， 很 是你   nginx . conf   文件   user   配置 ， 设置 为本 用户 ， 才无 权限 操作 。 ubuntu 下 user 好像 默认 var - www 。 改为 用户名 即可 。 参看   网页   。   参考 资料   mastering   nginx   nginx   官方 手册",
            "tags":"web_server",
            "url":"articles/nginx.html"
        },
        {
            "title":"python-dateutil模块",
            "text":"python 内置 模块 datetime 解决 简单 写 几个 辅助 函数 解决 是没 上   python - dateutil   模块 ， ， 上 python - dateutil 模块 会 ， 发现 好多 有名 模块 都 默认 安装 模块 。   relativedelta   ， datetime replace 值设 0 值 ， timedelta 减去 值 ， 大部分 都能 解决 ， ， 跨 月份 涉及 到要 天数 不 ， relativedelta 很 。   涉及 datetime 跨度 计算 ， 推荐   relativedelta 函数 。   rrule   lrule ， relativedelta 配置 起始 时间 ， 指定 结束 时间 ， rrule 函数 生成 一个 时间 区间 ， 是很 。   parse   dateutil     parse 函数 输入 日期 时间 字符串 datetime   object 很 ， 简单 情况 下 ， datetime   strftime   函数 够用 。",
            "tags":"python_companion",
            "url":"articles/python-dateutil-module.html"
        },
        {
            "title":"supervisor",
            "text":"简介   supervisor 会 开启 一个 后台 服务   supervisord   ：   查看 。 类似 nginx 做法 ， 配置 文件 管理 ， 配置 文件   / / supervisord . conf   文件 。   会 示将 配置 文件 放在 地方 。   配置 都 是等 下 supervisord 加载 。   还 下   supervisor 提供   supervisorctl   命令 。   提供 子 命令 ：   reread   重载 配置   restart   < >   重启 进程   restart     重启 进程   stop   < >   停止 进程   stop     停止 进程   start   < >   启用 进程   start     启用 进程   status   < >   查看 进程   status     查看 进程   clear   < >   清除 进程 日志   supervisor 是将 进程 stdout 日志 输出 源 ， 日志 文件 会被 清除 ， 进程 还 ， 马上 新的 日志 文件 。   clear     清除 进程 日志   update   < gname >   更新   进程 组   配置 ， 配置 发生 更改 ， 进程 会被 重启 。 reread 重载 配置 重启 过程 ， update 更新 配置 ， 重启 进程 ， update 更 实用 些 。   update     更新 进程 配置",
            "tags":"linux",
            "url":"articles/supervisor.html"
        },
        {
            "title":"airflow模块",
            "text":"WARNING   警告 ， 笔者 原因 airflow ， 本文 放在 权作 参考 ， 缺少 新的 内容 ， 旧的 内容 错误 。 【 2019 】   前言   airflow luigi 模块 相比 优点 ：   通用 DAG 概念 描述 工作 流 ， 更 专业 点 。   集成 系统 crontab 支持 周期性 ， airflow 只能 linux 系统 下 运行 。   图形 界面 很 美观 ， 功能 更 强大 。   老实 说 不 喜欢 crontab ， 简单 调度 ， apscheduler 工具 简单 写下 集成 到你 软件系统 中 去 ， 而再 点的 工作 流 ， 流程 管理 ， 都 推荐 airflow 框架 管理 。   说到 大数据 上的 流式 数据处理 工具 ， 实际上 百分之几 公司 业务 上 大数据 ， 大部分 公司 是没 上 大数据 ， 大数据 引入 太 多的 复杂度 ， ， 仅仅 追求 时髦 去玩 大数据 ， 违背 程序 界 公认 KISS 原则 【 Keep     simple     stupid . 】 。   安装 airflow   推荐 起步   推荐   项目 工作 目录 下   . env   文件 下写 上 ：   pipenv 工具 当前目录 激活 工作 环境 ， 自动 激活 airflow 当前目录 下 工作 配置 。 airflow 相关 works 配置 相关 代码 都 放在 。   激活 虚拟 环境 后 ， 操作 ：   初始化 数据库   启动 webserver   数据库   刚 玩下 sqlite3 数据库 ， 正式 运行 要上 正式 数据库 ， sqlalchemy 支持 数据库 airflow 都 支持 。   sqlite3 数据库 是不 支持   LocalExecutor   ， 搭建 项目 大概 项目 百分之八 九十 代码 还 没 测试 好 ， 推荐 sqlite3 数据库 。 LocalExecutor 相 默认   SequentialExecutor   只能 运行 一个 ， LocalExecutor   支持 进程 运行 ， 很 有用 。   运行 情况 数据库 中都 做好 记录 ：     airflow . cfg   配好 配置 ：   sql _ alchemy _ conn   正式 运行 必 做 配置   正式 运行 很多 配置 都要 想好 ， 配置 好 ， 配置 是必 做 修改 ：   executor   正式 运行 ， 推荐 切换   LocalExecutor   支持 进程 运行 ， 分布式   CeleryExecutor   请 启用   airflow   scheduler   好让 配置 自动 周期 运行 。   请 参看   airflow   github 仓库 源码   scripts 文件夹 systemd upstart 配置 服务 脚本 。   编写 dags   配置 DAG 参数 ：   owner   所有者   depends _ _ past   start _ date   email   email _ _ failure   email _ _ retry   retries   retry _ delay   BashOperator   调用 bash 命令 ：   task _ id   名字   bash _ command   bash 命令   还 支持 jinja2 模板 语法 ， 输出 执行 bash 命令   retries   重试 次数   脚本 实际上 一个   DAG   结构 配置 描述 文件 ， python 代码 写在 地方 都是 。 ：   一个 目标 dag 一个 节点 ， 设置 节点 t2 上 一个 节点 t1 ， t3 上 一个 节点 t1 。   PythonOperator   深度 python 爱好者 ， 进一步 讨论 下 PythonOperator ：   重点 一点 ：   dags 配置 文件 ， python 函数 都 移到 地方 ， python 模块 引入 ， 推荐   pipenv     - e   风格 。   一个 参数   provide _ context = True   ， 默认 False ， 设置 True ， 函数 接受 额外 两个 参数 ：   ds 执行 时间 ， kwargs 更 多的 参数 ， 请 参看 官方 文档 API   Macors   。   测试   测试 数据库 中有 记录 。   调度 时间 控制   scheduler 调度 时间 控制 说的 ：   调度 会从   start _ date   计算 ， dag 设置   catchup   =   False   ， 只 会从 最新 dag 间隔 序列 算起 。   调度 间隔 序列 基于 设置   schedule _ interval   属性 ， 时间 分成 一个 一个 片段 ， 目标 dag 运行 是在 目标 间隔 时间 过完 。   clear dag   时间 片的 dag 想要 再 运行 ， UI 上 点击 时间 片的 dag ， 点击   Clear   。   时间 片较 运行 命令 ：   backfill dag   backfill test 运行 状态 会 数据库 记录 ， 会 更改 临时 更改   start _ date   ，   scheduler 照顾 ， 重启   scheduler 照顾 。 backfill 设定 一个 时间 片段 ， 执行 目标 dag   杂谈   大 数据处理 这块 ， 写过 一篇 小 文章 谈过 一点 ， 一个 核心 点   碎片 化   ， airflow 提供 框架 一种 基于   时间 片的 过程   大数据   碎片 化 ， 小 片段 状态 都 记录 好 回溯 。   比如说 程序 时间 片上 抛 出 一个 异常 ， 有意 无意   raise   Exception   ， airflow 记录 小 片段 就会 标记 failed 失败 状态 ， 点击 ， clear 状态 ， scheduler 调度 下 ， 一会 会 启动 。   运行 ， 运行 完 就会 标记   sucess   ， 小 时间 片下 数据 。   一个 建议 设置 好 数据库   updated _ time   ，   updated _ time   切分 数据 时间 片 ， 情况 写   插入 时间 切分 够用 ， 额外 记录 更新 时间 。   参考 资料   airflow 官方 文档   airflow   tutorial   etl     airflow",
            "tags":"linux",
            "url":"articles/airflow-module.html"
        },
        {
            "title":"crontab",
            "text":"crontab 工具 用来 系统 执行 周期性 ， 其在 ubuntu 下 服务 名字 cron ； centos 下 服务 名字 crond 。   crontab 命令 查看 修改 配置 ：   编辑 vi 编辑器 。 crontab   - e 修改 配置 会 生效 ， 不 重启 crontab 后台 服务 。 重启 后台 服务 ， 都会 计时 。 配置 写着 隔 一个 小时 执行 ， 等到 下 一个 小时 才会 执行 。   推荐 写上 一个 分钟 echo 命令 crontab 运行 情况 。   日志 默认   / var / log / cron   （ centos ） 。   配置 含义   ：   小时 24 时制 ， 星期 0 星期日 ， 1 星期一 。 命令 一行 简单 shell 命令 ， 多行 命令 建议 写成 bash 脚本 ， 脚本 执行 权限 ， 写上 脚本 路径 名 即可 。   NOTICE   ：   crontab 执行 命令 shell 环境 下 ， pyenv 环境 工作 ， 推荐 命令 文件 都 路径 。   五分钟 ：   三个 小时 ：   分钟 要写 上 0 ， 新手 很 犯的 一个 错误 。   早上 七点 钟 ：   常见 crobtab 配置   小节 参考   篇 文章   。   每月   0   0   1   *   *   每周   0   0   *   *   0     0   0   *   *   *   五个 小时   0   * / 5   *   *   *   三十分钟   * / 30   *   *   *   *   定时 备份 crontab 配置   远程 连接 服务器 ， crontab   - e 编辑 连接 意外 终止 ， crontab 配置 都会 清空 ！ ！   请加 定时 备份 crontab 配置 命令 ：",
            "tags":"linux",
            "url":"articles/crontab.html"
        },
        {
            "title":"heroku",
            "text":"WARNING   警告 ， 笔者 原因 不 heroku ， 本文 归档 ， 缺少 新的 内容 ， 旧的 内容 错误 。 【 2019 】   。   heroku 上 部署 项目 很 简单 ， 本文 简单 heroku 容器 作用 原理 简单 git 推送 额外 配置 ， 过程 不   heroku   命令 行 工具 ， 网页 操作 ， 修改 文件 。   本文 面向 python ， 推荐 读者 参考   heroku   官方 github   上的 项目 ， 比如说   项目   。 其是 基于 django1.11 ， 看着 模板 理解 东西 ， heroku 上 设置 好 自动 github 同步 。   runtime . txt   文件 用来 执行 python 版本 ， 简单 写上 即可 ：   ， 远程 heroku 会帮 python 运行 环境 python - 3.6 . 3 。   requirements . txt   熟悉 python 开发 人都 文件 ， heroku ， 填写 一个 文件 ， 其和 heroku 远程 调配 好 pip 环境 。   Procfile   文件 包含 进程 类型 声明 ， 进程 类 （ process   type ） 一行 ：   写着   web   启动 一个 web   server 。   执行 命令 启动 web   server 。 gunicron 官方 文档 写着 django 项目 支持 语法 ：   教程 中 一行 ：     log - file   -   gunicron 是把 日志 输出 默认 stdout 。   git 推送 项目   设置 github 自动 同步 ， 推送 到你 github 仓库 即可 。 讲的 heroku 默认 git   url 。   提示 ： 添加 heroku remote   url heroku   命令 行 工具 相关 。   （ 参阅   网页   ）   heroku 命令 行 工具 windows 下 环境 不好 配 ， 很多 功能 都 略过 ，   heroku   run   功能 回避 ， 工作 django 数据库 初始化 手工 输入 命令 ：   django 静态 文件   heroku 日志 中 一行 ：   自动 好了 django 静态 文件 。   django 数据库   在官 网上 管理 好 项目 addon ，   settings   有个   Config   Vars   字段 ， 定义 一个   DATABASE _ URL   值 。     dj - database - url   pypi 包会 自动 刷   DATABASE _ URL   django settings 配置 ， 配置 ：   heroku 命令 行 工具   heroku   create   大体 类似 于你 官 网上 操作 新建 一个 app ， 名字 随机 。   数据库",
            "tags":"programming",
            "url":"articles/heroku.html"
        },
        {
            "title":"loguru模块",
            "text":"    simple   ,       stupid   .   loguru 模块 大概 符合 精神 ， 精力 日志 调配 琐碎 事情 上抽 ， 好让 有更 多的 精力 去 解决 核心 。 基本上 ， 好像 python 新 特性   f - string   ，         stop       .   会 忍不住 想要 。   就最 简单 ：   接触 logging 马上 logger 是个 东西 ， 想   logger . info ( ' ' )   去打 日志 即可 。 默认 logger 日志 格式 好了 。   够用 ， 实际上 容器 化了 场景 ， 日志 都 打印 默认 终端 上的 ， 管理 日志 工具 ， 打印 默认 终端 。   情况 下你 日志 打印 文件 中 ：   还 支持 带 时间 戳的 文件名 ：   文件 控制 更 高级 用法 ：   loguru 很多 高级 用法 ， 再看 ， 最 关键 一个 兼容 logger ， 比如说 tornado django 默认 logger 。   研究 ， 解决 方案 参考 官方 文档 ， 整合 logging 工作 方式 。 logging 都用 loguru logger 再 发送 一遍 消息 。     depth = 6   大有 讲究 ， 设置 6 才能 正确 追踪 原 日志 代码 所在地 ， 日志 信号 再 发送 了的 。     record . levelno   发现 换成   record . levelname   不错 。   原 logging 日志 流就 loguru 整合 。",
            "tags":"python_companion",
            "url":"articles/loguru-module.html"
        },
        {
            "title":"mongodb",
            "text":"简介   mongodb 一款 主流 nosql sql 数据库 区别 很大 ， 类似 ， mongodb collection 概念 大体 类似 table ， ， 摒弃 思维 。 mongodb sql 有这 两个 优点 ， 开发 好好 ， sql 思维 自我 设限 。   mongodb 是不 一个 collection 文档 chema 简单 说 ， key 。   sql join 思维 带入 进来 ， 更好 利用 mongodb 字典 套 字典 ， 列表 塞 字典 特性 。 数据结构 ， mongodb 查询 语法 ， 速度 很快 。   看 例子 ， 本来 一个 doc （ mongodb 最小 一条 记录 doc ） 大概 类似 一个 字典 ， 还 点着 去 查询 ， ， 字典 放 字典 ， 放心 ， 结构 速度 保证 。   安装   本来 安装 不想 多说 了的 ， 历史 原因 ， ubuntu 下的 东西 放在 ， 读者 。   ubuntu 下的 安装 ：   mongo 命令 client 接口 ， mongod 命令 服务端 接口 。 默认 开启 mongod 后台 服务 ， 看 ：   mongodb 后台 服务 默认 端口   27027   ，   mongod   指定 数据库 存放 位置 开启 端口号 ：   默认 mongodb 数据库 存放 点是   / var / lib / mongodb   。   robomongo   一个 不错 图形 界面 管理 mongodb 软件 ， 推荐 。 基本上 mongo 命令 需求 ， 列 东西 ：   show   dbs   显示 数据库   db   显示 数据库 名字     dbname   切换 数据库 创建 数据库 ， 新建 一个 数据库 还 塞点 东西 。 :   show   collections   显示 数据库 colletions 名字 。   exit   退出 mongo   pymongo   mongodb 数据 类型   pymongo ， 很多 python 中的 数据 类型 都 数据 类型 中 ， 很大 ， 数据 类型 需求 ， 查阅 文档 。   值得一提 python datetime 模块 datetime 对象 用来 Date 类型 pymongo 接受 。     ObjectId   查询 ：   引用 ， 进一步 执行   ObjectId   ：   mongodb 数据 json 文件   参考   网页   ， 比如说 想要 mongodb 数据 读 存到 json 文件 中 ， 会 错误 ：   json 文件 读 入和 写入 操作 ， 推荐 风格 所示 ：   额外 提醒 读者 ， bson 模块 ， 安装 pymongo 自动 安装 。   bson . json _ util     dumps   loads   很 有用 ，   bson   提供 很多 mongodb 数据 类型 支持 ， 提及   ObjectId   Binary   Code   。   连接 数据库   代码 想 ， repset 连接 mongodb 集群 写法 。   查找 数据   pymongo 写法 中 ， 喜欢 定位 collection ， 再 操作 ：   查找 数据   find     find _   两个 方法 ， find _   是只 找 一个 目标 记录 （ doc ） ， find 则是 找到 很多 。   过滤器 语法 查找 工作 ， 简单 介绍 ：   过滤器 语法   是最 简单 写上 希望 目标 记录 属性 ，   说的 专业 点 语句 连接 ， 说就 理解 目标 doc 属性 符合 条件 。   属性 操作符 ， ：   查询 得分 大于 0 。   类似 很多 过滤 操作符 ，   $     $ exists   ， 慢慢 。   $ exists   排序   find 跟着   sort   方法 排序 ， 默认 是升 序 （ pymongo . ASCENDING ） 。   插入 文档   更新 文档   upsert   设为 True 过滤器 找到 更新 数据 ， 执行 插入 操作 。   replace _   一个 新 文档 替换 旧 文档 ，   update _   是用   更新 修饰 符   操作 。   更新 修饰 符   更新 修饰 符 大体 ：   $   doc 属性 数值 加上 ，   \" $ \" : { \" score \" : 1 }     score   属性 加 1 。   $ set   doc 属性 设为 。   $ unset   删除 属性   $ push   列表 append 操作   $ pop   列表 右边 一个 元素 删除   $ pull   列表 中 元素 将被 删除   $ pullAll   删除 多个   $ rename   属性 名 更改   $ addToSet   列表 添加 元素 ， 有则 不 加 ， 加上 。   删除 文档   长时间 查询 丢失 cursor   写 一个 脚本 ， 数据库 数据 大 ， find 会 执行 很 长时间 ， 会 返回 一个 cursor   找 不到 错误 ， 是因为 mongodb 自动 关闭 cursor ， find 方法 上 加上 选项 ：   _ cursor _ timeout = True   。   PS :   设置 选项 ， 有时候 会 异常 ， 原因 是因为 操作 文档 doc 记录 文本 较大 ， 设置   batch _ size   ， 默认   4M   ，   最 只能 设置   16M 。   doc 创建 时间   写   created _ time   ， mongodb   ObjectId   是有 doc 创建 时间 含义 ：   原生 mongo 命令   索引   很多 初学 mongodb 人 用了 一段 时间 就会 抱怨 ， mongodb 很 慢 ， 实际上 mongodb 不 慢 ， 很大 一部分 原因 ， 创建 索引 操作 。   mongodb 记录   _ id   字段 默认 是会 创建 索引 ， 会有 字段 ， 程序 会 频繁 查询 ， 文档 记录 很多 ， 加上 索引 ， 程序 会很 慢很 慢 。   查询 会 涉及 多个 字段 ， 推荐 创建 一个多 值 索引 （ 复合 索引 ？ ） ：   备份 还原   mongo 命令 平时 特别 ，   mongodump     mongorestore   两个 命令 ， 一个 mongodb 备份 操作 ， 一个 还原 操作 。   最 简单 流程 上 ， 备份 文件 放在 dump 文件夹 下 。 更 选项 请 读者 自行 。 ：   db   指定 数据库 名 ，   - o   指定 导出 文件夹 名 。   连接 数据库   windows 下 连接 数据库   请 参看   网页   ，   - u   - p   输入 用户名 密码 不 连不 上 ， 查询 发现 还 加上   admin ， 不 太 （ ， linux 选项   - authenticationDatabase   ，   管理 认证 相关 数据库 名字 ） 。   连接 mongodb 集群   查询 只 显示 字段   参考 资料   mongodb     python ,   Author : Niall   O ' Higgins ,   year : 2011   mongodb   -     definitive   guide ,   Author : Kristina   Chodorow ,   May   2013 : Second   Edition   MongoDB   Basics   ,   Author : David   Hows ,   Peter   Membrey   .   year :   2014",
            "tags":"database",
            "url":"articles/mongodb.html"
        },
        {
            "title":"scrapy模块",
            "text":"简介   Scrapy 模块 Django 模块 上 包括 内容 目录 结构 上都 很 ， 两个 项目 干的 两个 事情 ， 想 相似性 更 多的 描述 类似 GUI 界面 那种 类似 。   尝试 过写 一个 小的 Spider 网络 爬虫 程序 ， 网络 爬 取 大体 过程 都是 类似 ， 学习 Scrapy 项目 大体 配置 ， 内部 原理 很 熟悉 ， 本文 地方 赘述 。   scrapy 一个 python 模块 ，   pip   安装 ， 安装 这块 不 多说 。   新建 一个 项目   喜欢 创建 python venv 虚拟 环境 ， path 设置   .   当前目录 下的 。   接下来 编写 爬虫 Spider 脚本 配置 。   第一个 例子   一个 简单 例子 ：   user _ agent   属性 改变 爬虫 情况 USER _ AGENT   HTTP 头 ， 设置 ， 爬虫 ban 。     爬虫 名字 ， 等下 运行 爬虫 名字   scrapy   crawl   spider _   ， 用的 定义 名字 。   scrapy   list   显示 爬虫 名字 。   start _ urls   爬虫 起始 开爬 点 ， 官方 教程 提到   start _ requests   方法 ， 定义   start _ urls   很 简便 。   response 对象   response 对象 获取   response . text   送给 beautifulsoup ，   parse _ webpage _ images     parse _ webpage _ links   做的 ， 是这 两个 写的 函数 很 简便 ， 没 效率 ， 真的 不在乎 一点 ， 还 会 讨论 减缓 爬虫 爬 取 速度 。   官方 教程 提到 response 对象 调用   css     xpath   方法 信息 提取 工作 ， 简单 下 xpath 语法 ， 很 便捷 。   测试 抓取   shell ， 有个   response   对象 ， 写 爬虫   parse 函数 response 对象 。 进一步 做 前期 测试 抓取 工作 。   爬 取   爬 取 爬虫   scrapy   crawl   命令 ：     - a   爬虫 传递 参数 进去   参数 到了 爬虫 传递 给了   __ init __   ：   推荐 采用 笔者 方式 ， 实践 很 优雅 灵活 ，   - a   传递 极少 参数 ， 爬虫 寻找   . ini   配置 文件 所在 ， 加载 配置 文件 进一步   start _ url   爬虫 动作 参数 调配 。   xpath 语法   例子 简要 介绍 xpath 语法 ， 参考   阮 一峰 篇 文章   菜鸟 教程 xpath 教程 。   东西 简单 下 即可 ， 多看 例子 。     /   节点 中 匹配 ，   / /   下 个或 子 节点 匹配 。     *   。   选择 title   选择 到了 文档 中 任意 位置   title   标签 ，   /   开头 会 选择 根 节点 ， 不 太 好用 。   选择 title 包含 文本   id 选择   例子 选择 一个 div 标签 ， id 属性   post - date   ， div 改为   *   则为 随便 标签 名字 。   往下 选   选择 目标 标签 属性   选择 属性   选择 文本   string   选择 节点 （ 返回 节点 集   nodeset 只 取 第一个 ） ， 节点 （ 包括 子 节点 ） 文本 抽取 合并 。   减缓 访问 速度   网络 爬 取中 ， ban （ 403 错误 由此 而来 ） 个大 。 开 代理 换 IP 成本 挺 高的 ， 手段 ， 都在 settings . py 有了 ， 只 去 注释 。 大体 ：   设置 下载 访问 停顿 时间 并行 请求 数 禁用 cookies 。 禁用 cookies 之外 ， 几个 设置 不用 ， 请 官方 文档     。     settings . py   文件 些也 ， 一种 自动 节流 机制 ， 利用 下载 延迟 并行 数来 自动 调节 DELAY 时间 ，   要说 自动 节流   DOWNLOAD _ DELAY     CONCURRENT _ REQUESTS _ PER _ DOMAIN   协作 关系 。 自动 节流 最小 小过   DOWNLOAD _ DELAY   ， 大过   AUTOTHROTTLE _ MAX _ DELAY   。     AUTOTHROTTLE _ TARGET _ CONCURRENCY   一个 节流 建议 ， 极限 ， 单个 域名 并行 请求 数是   CONCURRENT _ REQUESTS _ PER _ DOMAIN   定义 。   控制 输出   scrapy   crawl   命令 默认   - o   test . json   参数 省略 ， settings . py   控制 输出 格式 文件名 ， 请 参看 scrapy 官方 文档   feed - export   一章 。   配置 默认 输出 jsonlines 格式 ， 爬虫 数据 收集 来说 会 更好 一点 ， 容错 率高 一点 ：   慎用 scrapy 高级 特性   请 慎用 scrapy 高级 特性 ， PIpeline ， middleware ， 请 慎用 数据库 。 简单 练手 性质 项目 ， 正式 爬虫 项目 ， 够你 操心 事将 大堆 ， ， 先把 数据 爬 到手 。 弄 高级 特性 数据库 只 会让 精力 吸 走 ， 关注点 爬 取 ， xpath 分析 ， 数据 收集 数据 后处理 上 。   模拟 用户 登录   表单 简单 来说 一个 前端 友好 界面 ， 实质 发送   一个   POST   请求 。   关键 是要 理解 前端 表单 界面 ， POST 参量 。   input         POST   参量 ， action   POST   目的地 。   类似 表单 很多 元素 ， checkbox ， 其都 用户 快速 设置 参量 。   登录 cookies   http 无 状态 ， cookies     session   ， 服务端 数据库 记录 session ， cookies 客户端 。 爬虫 登录 ， 记得 保留 好 登录 成功 cookies 。   请求 ， requests cookies 保存 设置 不好 用了 。 记得 requests session 机制 。   封的 策略   设置 随机 user   agent 策略   禁用 cookie   COOKIES _ ENABLED   =   True   设置 下载 停顿   DOWNLOAD _ DELAY   =   n   代理 池   封的 首要 策略 尽量 别人 服务器 下 ， 写的 爬虫 少 请求 ， 每次 请求 都是 核心 请求 获取 最 核心 数据 ， 是刷 页面 刷 ajax ， 请求 之间 设置 一个 停顿 时间 。   首要 原则 基础 上 ， 介绍 很多 实战 技巧 ， 都 符合 一个 大的 原则 ： 尽可能 地让 爬虫 人 浏览 网页 区别 。   http 请求 头 调整   user - agent   设置 ， 时不时 切换 下 。   还 ， 推测   Referrer   header 场景 下是 文章 。     Accept - Language   有用 。   Cookies   情况 下 cookies 获取 javascript 支持 。 cookies 总的 原则 第一次 请求 获取 cookies ， 很 请求 都 cookies 即可 。   反 爬虫 cookies 都 会有 时间 ， 一个 简单 做法 设置 时间 ， 定时 获取 最新 cookies ， 请求 量 再 获取 一个 新的 cookies 。     scrapy - splash   下 。   表单 陷阱   表单 ：   记住 人 页面 上 点击 ， 显示 字 段的 值也 会 一并 送 ， 服务器 会 值 是个 加密 值来 判断 请求 是人 点的 爬虫 。   策略 是先 表单 内容 爬 ， 收集 好 再 发送 表单 请求 。   情况 ， 一种 情况 ， 页面 表单 发送 特别 ， 表 单字 段 ， 用户 看得见 看 不见 ， 都 发送 ， 发送 会被 毙掉 。   表单 陷阱 ， css 会 动态 input   hidden 属性 ， 好好 分析 下 。   403   forbidden   极有 是你 爬虫 封了 。   高级 议题   JsonPipeline   pipelines . py   文件 定义 写的 Pipeline 类 ， JsonPipeline 类 ：   大体 一个 简单 类 ， 特别 方法 特别 用处 。 jsonpipelie 不 实用 价值 ， 简单 下 即可 。   ImagesPipeline   想要 自动 下载 图片 ， 没 ， scrapy 内置 功能 ！ 做的 收集 好 图片 连接 。 设置 里要 加上 一行 ：   设置 里 相关 配置 :     IMAGES _ URLS _ FIELD   默认 值是   image _ urls   ， items 对象 加上 属性 ， 其是 一个 列表 值 。   IMAGES _ RESULT _ FIELD   默认 值是   images   ，   值 ImagesPipeline 会 自动 填充 ， 不 管的 。 改 名字 是因为 不 喜欢 很多 图片 混 ， 做 分开 。   MongoDBPipeline   想要 数据 实时 填 入到 mongodb 去 ？   MongoDBPipeline   即可 ，   配置 加上   数字 执行 优先级 ， 没什么 特别 含义 。   配置 ：   插件   MONGODB _ COLLECTION   值 默认   items   个死 ， 还 很 满意 。   MONGODB _ UNIQUE _ KEY   还 不 ， 时间 。   settings 传递   爬虫 初始化 后 ，   . settings   ， 调用   settings . py   文件 配置 变量 。 写 pipeline ， ：   open _ spider   打开 爬虫 后的 动作 ， 定义   . mongodb   是将 目标 mongodb   数据库 对象 挂载   pipeline 上 ，   spider . mongodb   是将 变量 挂在 爬虫 上 ， 爬虫 类 都是   . mongodb   调用 目标 变量 ， 说 爬虫 类   __ init __   方法 还 不 大 。 写 pipeline   crawler . settings   配置 变量 ：",
            "tags":"crawler",
            "url":"articles/scrapy-module.html"
        },
        {
            "title":"vi编辑器",
            "text":"推荐 先 安装 完整 版的 vim ， 按键 乱码 会 自动 解决 。 中文 输入法 状态 下 会 切换 vi 模式 困扰 。   vi 编辑器 第一条 ， 记住   i   编辑 模式 ， 按键 都   Esc   退出 编辑 模式 才 。   常用 快捷 键   按键 针对 常见 键盘 ， MAC 下 按键 会 有所不同 。   Ctrl   +   f   屏幕 向下 一页   G   一行   gg   第一行   推荐   1G   行跳 转 操作 ，   100G   是跳 转 到第 100 行 。   dd   删除 行   yy   复制 行   p   粘贴   u   撤销   r   redo   块 选择   按键   v   块 选择 ， 光标 块 选择 。   y   复制 块   d   删除 块   查找   匹配 单词   搜索 精确 匹配 含有 \" Lao   Zi \" 字符串 ，   查找 \" Lao   Zi \" ， 查找 下 一个   查找 历史   输入   /   方向 键 ， 如同 终端 上 方向 键 调用 上 一个 命令 ， 调用 上 查找 命令 。 很 有用 。   反向 查找   问号     反向 查找 。   n   ， 下 一个 反向 ， 理解 n 是将 上 查找 命令 重做 。   锚定 行的   正则表达式 知识 ：   &# 94 ;   符号 一行 。 执行 查找 命令 ：   算是 一个 小型 正则表达式 匹配 模式 ， 自然语言 描述 ： 匹配 T 行首 ， 还 一个 字母 h 文本 。 The This 开头 行都 匹配 进去 ， 请 读者 试试   / &# 94 ; This   精确 匹配 T 行首 ， 跟着 字母 文本 。   锚定 行的 结尾   $   符号 一行 结尾 。   空行   / &# 94 ; $   。 将会 匹配 一条 字符 空行 。   替换   全局 替换     %   文档 ，   快速   shift + g   快速 文档 尾部   gg   快速 文档 头部   vimrc 配置   用户 主 文件夹 下的   . vimrc   文件 vi 编辑器 定制 配置 。   vi 编辑器 下 输入   :   ， 写下 配置 ， 会在 编辑器 上 生效 。   解决 Backspace 键 乱码 方向 键 乱码   自动 缩进   显示 行号   开启 语法 高亮   ​",
            "tags":"editor",
            "url":"articles/vi-editor.html"
        },
        {
            "title":"网页seo",
            "text":"seo 简介   SEO 英文 （ Search   Engine   Optimization ） 缩写 ， 搜索引擎 优化 。 简单 来说 网站 搜索引擎 中 排名 更 高的 方法 研究 。   外链   网站 引用 网站 提高 网站 排名 ， 搜索引擎 算法 中 一个 很 指标 。   meta 标记   早期 搜索引擎 是会 爬 取 meta 源 标记 信息 ， 所示 ：   搜索引擎 发展 方向 忽略 指定 关键词 ， 分析 关键词 。   无疑 seo 最最 内容 ：   更新 高质量 内容   更新 高质量 内容   无疑 将是 seo 重中之重 。 搜索引擎 发展 越来越 智能化 ，   更 用户 需求   网页 ，   用户 体验 网页   无疑 更 高的 排名 。 做 假想 ， 搜索引擎 都 检测 目标 网页 评论 数 ， 点赞 数 ， 来给 目标 网页 更 高的 评分 ， 已知 因素 衡量 一篇 网页 网站 价值 上会 越来越 ：   因素   跳出 率   只 访问 入口 网页 离开 访问量 占总 访问量 百分比   用户 访问 深度   用户 访问 网站 打开 总 页面 数 （ 跳出 率在 衡量 网站 价值 上 会 有失 偏颇 ， 博客 。 ）     2017 排名 因素 篇 文章   介绍 ， 推荐 网站   https   链接 。   网站 流量 点击率 排名 影响 ， 是对 高 查询 量的 关键词 。   查询 站点 收录 情况   google   seo 文档 学习   参看   google 文档   。   title 很   description   元 标记 很 ， 过短 过长 重复 元 标记   html   < meta   content = \" 指南 对象 &# 10 ;   Google   搜索 运营 、 管理 推广 在线 内容 ， 在线 内容 获利 ， 则本 指南 。 业务 快速 发展 商家 、 拥有   \"   = \" description \" >   元 标记 很 ，   Google   会将 用作 网页 摘要 。   google   文档 原话 ， 说的 ， 优化 优化 下 。   em     strong   标签 会 影响 google 分析 文档 ， 它将 视为 文字 ， 文字 本文 关键词 有很 关联性 。   添加 结构化 数据 标记 （ TODO ）   网站 结构 导航 条 优化   读者 想的 提供   链接 文字 优化 ， 点击 ， 文章 ， 而应 描述 文字 （ 做 不 太 好 ）   优化 图片   alt   信息   推广 网站 （ google 言下之意 网站 访问量 因素 ）     google 网站 管理员 工具     bing 网站 管理员 工具   。   分析 网站 上的 用户   facebook 爬虫   facebook 上 分享 网页 ， facebook 爬虫 就会 工作 ， facebook 推荐   Open   Graph   Tags 定制 分享 页面 效果 ：   twitter 爬虫   twitter 分享 类似 twitter   card 标准 ：   seo 术语   PV   page   view   页面 浏览量   Visit   访问 次数   UV   独立 访客 数   参考 资料   seo 教程 - 极客 学院   social - meta - tag",
            "tags":"html5",
            "url":"articles/web-seo.html"
        },
        {
            "title":"狄克斯特拉算法",
            "text":"前言   狄 克 斯特拉 算法 用于 加权 有向 图 寻找 最 短 路径 算法 。 加权 有向 图 有向 图的 基础 上 增加 权重 属性 。 更 确切 来说 狄 克 斯特拉 算法 只 加权 有向 无 环 图 ， 权重 为负 权重 。   加权 有向 无 环 图的 来说 继承 自有 向无 环 图 ， 再 新增 一个   weight _ data   字典 值来 存储 边的 权重 值 。 定义 默认 权重 值为 1 。   图所 示 ， 找到 1 4 最 短 路径 ：   狄 克 斯特拉 算法 搜索 过程 自然语言 描述 ：   初始化 一个 costs 字典 ， 起点 0 外 ， 都 设为 infinite 。   costs 字典 找寻 cost 最小 顶点   计算 顶点 子 节点 总 cost — — 起点 算起 。 发现 找到 新的 路径 路径 cost 记录 costs 值 相比 更 小 ， 找到 一个 更好 路径 。 采用 一种 树 结构 记录 最小 路径 树 ， 找到 更好 路径 ， 子 节点 关联 路径 移除 ， 再 插入 新的 路径 。   顶点 完 记录 ， 不再 。 costs 找 cost 最小 顶点 ， 最小 cost 开销 向下 扩展 。 最终 会 一个 最小 路径 树 。     狄 克 斯特拉 用更 通俗 话语 表述 往外 扩展 路径 ， 节点 最小 cost 路径 最终 会被 记录 。   最 短 路径 ， 加上 两句 降低 程序 搜索 开销 ：   最终 利用 Tree 写   shortest _ path _   方法 很 最小 开销 路径 ：   样例 图片 情况 转成 测试 代码 ：   参考 资料   Dijkstra ' s   shortest   path   algorithm",
            "tags":"algorithm",
            "url":"articles/dijkstra-algorithm.html"
        },
        {
            "title":"图算法之有向无环图",
            "text":"前言   有向 无 环 图   ， 英文 缩写   DAG ， （ directied   acyclic   graph ） 。 其是 有向 图的 基础 上   无环   判断 条件 。 无环 指 有向 图 任意 顶点 出发 若干条 都 回到 顶点 。   最先 接触   DAG   术语 ， 是在 找 工作 流 软件 ， 工作 流的 通用 方法   DAG   。 ？ 假设 工作 流中 节点 员工 ， workflow 走 ， 闭环 ， 无限 循环 流程 中了 ， 那可真 蠢了 。   比如说   git   版本 控制 ， 内部 版本 控制 流程 用的 向无 环 图 ， 版本 修改 修改 ， 回到 老 版本 ， 版本 控制 失效 。   聪明 朋友 肯定 想到 宇宙 时间 是不 可逆 ， 也就是说 模型 宇宙 信息 数据 变动 流 结构 ， 是有 向无 环 图 。     图 算法 建模 初步   一文 中 有向 图   DirectedGraph   类 ， 该类 基础 上只 加上 额外 无 环 判断 操作 即可 。   图论 算法 ， 没什么 好 想的 ， 图 论的 拓扑 排序 方法 判断 一个 有向 图 是否是 无 环的 。   wiki 上有 伪 代码 ， 下看 ：   算法   Kahn   算法 ， 思路 请 读者 假想 目标 研究 有向 图 一个 闭环 ， 闭环 节点 都有 箭头 ， 不 set   S ， 其在 算法 中 只   m   中被 选中 ， 闭环 中的 节点 n 中 ， 算法 再 运算 ， 语句 闭环 中的 m 来说 都 成立 。   假设 几个 节点 都有 入口 ， 顺藤摸瓜 ， 逐个 删除 节点 都 放到 S 去的 。   一个 担心 ， 算法 终止 ， 闭环 。 初步 判断 闭环 内的 节点 m S ， 节点 慢慢 会被 放入 L 。 OK ， 写 代码 ， 再 看 。     该类 继承 自有 向图 类 ， 修改 增加 边的 动作 ， 加上 sort 无环 判断 ， 发现 增加 一个 图 有环 ， 将移 ， 并抛 出 异常 。   sort 方法 来说 基本上 提及 wiki 伪 代码 ：",
            "tags":"algorithm",
            "url":"articles/directied-acyclic-graph.html"
        },
        {
            "title":"jquery",
            "text":"WARNING   本文 归档 ， 前端 编程 推荐 前端 框架 DOM 操作 ， 简单 DOM 操作 jquery 功能 javascirpt 语言 完善 ， jquery 显得 不怎么 合适 。 javascript 编程 不 推荐 jquery ， 更 信息 请 参见   javascript 学习 笔记 - jquery 小节   。   jquery 语法   jquery 语法 :   单   $ ( selector )   返回 找到 对象 数组 ， action 是对 找到 对象 都 动作 。   文档 初始化 执行 动作   还 常见 一种 简化 写法 ：   会 写法 ：   运行 一个 匿名 函数 ， 参数 ( JQuery ) ，   $   符号 ， 不与 库 冲突 。 （   参考 篇 文章   ）   获取 屏幕 宽度 高度   两个 方法 更 确切 描述 返回 所选 元素 宽度 高度 。   innerWidth     innerHeight   方法 （ 包含 内边 距 ） ，   outerWidth     outerHeight   包含 内边 距和 边框 。   hide 方法   实际上 css 设置   display :   。   隐藏 id test 元素 。   获取 文本 修改 文本   text ( )     html ( )   方法 ， 写上 html 标签 。   获取 表单 值或 修改   val 方法   css 操作   添加 class   删除 class   修改 css   按钮 变为 选   prop 方法 设置 返回 选 元素 属性 。   移 除所 选 元素   remove 方法   所选 元素   选中 元素 目标 元素 中 。   复制 所选 元素   选中 父 元素   选中 子 元素   选中 元素 几个   事件 绑定 动作   鼠标 事件   click :   鼠标 单击 时 触发 ；   dblclick :   鼠标 双 击时 触发 ；   mouseenter :   鼠标 时 触发 ；   mouseleave :   鼠标 移出 时 触发 ；   mousemove :   鼠标 DOM 内部 时 触发   （ 接受 e   ， e . pageX 鼠标 x 值 ， e . pageY 鼠标 Y 值 ）   hover :   鼠标 退出 时 触发 两个 函数 ， 相当于 mouseenter 加上 mouseleave 。   键盘 事件   键盘 事件 仅 作用 焦点 DOM 上 ，   < input >     < textarea >   。   keydown :   键盘 下时 触发 ；   keyup :   键盘 松开 时 触发 ；   keypress :   键后 触发 。   取消 事件 绑定   jquery   动画 效果   面板 展开 隐藏   滑动 面板     jquery   .   ajax   jquery 基于   XMLHttpRequest   ， 不得不 承认 jquery ajax 这块 写得 实在 是太 好了 。     回调 函数 接受 两个 参数 ， 传 回来 data 状态 码 。 等价 ：   请求 data 附加 url 上 。   getJSON   等价 ：   dataType 设置 json   post   等价 ：   data 发送 请求 发送 服务器 数据 。 dataType 可选 ， 会 智能 判断 服务器 响应 数据 。   跨 域   参看   js 跨 域   篇 文章 ，   XMLHttpRequest   跨 域的 。 所说 jsonp ， 一种 跨 域的 解决 方案 ， 不想 太 深究 ， restful   api 都是 采用 json 格式 ， jsonp 之外 ， 服务端 加上 响应 头也 ：     先 网络 加载 jquery 本地 加载   代码 是先 网络 加载 jquery ， 本地 找找 看 。   参考 资料   Javascript 权威 指南   David   Flanagan 著 .",
            "tags":"javascript",
            "url":"articles/jquery.html"
        },
        {
            "title":"蒙特卡罗模拟",
            "text":"前言   蒙特卡罗 模拟 蒙特卡罗 一个 赌 运气 游戏 名字 ， 蒙特卡罗 模拟 计算机 发展 背景 下 ， 思想 越来越 。 简单 来说 试图 一个 转成 某种 随机 过程 ， 计算机 模拟 随机 过程 解答 。 自然界 ， 本身 暗含 随机性 ， 过程 建立 基于 随机性 模型 是很 直观 。 还 ， 计算   \\ ( \\ pi \\ )   值 ， 随机性 很 相关 ， 随机 过程 ， 计算 出   \\ ( \\ pi \\ )   值 。 随机 过程 来试 解决 方法 蒙特卡罗 方法 。   一个 模拟 随意 游走 代码 ， 参考 MIT python 编程 导论 书 ：   代码 都是 很 简单 直观 代码 。 定义   绘图 函数 ：   绘制 简单 线性 拟合 线的 ， 想到 很多 东西 ， 热门 机器学习 ， 随机 过程 模拟 ， 统计 过程 分析 ， 作图 演示 概念 都是 密不可分 。   比如说 简单 一元 函数 拟合 ， numpy 提供 polyfit 函数 ， 本身 支持 ， 做 多项式 曲线拟合 。 拟合 过程 方法   最小 二 乘法   ， 其内 构建 一个   函数 ： 函数 值 最小 ：   $ $   \\ sum   ( y   -   y _ { predict } ) &# 94 ; 2   $ $   函数 还 误差 函数 。 机器学习 平方 损失 函数 ， 机器学习 会 接触 到更 多的 损失 函数 ， 梯度 下降 算法 扮演 角色 等同于 最小 二 乘法 ， 目标 损失 函数 值 最小 ， 参数 。 参数 扔 进 多项式 ， 成了 模型 。   实际上 线性回归   多项式 回归 过程 是和 差不多 ， 还 提供 predict 操作 ， 思路 换成 机器学习 那种 建模 说法 。   机器学习 中的 线性回归 会 引入 更 多的 数据 更 多的 特征 变量 ， 建模 会 ， 大体 过程 类似 谈及 。   说 一句 题外 话 ， 很多 人对 深度学习 都抱 一种 统计学 轻蔑 态度 ， 过了 ， 正 量变 质变 ， 东西 做的 就和 原本 简单 回归 大相径庭 ， 不 单单 指 厉害 任意 曲线 拟合 能力 ， 更 多的 质变 ， 学习 角度 慢慢 去 理解 是没 。   随机 游走 深究 ， 解决 计算   \\ ( \\ pi \\ )   之外 ， 再 对更 多的 概率 统计 知识 理解 之外 ， 再 介绍 更 多的 函数 拟合 绘图 ， 差不多 顺理成章 转到 机器学习 块 去了 ， 去 建立 更 多的 机器学习 模型 ， 解决 更 。 或者说 更 牛 掰 ， 模拟 计算 世界 。",
            "tags":"algorithm",
            "url":"articles/monte-carlo-method.html"
        },
        {
            "title":"算法复杂度",
            "text":"讨论 算法 复杂度 关注 算法 时间 复杂度 ， 真 到了 思考 算法 时间 复杂度 ， 算法 应对 一个 输入 规模 n 很大 情况 。 提出 大 O 表示法 描述 一个 算法 面对 操作数 n 很大 ， 输入 数 规模 n 很大 情况 时 ， 算法 计算 时间 操作数 n 关系 。 一个 输入 规模 n 很大 情况 ， 还 关心 最 变量 赋值 ， 条件 判断 ， 文件 加载 几步 意义 ， 操作数 n ， 步骤 n 无关 ， 耗费 常数 时间 项 ， 时间 几秒 ， 会 变得 无足轻重 。   算法 输入 规模 n 无关 ， 则记 O ( 1 )   常数 运行 时间 。   循环 语句 ：   循环 输入 规模 n 相关 ， 记作   O ( n )   线性 运行 时间 。   假设 一个 算法 提到 O ( 1 )   ， O ( n )   ， O ( 1 )   项 去掉 ：   运行 时间 一个 多项式 的和 ， 保留 增长 速度 最快 项 ， 去掉 各项   提到 算法 复杂度 简单 记为   O ( n )   。   假设 有个 算法 ， 两个 循环 ：   道理 讲 算法 复杂度 记作   2n   ， 大 O 表示法 规则 ：   项是 一个 乘积 ， 去掉 常数   算法 复杂度   O ( 2n )   简化   O ( n )   ， 算法 线性 运行 时间 。   两个 循环 嵌套 情况 ：   运行   n * n   次 ， 算法 复杂度 记为   \\ ( O ( n &# 94 ; 2 ) \\ )   ， 二次 多项式 运行 时间 。 会有 情况 ， 第二层 循环 会多 运行 几次 少 运行 几次 ， 都是 细枝末节 ， 说的 第一条 规则 ： 展开 增长 速度 慢的 项将 去除 ， 只 剩下   \\ ( O ( n &# 94 ; 2 ) \\ )   。   递归 情况   以阶 函数 例 ， 递归函数 计算 复杂度 递归函数 展开 ：   $ $   fac ( n )   *   fac ( n - 1 )   ...   fac ( 1 )   $ $   展开 序列 长度 递归 次数 计算 复杂度   O ( n )   。   对数 复杂度   考量 对数 复杂度 是不 关心 对数 底数 ， 提及 第二条 规则 乘积 常数 项 忽略 。   例子 读者 看的 循环 次数 输入 规模 n 数次 ，   O ( logn )   。   二分 查找 算法 计算 复杂度 对数 复杂度 ， 大致 2 底数 压缩 查找 空间 。   对数 线性 复杂度   O ( nlog ( n ) )   快速 排序 算法 计算 复杂度 对数 线性 复杂度 。   选择 排序 计算 复杂度 粗略 估计 长度   \\ ( O ( n &# 94 ; 2 ) \\ )   ， 直观 算法 有个 循环 套 循环 。   选择 排序 快速 排序 说 直观 计算 复杂度 等级 ， 运算 效率 提升 有多 。 测试 ：   ， 速度 提升 接近 100 倍 。   快速 排序 计算 复杂度 估算 有两 ：   小 大部分 合计 约 n 判断 操作   递归 层级 展开 ， 递归 层级 深度 展开 要看 选的 pivot 分割 点 情况 ， 最 不好 情况 pivot 最小 ， 递归 树 深度 带来 复杂度 O ( n ) ； 情况 pivot 分割 点 均分 列表 ， 递归 树 深度 带来 复杂度   \\ ( log _ 2n \\ )   。   情况 最 坏 ， 对数 复杂度 不 log 函数 底数 因子 ， 快速 排序 计算 复杂度   \\ ( O ( n \\ log ( n ) ) \\ )   。   python 语言 排序 算法   蒂姆 · 彼得 斯因 不满 python 排序 算法 （ 估计 类似 快速 排序 ） ， 2002 年 发明 timsort 算法 ， 思路 类似 快速 排序 ， 利用 数据 集 数据 有序 情况 ， 优化 。   python list . sort sorted 函数 timsort 算法 。   字典   字典 查找 key 计算 复杂度 O ( 1 ) ， 字典 长度 无关 ， 内部 散 列表 算法 。   python 字典 基于 红 黑 树 二 叉 搜索 树 ， 理解 错了 。 python 中的 字典 基于 hash   table   散 列表 ， 其查 、 插入 、 删除 计算 复杂度 都是   O ( 1 )   ， 引入 一个 散列 函数 ， 一个 大规模 输入 空间 映射 一个 小的 输出 空间 ， 数量 key 转换 数量 少的 整数 索引 。",
            "tags":"algorithm",
            "url":"articles/algorithmic-complexity.html"
        },
        {
            "title":"树算法之二叉搜索树",
            "text":"二 叉 搜索 树   二 叉 搜索 树 （ Binary   Search   Tree ） :   一个 节点 都 至多 两个 子 节点 ， 节点 都 三个 条件   左 节点 值 小于 父 节点   右 节点 值 大于 父 节点   节点 值均 不   二 叉 搜索 树的 插入 复杂度   O ( log   n )   ， 查找 复杂度 情况   O ( log   n )   ， 最 坏 情况   O ( n )   。   图片 二 叉树 ， 假设 插入 19 ， 8 ， 大 ， 则右 ， 再和 10 ， 大则 右 ， 再和 14 ， 大则 右 ， 空就 插入 。   假设 查找 19 ， 过程 大体 类似 的和 8 ， 大则 右 ， 再和 10 ， 大则 右 ， 再和 14 ， 大则 右 ， 找到 。       树 算法 建模 初步   中 构建 Tree 类   BinarySearchTree   类 。 定义 目标 节点 左 节点 left 右 节点 ， 一个 children 第一个 元素 ， 一个 children 第二个 元素 。   插入 动作   二 叉 搜索 树的 定义 ， 编写 插入 动作 查找 动作 。 树要 插入 节点 指明 父 节点 插入 ， 而二 叉 搜索 树是 说 插入 节点 树上 插入 ， 位置 会 自动 计算 。 二 叉 搜索 树 插入 动作 查找 动作 依赖 一个 大小 过程 ， 树的 节点 随意 字符串 ， 很 好 大小 。   大小 将会 采用 python hash 函数 。   hash ( object )   调用 object   __ hash __   方法 。 值得一提的是 大小 ， 不 某种 意义 ， :   插入 动作 代码 过程 清晰 ， 描述 二 叉 搜索 树的 定义 过程 类似 。 小的 左边 插 ， 大的 右边 插 。   查找 动作   查找 动作 类似 插入 动作 描述 ：   参考 资料   http : / / www . laurentluce . / posts / binary - search - tree - library - - python /   二 叉 搜索 树 wiki",
            "tags":"algorithm",
            "url":"articles/binary-search-tree.html"
        },
        {
            "title":"二分查找",
            "text":"二分 查找   二分 查找 接触 过吧 ， 不怎么 重视 ， 一种 快速 查找 方法 ， 参看   网页   ， python   index   方法 二分 查找 ， 大规模 查询 会很 吃力 。 python sequence 对象 都 预 排序 ， 说法 可信度 很 高的 。 利用 python   bisect   模块 ， 构建 出 一种 预 排序 支持 更 快 查询 接口 ， 内部 二分 查找 。   二分 查找 思想 一个 排序 了的 列表 ， 查找 元素 ， 则将 目标 列表 二 分为 两段 ， 目标 元素 分割 点的 元素 大小 ， 目标 元素 分割 点的 元素 小 ， 列表 中 要找 元素 假设 在较 小的 区段 ， 较大 则在 较大 区段 ， 递归 缩小 查找 区间 ， 找到 目标 元素 列表 位置 ， 发现 不 列表 中 。   看 MIT 视频 ， 第三 课讲 到了 利用 二分 查找 思想 求解 平方根 ， 启发 很大 。 是那 一句 :   计算机 找 不到 方法 ， 实际上 都 穷举 ， 穷 举的 过程 ， 不 一个个 都试 ， 只 集 排序 ， 二分 查找 快速 缩小 集 ， 更 快地 趋近 理想 。   ， 二分 查找 思想 可不 限于 查找 ， 看作 一种 更 计算 思想 。 本文 先试 更 抽象 角度 讨论 二分 查找 。   抽象 二分 查找 思想 讨论   集 函数 f ( x ) 输入 参数 ， 目标 参数 target ， 令 f ( x ) = target 说 找到 目标 x ， 或者说 目标 x 符合 函数 f ( x ) = target 关系 。 假设 考察 对象 f ( x ) 目标 集内 简单 增减 关系 ， 目标 集合 由此 排序 ， 二分 查找 找到 目标 x 。   查找 例 ， f ( x ) 函数 f ( x ) = x ， 输入 输出 。 x = target ， 说 目标 x 符合 条件 f ( x ) = target ， 则该 x 要找 目标 x 。   定义   f ( x ) = x * x   ， 要找 x 符合 条件   x * x = target   ， 求 平方根 过程 。   来看 最 简单 查找 匹配 操作 ：   平方根 ，   x * x = target   过程 ， 定义 函数 简单 改 即可 :   利用 numpy   arange   函数 生成 一个 集 。   :   bisect 模块   bisect 模块 提供 二分 查找 支持 ， bisect _ left 函数 ：   底层 c 加速 ， 返回 一个 索引 值 ， 索引 值 ， 执行   a . insert ( x )   ， 目标值 插入 目标 位置 ， x a 中 ， 插入 是最 左边 位置 。 ：   iter _ search   讲 题外 话 ， 提到 集的 ， 想到 多个 函数 参数 ( a , b , c ) 形式 ， 多元 函数 ， 排序 ， 大小 ， 增减 性 ？ 只好 回 滚 到最 原始 穷举 过程 。   比如说 孙子 算经 :   今 有雉兔同 笼 ， 上有 三十五 头 ， 下有 九 十四 足 ， 问雉兔各 几何 ？   穷举 函数 :   很 简单 一个 函数 ， 很 简单 逻辑 ， 实际上 先 迭代 对象 ， 找到 对象 复合 条件 ， 返回 对象 过程 程序 模式 常见 。   笛卡尔 积 生成 集 :   很 直观 化为 两个 条件 来对 集 过滤 操作 :   :",
            "tags":"algorithm",
            "url":"articles/binary_search.html"
        },
        {
            "title":"图算法之广度优先搜索和深度优先搜索",
            "text":"前言   广度 优先 搜索 ， 英文 名 ： breadth - - search ， 简写 bfs 。 深度 优先 搜索 ， 英文 名 ： depth - - search ， 简写 dfs 。   广度 优先 搜索 深度 优先 搜索 很 广 ， 用于 图 数据结构 ， 用于 树 数据结构 。 一种 遍历 图 树的 搜索 方法 ， 利用 遍历 过程 解决 ， 求解 两个 节点 之间 最 短 路径 。   广度 优先 搜索 搜索 过程 中 利用 一个 队列 存储 节点 ， 图的 搜索 上 ， 是每 往外 扩展 一级 就将 子 节点 到待 中 去 。   深度 优先 搜索 利用 一种 递归 写法 ， 函数 查找 子 节点 ， 找 不到 子 节点 为止 ； 再 返回 未做 完 节点 。   视频 讲解   制作 B 站 视频 讲解 ：     广度 优先 搜索   利用   树 算法 建模 初步   一文 中 讨论 Tree 类树 数据结构 遍历 过程 生成 树的 存储 。   深度 优先 搜索   最小 路径 求解   求出 生成 树 ， 实际上 最小 路径 ， start end ， 选择 end level 层级 最小 节点 ， 最小 路径 。 生成 树 过程 做 小的 优化 ：   找到 目标 节点 ， 至少 确认 目标 节点 兄弟 节点 是没 再找 ， 再找 只 是更 长的 路径 。",
            "tags":"algorithm",
            "url":"articles/graph-algorithm-bfs-dfs.html"
        },
        {
            "title":"图算法建模初步",
            "text":"前言   解决 现实 世界 中的 ， 很 自然 作图 来试 建模 ， 最 核心 精简 一种 用小 圆点 连接 小 圆点 直线 ：   小 圆点   顶点   ， 连接 顶点 直线 曲线     。   顶点 记作 Node ， 边记 作 edge 。 图的 顶点 数目 图的 阶 ， 记作 Order 。   图 方向 没 方向 ， 用带 箭头 直线 边有 方向 。 方向 ，   无向 图   ， 线有 方向 ，   有向 图   。   有向 图 ，   入度     出度   两个 专业 术语 ， 顶点 入 度是 指 顶点 边条 数 ； 顶点 出 度是 指 顶点 边条 数 。 入度记 作   - degree   ，   出 度记 作   - degree 。     Graph 类   图 Graph 抽象 基类 ， 图 是有 图 是无 图 ， 再 讨论 。   定义 方法 ， 图 都 方法 ：   DIRECTED   属性 ：   True 图 有向 图 ， False 图 是无 图 。   nodes 方法 ： 遍历 本图的 顶点   neighbors 方法 ： 返回 顶点 相邻 顶点   edges 方法 ： 遍历 本图的 ， 一个 抽象 方法 ， 边的 判断 放 。   _ node 方法 ： 本图 有该 顶点 ， 顶点 唯一 标识 字符串   _ edge 方法 ： 本图 有该 ， edge 存储 形式 判断 都往 放 。   add _ node 方法 ： 增加 一个 节点   add _ edge 方法 ：   增加 一个   UndirectedGraph 类   无 图的 数据 采用 形式 ：   字典 keys 图的 顶点 ， 值 顶点 相邻 顶点 ， ：   接下来 遍历 一个 技巧 字典   { a , b }   形式 无 图的 ， 边就 连接 两个 顶点 顺序 无关 。   NOTICE   顶点 a 顶点 a 字典 形式   { a }   ， 长度 1 ， 额外 。   新增 一个 顶点 新增 一个 再 讨论 ， 来看 有向 图 情况 。   DirectedGraph 类   有向 图的 数据 存储 结构 ：   字典 keys 图的 顶点 ， 值 顶点 指向 相邻 顶点 。 ：   接下来 遍历 边的 ， 才 用了   ( a , b )   形式 有向 图的 ， 边就 连接 两个 顶点 顺序 。   完善   增加 节点   无向 图 ：   有向 图 ：   没 好说 。   增加   无向 图 ：   有向 图 ：   利用 写   _ edge   方法 会让 程序 逻辑 更 清晰 。   无向 图 方向 ， u v v u 添加 两次 。   有向 图的 入 度和 出度",
            "tags":"algorithm",
            "url":"articles/graph-algorithm-first-lesson.html"
        },
        {
            "title":"快速排序",
            "text":"前言   快速 排序 思路 利用 递归 思想 ， 将大 成小 。   利用 递归 解决问题 大概 两点 ：   递归 终点   递归 切分   快排 递归 终点 序列 长度 小于 2 ， 则其 顺序 自然 。   快排 递归 切分 是取 一个点 ， 点 随意 ， 将比 元素 小的 放 ， 将比 元素 大的 放 。 顺序 ：   _ part   pivot   greater _ part   。 _ part     greater _ part 操作 ， 再将 列表 组合 即可 。   快排 算法 复杂度   O ( nlogn ) ， 排序 算法 算是 第一 梯队 ， 效率 很 高 。 n 不 大的 快速 排序 选择 排序 差别 不 大 ， n 很大 快速 排序 选择 排序 快 很多 ， 奥秘 就在 算法 复杂度 上 。   快速 排序 计算 复杂度 估算 有两 ：   小 大部分 合计 约 n 判断 操作   递归 层级 展开 ， 递归 层级 深度 展开 要看 选的 pivot 分割 点 情况 ， 最 不好 情况 pivot 最小 ， 递归 树 深度 带来 复杂度 O ( n ) ； 情况 pivot 分割 点 均分 列表 ， 递归 树 深度 带来 复杂度   \\ ( log _ 2n \\ )   。   情况 最 坏 ， 对数 复杂度 不 log 函数 底数 因子 ， 快速 排序 计算 复杂度   \\ ( O ( n \\ log ( n ) ) \\ )   。",
            "tags":"algorithm",
            "url":"articles/quick-sort.html"
        },
        {
            "title":"选择排序",
            "text":"前言   选择 排序 思路 直观 ， 遍历 序列 ， 找到 最小 ， 放在 第一位 ， 剩下 找 最小 。 排序 算法 第二 梯队 ， 第一 梯队 是指 快速 排序 变种 ， 冒泡 排序 显得 故弄玄虚 。 特别 大型 序列 来说 ， 实际上 选择 排序 不错 算法 。   先 给出 python 语言 版本 最 易懂 写法 ， 那种 写法 算法 运行 效率 差别 不 大 。   易懂 是因为 选择 排序 思路 书写 ， 找到 最小 元素 ， 取出 ， 再找 再 取出 ， 找完 。   C 语言 版本   python 语言 版本   过程 都 大同小异 ， 利用 两个 遍历 动作 A , B ， 再 。 python 语言 版本 额外 动作 是因为 希望 返回 序列 序列 ， 原 序列 必 变 ， C 语言 版本 原 数组 是就 修改 。   算法 复杂度   选择 排序 计算 复杂度 粗略 估计 长度   \\ ( O ( n &# 94 ; 2 ) \\ )   ， 核心 占用 时间 动作 循环 套 循环 。   顺便 说下 快速 排序 ， python 语言 版本 ， 10000 随机数 列表 排序 用时 ：   快速 排序 相比 选择 排序 确实 快了 太 多了 。",
            "tags":"algorithm",
            "url":"articles/select-sort.html"
        },
        {
            "title":"树算法建模初步",
            "text":"前言   树 算作 图的 一种 ， 计算机 算法 数据结构 这块 树和 图 分开 讨论 。 树和 图的 区别 在于 一个 节点 ， 节点 父 节点 称 根 节点 ， 树的 根 节点 入度为 0 ， 节点 入度为 1 。 节点 出 度并 。 树是 无 环的 。   树被 称为 Tree ， 节点 称作   Node 。 取消 树的 入度 称呼 ， 用某 节点 度 degree 描述 节点 出度 。 新增 parent children 概念 ， parent = None 节点 为根 节点 ， children 空的 列表 节点 子 节点 ， 度为 0 终端 节点 。   根 节点 定义 根 节点 层次 level 1 ， 根 节点 子 节点 层次 level 2 ， 以此类推 。  ",
            "tags":"algorithm",
            "url":"articles/tree-algorithm-first-lesson.html"
        },
        {
            "title":"字体反爬虫",
            "text":"爬虫 ， 分析 网页 会 ， 东西 看上去 乱码 ， css 设置 一种 额外 字体 。 破解 内容 ？   目标 字体 下载 ， 字体 各种各样 名字 ， 字体 codepoint 随机 ...   下载 一个 fontcreator 会 字 codepoint ， 爬虫 编码 ， python   fonttools 库来 加载 字体 。   下载 好 字体 ， 保存 好 字体 做好 缓存 工作 。   见 本文 参考 资料 2 ， 利用   fonttools   模块 加载 目标 字体 。   分析 字体 cmap   tables cmap 数据 ， 字体 情况 ， 分析 ， fonttools 模块 文档 较少 ， 加上 字体 知识 不 太多 ， 只能 简单 摸索 下了 。   找到   font _ mapping   ， 字符   python   ord   函数 下 ， 目标 字符   unicode   code   point ， 说的 字体 code   point ，   font _ mapping   会 ， 内容 。   参考 资料   https : / / zhuanlan . zhihu . / p / 32087297       find       codepoint     ttf   file",
            "tags":"crawler",
            "url":"articles/zi-ti-fan-pa-chong.html"
        },
        {
            "title":"django学习笔记",
            "text":"WARNING   警告 ， 笔者 专注 flask 模块 ， 本文 归档 ， 缺少 新的 内容 ， 旧的 内容 错误 。 【 2019 】   。   Beginning   先 介绍 下 Djanog 项目 文件夹 结构 ， 命令 操作 常识性 东西 。   新建 一个 项目 ：   新建 项目   命令 创建 一个 文件夹 ， 文件夹 名字 设置 project - ， 文件夹 一个 manage . py 文件 ， 文件 作用 挂载 django 配置 （ settings . py 文件 ， 修改 dev _ settings . py 文件 ） 。   一个 文件夹 ， settings . py   、   urls . py     wsgi . py   文件 。   settings . py   控制 django 配置 管理 ；   urls . py   控制 django 路径 分发 主 入口 ， 配置 中 修改 。   wsgi . py   是你 apache uwsgi 挂载 控制 入口 。   最 简单 初始 项目 运行 ：   开启 服务器   控制 服务器 监听 localhost 外网 0.0 . 0.0 ， 端口号 。   新建 一个 app   顺便 说 ， 项目 找 不到   manager . py   文件 ， 文件 一个 便捷 入口 ， 命令 都   django - admin   命令 运行 。   数据库 操作   定义 模型 ， 运行 :   过程 创建 app 下的 migrations 文件夹 迁移 python 脚本 文件 ， 情况 手工 修改 迁移 文件 。   命令 执行 迁移 python 脚本 。   交互式 环境   python 交互 环境 ， 纯 python 交互 环境 区别 django 东西 ， 定义 模型 对象 。 开发 测试 工作 有用 ！   sql 交互 环境 :   创建 超级 用户   最 创建 项目 admin   url 挂 ， 去   \\ verb + / admin +   url 下看 ， 登录 做 数据库 表格 创建 工作 外 ， 还 创建 一个 超级 用户 用于 登录 。   apps . py   快捷 命令 创建 app 模块 文件 ， 例子 文件 ， 文件 是有 含义 ： django 项目 用来 存放 app   相关 配置 信息 地方 。   一个 例子 ：   定义 app 名字 完整 名字 ， app   __ init __. py   文件 下 ：   引入 配置 文件 。   ？ ， 最 简单 用处 app   INSTALLED _ APPS   默认 文件夹 名字 ， 定义 名字 。   一个 高级 用法 定制   ready   方法 ， 初始化 app 信号 设置 。   url 分发   web 框架 一个 核心 功能 url 分发 工作 ， 先 来看 下 django 这块 内容 。   过程 是在   project     urls . py   定义 好 项目 url 分发 规则 。 默认 内容 :   读者 兴趣 先看 下 admin 页 ，   / admin   。 请 确认 执行 数据库 操作   makemigrations     migrate   ， 创建 超级 用户   createsuperuser   。 django 默认 自动 创建 admin 支持 页面 。   接下来 类似 插入   app     urls 定义 。 简单 写上 即可 :   url 分发 需求 情况 下 ， 都 推荐 上 django 官方 教程 推荐 url 分发 写法 。   app 下的   urls . py   进一步 定义 url 分发 规则 :   讨论 django 官方 教程 来的 ， 推荐 写法 风格 。   url 上带 参数   参数 逐个 传递 视图函数 ， 唯一 值得一提的是 django 视图函数 默认 第一个 函数 传递 进去   request   参量 。   views . py   内容 :   正则表达式 写法 老式 django url 写法 ， 特别 需求 ， django 官方 教程 ， 采用 推荐 写法 ：   url 定义     参量 大体 类似 flask   endpoint   概念 ， django   reverse   函数 ， 大体 类似 flask   url _   概念 。   视图函数   add   url :   模板 中有 :   获取 full - url   提到 reverse 函数 返回 url 字符串 还 完整 url ， url 。 获取 全站的 完整 url   request . build _ absolute _ uri ( location )   ， 不 指定 location 默认 url 。   请求 响应   request   ， APIView 含义 方法 ， 都会 接收 一个   request 对象 ， 对象 ：   query _ params   GET 传 参数   data   POST   PUT   PATCH   传 参数 ， 还 没完 ， 传 文件 ， 表单 都 支持 。   user   请求 认证 了会 返回 用户 记录 ， 编写 auth 类的 会 ， 认证 ， 返回   AnonymousUser   Response   含义 方法 返回 对象 ， 第一个 参数 data ， 字典 值 ， 会 自动 封装 json 友好 格式 。 实际上 套路 ：     serializer   有个   _ valid   方法 ， 用来 序列 化类 输出 前的 预热 。 两点 序列 化的 讨论 中会 涉及 。 看 ：   headers   http 协议 响应 头 ， status   http 状态 码 。   过程 套路 ， 很多 高级 视图 套路 都 类似 例子 ， 多看 几遍 。   urls . py 加上 :   正则表达式   ( P < pk > [ 0 - 9 ] + )   收集 一串 数字 ， 一串 数字 命名   pk   。   模型 定义   django 模板 sqlalchemy 很多 地方 类似 。   settings 配置   INSTALLED _ APPS :   加上 新   app   名字 ， 不 加   makemigrations   管理 数据库 。   DATABASES :   默认 会 创建 一个 sqlite3 数据库 ， 需求 ， 想要 mysql 数据库 ， 参考 样例 修改 配置 。 连接 mysql 样例 :   会 加上   charset     utf8 选项 ， mysql 设置 好 字符 编码 。 设置 init _ command   设置 字符 编码 更好 字符 编码 兼容性 。   多个 数据库   多个 数据库 ， 最 常见 情况 单独 app 一个 数据库 。   再 加上 一个 数据库 定义 ：   app 新建 一个 dbrouter 文件 ， 定义 一个 YourRouter 类 。   类 定义 数据库 选择 ：   NOTICE :   app 中 定义 模型 记得 都要 加上 app _ label meta 属性 。   定义 模型   好了 ， 定义 模型 。 语法 :   熟悉 sqlalchemy 段 代码 很 陌生 ， 进一步 细节 。   字段 类型   IntegerField :   整型   BigIntegerField :   大 整数   BinaryField :   raw   data   BooleanField :   bool   值   CharField :   定义 字符串 类型 ， 设置 长度   max _ length   属性 。   TextField :   大段 文字 。   DateField :   python 中的   datetime . date   对象 。   DateTimeField :   python 中的   datetime . datetime   对象 。   一个 有用 基类 :   模型 都 继承 基类 ， 基类 创建 表格 ， Meta 设置   abstract = True   。 DateTimeField 加上   auto _ = True   ， 模型 每次   save   操作 都会 自动 更新 最新 日期 。     auto _ _ add = True   记录 第一次 创建 时 设置 最新 日期 。 DateTimeField   auto _     auto _ _ add   两个 选项 default 选项 ， 自动 插入 默认 时间 是由   django . utils . timezone . ( )   。   想 六个 小时 记录 查询 ：   通用 选项   字段 声明 控制 中有 通用 选项 :   default :   设置 字 段的 默认 值 ， default 还 接受 一个 函数 对象 。   null :   设置 True ， 则该 自动 会 自动 填充 sql 中的 NULL 值 ， 字符串 类型 字段 默认 空 字符 。   blank :   设置 True ， 空值 ， 其和 null 区别 null 是说 数据库 ， blank 是说 显示 。   db _ column :   设置 字段 数据库 中 表格 名字 。   db _ index :   设置   True   字段 开启 索引 。   primary _ key :   主键   。   unique :   唯一   unique _ _ date :   title 字段 设置 :     title 字 段和   pub _ date   字 段都 。 日期 内 title 只能 唯一 值 。 看作 一种   unique _   。   数据库 中的 关系   ForeignKey :   外键 引用 ， 字 段的 名字 user ， 存储 表格 中的 名字 user _ id ，   db _ column   控制 表格 名字 。 -   说的 onetomany 关系 定义 ForeignKey 。 ：   一个 city 多个 address ， 一个 address 只能 一个 city ， 一个 外键 映射 city 。 ForeignKey 更 确切 manytoone 关系 ， 模型 一个 外键 属性 ， 多个 记录 指向 同一个 物   参阅 篇 文章   。   OneToOneField   OneToOneField   简单 ， 一个 记录 一个 属性 ， 用户 管理 会 用到 。   ManyToManyField   ManyToManyField   读者 请 参阅 写的   sqlalchemy 模块   一文 ，   写得 详细 。   模型 定义 字段 ， 更 多的 内容 请 参看 官方 文档 。   多字 段 组合 唯一   参考   网页   ，   Meta   定义   unique _   属性 。   定义 模型 中的 元类 数据   db _ table   指定 创建 table 表格 名字 。   abstract   创建 表格 ， 模型 抽象 模型 。   模型   模型 最 核心 查询 操作 ， 修改 记录 ， 查询 目标 记录 ， 修改 属性 save 即可 。   新建 记录   插入 一条 记录 主键 重复 ， 程序 是会 返回 异常 。 推荐   _ _ create   方法 ：   语句 查询 效果 新建 记录 效果 。 写的 属性 操作 ， 大体 版 ：   单纯 方法 ， 记录 不 会抛 出   DoesNotExist   异常 ； 找到 多个 记录 ， 会抛 出   MultipleObjectsReturned   异常 。   _ _ created   方法 找到 多个 记录 会抛 出   MultipleObjectsReturned   异常 。     _ _ created   方法 确保 插入 一条 记录 记录 。 created = True target 新建 记录 。   理解   defaults   选项 ， defaults 定义 属性 参与 查询 过程 ， 参与 是在 找到 记录 情况 下 ， 设置 值 。   查询 记录   说 获取 记录 ：   返回   QuerySet   对象 ， QuerySet 对象 下 一步 查询 操作 。 ：   例子 来说 filter 方法 即可 ：   排序   QuerySet 对象 进一步 排序 ：   reverse   exclude   排除 记录 ， 排除 created _ 字 段值 大于 时间 值 ：   offset     limit   删除 记录   找到 目标 记录 instance ， 调用   delete   方法 即可 。   记录   谈到 查询 操作 ， 读者 单纯 想 记录 ，   exists   方法 最快 最 简便 。 参考   网页   。   关系   OnetoOne 关系 简单 ，   a . b     b . a   都是 。   ManytoOne 关系   ForeignKey   定义 关系 ， 引用 外 键的 对象 ，   a . b   即可 ， 反向 onetomany 那种 ， 定义 定义 好   related _   ， （ 参考     ） 引用 ：   细节 请 查看 文档     。   序列 化   理解 序列 化 过程   django   restframework 序列 化类 类似 django 表单 类 ， django 表单 类是 用于 沟通 django Model 网页 form 之间 桥梁 ； 序列 化类 用于 沟通 django Model 类和 JSON 数据 格式 之间 桥梁 。   过程 是在 视图 类 方法 下 ， 数据库 操作 获取 数据库 目标 Model 记录 ， 送入 序列 化类 ， 目标 类的   . data   属性 字典 值了 ， 送入 Response HTTP 响应 值了 。   用法 ， 字典 data 送入 序列 化类的 data 属性 中 ，   调用 序列 化类的 save 方法 进一步 数据库 操作 。   save 方法 依赖 于你 进一步 定义 序列 化类   create     update   方法 。 所示 ：   情况 下你 想 定义 save 方法 。   ModelSerializer   类似 django 表单 类 ， 利用   ModelSerializer   类来 更 快地 创建 序列 化类 。   证明 简便 写法 （ 包括 create update 方法 都会 自动 ） 应付 。 shell 里的 代码 再 撸 一遍 。   _ valid   方法   定义   validate   方法 目标 对象 验证 ， 定义   validate _ < fieldname >   定义 字段 级别 验证 。   序列 化类 引用 request . user   参考     ， 序列 化类   . context [ ' request ' ]   获取   request   对象 ， 获取   user 对象 。   模板 概念   模板 样子 ， 模板 继承 ， block   ， 循环 ， 过滤 ， 。 熟悉 jinja2 模板 同学 稍微 看下 大致 是个 。   django 查找 模板   django settings . py ：   默认 是在 app 下的 templates 文件 里都 会 递归 遍历 查找 ， DIRS 加上 一个 文件夹 ， settings . py 所在 文件夹 下 templates 文件夹 会去 遍历 。   模板 文件 都会 合并 ， 模板 覆盖 机制 ， 无谓 覆盖 ， 模板 原则上 推荐 结构 是在 templates ， app ， 都再 新建 一个 目标 app 名字 ， 再 新建 模板 文件 。 稍 小的 项目 扔 templates 不 大 。   想 覆盖 django 自带 admin 界面 ， 就要 templates 新建 一个 admin 文件夹 ， 模板 文件 ， 研究 下 django 源码 。   django 变量 传给 javascript   NOTICE :   不 推荐 写法 ， 推荐 走 ajax 通道 传 数据 。   django 视图函数 render context 字典 值 ， 字 段的 值将 传给 django 模板 里的 变量 ， ， django 变量 传递 javascript 。 小节 参考   网页   。   传递 字段 建议 json 封装 下 ：   javascript ：     safe     escapejs   过滤器 。   扩展 用户 模型   小节 参考 篇   不错 文章   。 扩展 django 自带 用户 模型 ， 最 常见 两种 情况 ， 实际上 两种 情况 都会 。 第一种   User   模型     Profile   模型 分开 ， User 用来 存放 登录 相关 信息 ， Profile 用来 存放 更 多的 用户 资料 信息 ， User     Profile     onetoone   关系 ， 会 建立 一个 signals 文件 保证 没 创建 一个 User 就会 跟着 创建 一个 Profile ：   django 默认 auth 机制 ， session   cookies 等不 太 满意 ， 推荐 建立   User   模型 ，   继承   AbstractBaseUser   ， 大概 看了   AbstractBaseUser   源码 ， 其做 工作 都是 围绕   password 字段 来的 ， settings 定义 好了 :   就都 工作 。 继承 定义 字 段这 不 多用 多说 ， 推荐 进一步 继承   PermissionsMixin   类 。   PermissionsMixin   类 定义 群组 信息 。   三个 字段 属性 含义 ， 都是 设置 ：   写好   objects     UserManager   ， 继承   BaseUserManager   ， 做 定制 ， 是个 东西 ？   Model . objects .   用法 。 情况 定义 好 ：   create _ user   create _ superuser   两个 方法 即可 。 用这 两个 方法 控制 用户 创建 。   create _ superuser   负责   _ superuser   _ staff   设为 True 。   基于 类的 视图   django 初步 了下 基于 类的 视图 概念 ， 代码 ：   变为 更 简洁 ：   依赖 类的 继承 ， 引入 Minxin 类 ， http 很多 restful 风格 请求 上 ， 套路 ， 代码 复用 。 知识 python 类的 继承 ， django   restframework   模块 用手 见识 DRY 理念 。   APIView   django   restframework   APIView   继承   django     View ， 针对 restful   api   很多 优化 ， 情况 下 编写 视图 ， 继承 APIView 合适 ， 介绍 通用 视图 高级 视图 ， 都是 情况 下 特别 合适 少写 代码 ， 好 用就 ， 仅此而已 。 不 合适 ， 定义     post   put   方法 是很 。   视图 再 升级   情况 下   APIView   类和   Mixin   是最 合适 ， 谈谈 django   restframework   提供 高级 通用 视图 类 。 类都 继承   GenericAPIView   ， 都有 一个 ， 类似   Serializer   - >   ModelSerializer   升级 过程 ， 视图 类 方法 操作 对象 基于 数据库 Model 操作 ， 推荐 视图 类 继承   GenericAPIView   。   GenericAPIView   GenericAPIView   继承   django   restframework     APIView   类 ， 提供 一个 很 特性   queryset   ， 设定   queryset 属性   _ queryset   方法 ， 视图 类的 很多 方法 都是 围绕   queryset   展开 。     CRUD   数据 操作   Minxin 类 ， GenericAPIView   组合 出了 很多 高级 视图 类 。   一个 建议 这块 ， 看 源码 ， 源码 都很 简单 ， 看 懂 ， 发现 符合 ， 少写 点 代码 。 额外 定制 需求 ， 重写 方法 。   权限 管理   认证   视图 类里 定义   authentication _ classes   目标 视图 类的 认证 ， 默认 认证 管理 类 。   定义 身份 认证   写 身份 认证 类 ， 继承   BaseAuthentication   ， 重写   authenticate ( ,   request )   方法 ， 认证 成功 返回   ( user ,   auth )   ， 返回 None 。 request . user   登录 用户 实例 ，   request . auth   登录 auth 信息 。   情况 下 身份 认证 失败 想要 抛 出   AuthenticationFailed   异常 。   权限   视图 类里 定义   permission _ classes   目标 视图 类的 权限 管理 ， 采用 默认 权限 管理 类 。   认证 完 会 进去 权限 管理 ， 权限 检查   request . user   request . auth   调用 。   最 简单 权限 管理 类   IsAuthenticated   ， 身份 验证 用户 访问 ， 拒绝 没 用户 访问 。   IsAuthenticatedOrReadOnly   类的 身份 认证 用户 访问 ， 身份 验证 用户 只能 只读 访问 。   定义 权限 管理 类   定义 权限 管理 类 ， 继承   BasePermission   ， 一个 两个 方法 ：   _ permission ( ,   request ,   view )   _ object _ permission ( ,   request ,   view ,   obj )   请求 授予 权限 ， 返回 True ， 权限 返回 False 。   定义 权限 管理 类还 加上   message   属性 ， 用户 权限 没 抛 出   PermissionDenied   异常 额外 显示 信息 。   日志 管理   django python logging 模块 日志 系统 ， django 项目 日志 管理 学习 离不开 logging 模块 学习 。   logging 模块 中级 教程   logging 模块 中级 几个 词汇 ： loggers ,   handlers ,   filters ,     formatters 。   loggers   记录器   运行 logging . info ， 调用 默认 记录器 ， 会 针对 python 模块 文件 创建 一个 记录器 。     __ __   一种 简便 命名 方法 ， 勤快 某种 情况 下有 手工 记录器 取个 名字 。     getLogger   函数 指定 名字 定义 （ 是指 第三方 模块 下定义 ） ，   getLogger   指定 目标 名字 就会 记录器 。 DIY 第三方 模块 日志 记录器 有用 。   记录器 挂载 卸载 处理器 对象 过滤器 对象 ：   logger . addHandler ( )   logger . removeHandler ( )   logger . addFilter ( )   logger . removeFilter ( )   记录器   setLevel ( )   方法 设置 最小 记录 级别 ， Handler 级别 协作 关系 。   handlers   处理器 负责 分发 日志 信息 目标 地去 。 介绍 几个 Handler 类 ：   StreamHandler   信息 流的 形式 输出 ， 指 输出 终端   FileHandler   信息 写入 文件 中 去   RotatingFileHandler   信息 写入 文件 ， 文件 大小 超过 值 ， 新建 一个 文件 写 。   TimeRotatingFileHandler   信息 写入 文件 ， 隔 一段 时间 ， 比如说 ， 就会 自动 再 新建 一个 文件 再 写 。   处理器 对象   setLevel   方法 ， 提及 ， 记录器   setLevel   协作 关系 ， 更 详细 描述 ， 信息 先 记录器 并分 发给 处理器 对象 ， 再 处理器 再 分发 目的地 。   处理器 挂载   格式 器   对象   过滤器   对象 。   handler . setFormatter ( )   handler . addFilter ( )   handler . removeFilter ( )   filters   过滤器   formatters   格式 器 ， 信息 格式 定义 。   字典 统一 配置   django setting . py 会有 配置 ， 含义 很 ， 定义 处理器 ， 格式 器 ， 记录器 。   定义 命令   目标 app 新建 一个   management   文件夹 ， 新建 一个   commands   文件夹 ， 两个 文件夹 都要 带上   __ init __. py   文件 。   commands 文件夹 定义 python 脚本 ， 脚本 命令 调用 ：   ：   查看 命令 列表 。   一个 命令 模块 所示 ：   django celery   django - crontab 模块 试 过的 ， 很 便捷 ， 基于 系统 crontab ， django celery 组合 ， celery 灵活 消息 分发 机制 ， 无疑 将给 未来 开发 带来 更 多的 可能性 。 celery 官方 文档     ， 本文 讲 celery 概念 django 集成 ， 更 celery 知识 请 参阅 官方 文档 。   celery 核心 概念   broker   队列 服务 提供者 ， celery 推荐 redis rabbitmq broker 。   task   执行 ， 定义 函数 。   backend   用来 存储 输出   worker   celery 启动 开启 一个 worker 。   django 内 文件 安排   小节 参考   篇 文章     篇 文章   。 提醒 读者 ， django celery 集成 不 额外 安装 插件 ， 讲的 配置 实际上 一个 单独 celery   app 大部分 都是 类似 ， 多了 细节 上的 优化 。   celeryconfig . py   推荐 django   app   settings . py   旁 新建   celeryconfig . py   文件 ， 教程 设置 配置 文件 名字   celery . py   ， 很 不好 ， 文件名 模块 名字 重复 会出 。 内容 ：   新建 测试 ， 几行 配置 基本上 死的 。 最 值得 讲的 两行 ：   第一行 是从 django 配置 对象 中 读取 配置 ， 特别   namespace = ' CELERY '   ，   CELERY _   开头 配置 才会 读取 ， 原 celery 配置 关系 ：   那次   CELERY _ BEAT _ SCHEDULE   写成   CELERYBEAT _ SCHEDULE   老实 发现 周期性 程序 启动 不 。   第二行 一个 优化 细节 ， 函数 名字 ， 自动 发现 。 django app 新建 一个   tasks . py   ， celery 会 自动 发现 定义 。   __ init __. py   django 项目 project   settings . py   文件夹 ，   __ init __. py   推荐 写上 几行 内容 ：   settings . py   celery 配置 统一 写在   settings . py   文件 ， 提到 ， 都要   CELERY _   开头 ， 大体 所示 ：   定义   好了 ， 定义 ， 实际上 定义 一个 函数 ， 简单 打印 函数 确认 celery 周期 程序 工作 着的 ：   celery crontab 功能 很 强大 ，   crontab ( )   分钟 执行 。 请 参看   官方 文档   。   启动   celery 操作 都是 ， 启动 worker ：   - A   选项 跟着   celery   app 名字 ， django 项目 名字 。   - l   选项 设置 日志 打印 级别 。   还 加上   - B   启动 周期性 。   开个 命令 ：   制作 脚本 ， 制作 后台 程序 ， 制作 服务 ， supervisor ， 实际上 celery 关系 不 大了 ， 不 说了 。   手工 启动   参考   网页   。   翻译   django 翻译 很 便捷 ， 关注 后台 api 编写 ， 实际上 很多 教程 说的 ：   配置 只和 模板 输出 翻译 ， 再 加上 。   MIDDLESWARES   加上 ：   配置 ：   设置 好你 语言 代码 ， 。   看了   django   restframework   翻译 管理 相关 ， 发现 大体 配置 ， 很多 教程 说的 设置   LOCALE _ PATHS   变量 没 ， 默认 app locale 文件夹 够用 。   目标 py 文件 下的   字符串   装饰 ：   Model 字段 定义 名字 加上 ， verbose _   加上 ， 异常 信息 加上 。   加完 运行 ：   app locale 文件夹 创建 ， 文件 不想 ，   manage . py   ， 加上   ignore   选项 即可 。   windows 下 很 ， 推荐 linux 服务器 下 创建 目标   django . po   文件 ， 再 修改 文件 即可 。 po 文件 头部 东西 ， 估计 ：   是必 填 ， 时间 填 上吧 。   运行 :   不出意外 ， 翻译 生效 。   创建 复用 app   创建 复用 app 会 极大 降低 目标 django 项目 复杂度 ， ， app 复用 风格 首选 。   制作 django - pypi 包   pypi 包的 制作 不 赘述 ， 官方 文档     基础 上 讨论 。   测试   试着 安装 测试 过程 ：   安装 官方 文档 ， INSTALL _ APPS 设置 好 。 app 。 安装 测试 过程 中 ， 实在 繁琐 。 推荐 app 文件夹 复制 到你 测试 webapp 去 ， 修改 看 。 测试 好了 再 内容 同步 pypi 安装 包 去 。   migrations   官方 文档 选择 制作 sdist pip   install   tar 包 风格 是有 原因 ， 测试 egg 包在 访问 上很 成问题 ， pip 安装 方法 ， site - packages 安装 才是 文件夹 风格 那种 egg 文件 。 等下 执行 ：   才会 成功 。   生成 迁移 文件 放在 site - packages 目标 文件夹 下的 。 制作 pypi 包的 migrations 文件夹 迁移 文件 包含 进去 ， 包含 包含   __ init __. py   文件 即可 。   就算 制作 django 目标 pypi 包 ， django 项目   . gitignore   文件 上 加上 一行 不错 ：   PS :   stackoverflow 都 加上 ， 人 写了 长篇大论 加上 。 一点 ： 早期 测试 开发 过程 ， migrations 文件夹 都   __ init __. py   空白 文件 ， 代码 整洁 ， 测试 开发 阶段 不 花 精力 ， 争议 。   部署   部署 apache nginx web 服务器 对接 django 项目 ， 说的 再 一点 django 一个 wsgi 程序 服务 。   本文 apache 部署 讲解 较为 成熟 。   apache   上 例子 ：   检测 wsgi 模块 加载 ， 加载 上 。   WSGIPythonHome   设置 python 虚拟 环境 所在 目录 ， 例子   venv / bin python 执行 脚本 。   WSGIPythonPath   设置 Django 项目 目录 所在   WSGIScriptAlias   设置 WSGI 文件 所在   Alias   Directory   设置 服务 项目 静态 文件 。   静态 文件   静态 文件 再 补充 下 ， 服务 静态 文件 是在 项目 目录 下的 static 文件夹 下 ， 静态 文件 djano djangorestframwork 框架 带的 静态 文件 ，   python   manage . py   collectstatic   命令 生成 内容 。   settings 设置   STATIC _ ROOT   值 。   django 站点 部署   多个 django 站点 都   mod _ wsgi   部署 写 ：   deamon 模式 （ 参考   网页   ） ：     WSGIProcessGroup   来看 名字 随意 ， 写 。 定义 daemon 进程   python - path   定义 到你 django   project ，   python - home   定义 到你 python 虚拟 环境 。   文件 权限   设置 好   Directory   之外 ， 还 会 文件 读写 权限 ， 查看 日志 发现 提示 说 文件 权限 读写 。 httpd 执行 User Group ， 看 目标 文件夹 文件 权限 。   Django 项目 wsgi 文件 执行 权限 。 Django 项目 操纵 数据库 ， sqlite3 文件 数据库 ， 会 读写 权限 。   值得一提的是 母 文件夹 执行 权限 ， 文件 都是 不 。   nginx   nginx 对接 wsgi 接口 uwsgi 模块 wsgi 接口 服务 。   更 细节 请 参看 uwsgi   官方 文档   。   ngnix 配置 ：   nginx   serve   静态 文件   更 nginx 配置 细节 请 参看 写的 nginx 配置 文章 。   对外 部署 必 看   django 项目 对外 部署 ， python 一个 动态 脚本 语言 ， 会有 很多 安全性 检查 ， 项目 对外 会很 不 。 本文 参看 官方 文档     。   第一 确保   DEBUG = False   ， 对外 开着   DEBUG = True   简单 开玩笑 。   运行 ：   settings . py   里 密钥 外置   settings . py   文件 密钥 信息 ， 包括   SECRET _ KEY   数据库 连接 信息 密钥 ， 信息 都 环境 变量 引入 配置 文件 中 读取 。   ALLOWED _ HOSTS   要某 限定 好 域名 ， 要某 nginx 服务器 入口 请求 做好 限定 ， 凡是 不 域名 HOST 请求 都抛 出 444 错误 ：   API 设计   讲 讨论 API 设计 网络 上 流行 Restful 风格 API 设计 都 一般性 原则 ， 强制性 。 API 还 分为 内部 对外 API ， 对外 API 接口 遵循 无 惊讶 原则 ， 遵循 都 通用 写法 风格 ， 内部 API ， 很多 情况 下 ， 还要 内部 便捷 性 。   url 设计   url 域名 都 推荐   api . .   风格 ， API 版本 ， URL 上 加上 版本号 ， 一个 很 主意 。 端 分离 大 背景 下 ， 前端 和后 端的 代码 都 带来 额外 复杂度 。   版本号   阮 一峰 篇 文章   ， 推荐   Accept   字段 ：   url 第一个 字段 喜欢 django app 名字 ， 接下来 第二个 字段 推荐   Restful   风格 写上 目标 资源 名字 ， 不 强制 写上 名词 复数 形式 ， 两个 url ， 一个 操纵 目标 资源 集 ， 一个 定向 操纵 目标 资源 ， 尾 缀写 上 s 区分 推荐 风格 。   针对 资源 目标 资源 集的 额外 动作 ， 额外 动作 是指 常规 Restful 风格 增删 查改 动作 之外 额外 动作 需求 ， 讨论 Restful 风格 url 基础 上 加上 第三个 字段 ， 第三个 字 段是 额外 动作 名字 是个 不错 风格 。   方法 设计   方法 通用   GET   POST   ， GET 用于 查询 获取 资源 信息 ， POST 用于 创建 修改 信息 疑问 。   Restful 风格 还 推荐 DELETE ， PATCH 方法 ， 编写 都 GET POST 方法 。   参数 设计   查询 操作 针对 目标 资源 集合 ， 参数 推荐 加上 ：   limit   返回 个数   offset   偏移 值 ， 分 页 效果   sort   sortby ， 一个 排序 参数   reverse   排序 反转 参数   状态 码 设计   请 参看 HTTP 状态 码 。   返回 内容 结构 设计   喜欢 风格 ：   成功 返回 ：   人会说 成功 加上 code : 200 代码 ， ， 获取 数据 ， ， 怕 数据 不 ， 加个 针对 目标 数据 判断 即可 。 加个 code : 200 ， 目标 数据 字段 不 ， 程序 不 会报 错 ？   失败 带上 code 错误 码和 msg 错误 信息   错误 码 软件系统 内部 一个 统一 规范 ， 常见 错误 类型 ：   资源 找到   找到 多个 资源   未知 错误   输入 缺少 参数   编写 文档   。   技巧   模型 python2 兼容性   提高 模型 python2 兼容性 ， 推荐 模型 定义 上加 装饰 器 。   不 加 装饰 器 ， python2 用的   __ unicode __   方法 。   重置 migrations   方法 migrations 文件 删掉 ， 表格 删掉 成功 ， 忽视 django _ migrations 表格 数据 （ 参考   网页   ） 。     django _ migrations   app 迁移 数据 删掉 ， 再 makemigrations migrate ， 就更 。   列表 对象   定义 一个 model 新 Field 对象 解决 ， ListField 。   _ db _   数据 数据库 读取 ， 总会 调用 方法 。 包括 （ including     aggregates     values ( )   calls 。   是最 最 核心 一个 定制 方法 ， 含义 是很 ， 不用 多说 。   四个 方法 大体 流程 ：   NOTICE   上 图 读者 理解 ， 实际上 django 逐个 。 官方 文档 说法   _ python   django 反 序列 （ deserialization   ） ， 其还 好 三种 情况 ： None ， 目标 对象 ， 字符串 情况 。   _ _ string   序列 化 ，   _ python   。   _ prep _   输入 ( = ' 20170809 ' )   执行 查询 ， 讲过 转化 sql 查询 中 用到 字符串 （ 比如说 datetimefield ） 就做 额外 工作 。   数据库   一个 django 项目 原因 ， app 单独 操作 数据库 ， 情况   settings   定义 好 数据库 配置 ：   加上 dbroute 对象 ：   app 定义 好 dbroute 对象 ：   代码 看 ， 定义 模型   Meta   定义 好   app _ label   属性 。 更 信息 请 参看 官方 文档     。   django 模型 对象 获取 表格 名字   参看   网页   。   答 :   好 django ImageField   参考   篇 文章   。   ImageField FileField 很 类似 ， 还 多了   width     height   属性 ， 上传 确保 文件 图片 文件 。   模型 文件 中的 定义 :     upload _   控制 图片 计算机 中的 保存 路径 ， 指定 一个 文件夹 路径 ， 灵活 ， 一个 函数 灵活 路径 指定 :   路径   settings   指定   MEDIA _ ROOT   而来 ， 再 指定 文件夹 路径 。 函数 还 接受 模型 实例 ， 建立 自动 user 用户名 分配 文件夹 路径 。   storage = OverwriteStorage ( )   文件名 重复 覆盖 逻辑 :   ImageField   rest _ framework 序列 化类 很 联动 ， 序列 化 返回 文件 路径 url 字符串 ， 测试 django 挂载 静态 资源 文件 ， 运营 推荐 nginx 设置 url 分发 。   保存 传 图片 文件 ， 常规 构建 form 对象 可行 :   :   语法 获取 图片 内容 。   django messages 系统   小节 参看   网页   。   django messages 系统 ， 示在 settings 配置 ：   views ，   messages . add _ message ( )   来往 django 信息系统 发送 一个 信息 ， 快捷 方法 ：   messages . debug ( )   messages . info ( )   messages . success ( )   messages . warning ( )   messages . error ( )   还 设置 request 请求 下的 信息系统 级别 ：   定义 一个 简单 flash 函数   做 封装 更好 对接 sweetalert javascript 库 ， 模块 内容 信息 弹出 。   csrf 认证 失败   提到 表单 加上 ：   csrf 认证 失败 ， 参考   答案   设置 才 。",
            "tags":"web_server",
            "url":"articles/django-learning-notes.html"
        },
        {
            "title":"flask上下文释疑",
            "text":"  gunicorn 进程 模式 flask 作用   参考     解答 ：   gunicorn   采用   pre - fork   work   模式 ， 大概 作业 模式 上 代码 所示 ， 不同点   gunicorn   起的 主 进程 不 负责 消息 ， 只 负责 端口 监听 消息 分 发给 子 进程 。   进程 情况 大体 熟悉 ， 基本上 都是 独立 运行 内部 变量 类 之间 不 程序 。 flask   wsgi 源码 中有 代码 ：   environ 环境 中 大概 有本 进程   app 类 ， ctx 请求 环境 ， 简单 下 讨论 。   二   flask 应对 多线程   就要   flask   源码   globals   两行 代码 说起 ：   代码   请求 环境 栈和 应用环境 栈都 定义 ， LocalStack   参考   片 文章   讨论 ， 借鉴 python   threading   模块   local ， 其是 一个 线程 本地 变量 ， 简单 来说 其是 一个 字典 线程 id 索引 ， id 取 值 ， 互不 干扰 。   flask 多线程 下 ， 请求 环境 栈和 应用环境 栈 看做 堆栈 ， 互不 干扰 。   三   flask 应对 多协 程   原则上 flask python threading local ， 协程 很 好地 应对 ， python3.7 新增 一个   contextvars   模块 解决 。 来了 ， gunicorn   多个 进程 worker ， 多个 进程 worker 之下 还 开启 多个 线程 ， 默认 线程 之外 ， gunicorn 是还 开启 gevent 异步 线程的 。 gevent 开启 多协 程 ， flask 应对 情况 ？   flask   werkzeug 定义 Local 类 ， 而在 源码 中 ：   werkzeug 会试 着先 加载 greenlet _ ident   函数 ， 想 函数 支持 greenlet 协 程的 ， gevent 底层 开启 greenlet 协程 。   ， 也就是说 flask 请求 环境 栈和 应用环境 栈 线程 独立 ， 额外 greenlet 支持 。   提出 一个 ， 估计 flask python 内部 asyncio 协程 模式 支持 。   四   请求 环境 栈 到底 做 工作   请求 到来 ， 请求 环境 栈和 应用环境 栈都 空的 。 app 类 代码 引用 办法 。   一个 请求 ， 请求 环境 栈会 执行 push 动作 ， 收集 好 环境 很多 变量 ，   request   session   ， 变量 ， 请求 环境 上下文 压入 堆栈 ， 检查 应用环境 堆栈 ， 为空 ， 则会 自动 创建 ； 默认 top ， 会 自动 创建 压入 。   讨论 过在 flask 应对 多线程 多协 程 默认 下 ， 【 讨论 ， 只 说 线 程了 】 ， 最小 线程 单元 中 ， 请求 环境 栈和 应用环境 栈都 ， 都会 默默 记录 下 请求 环境 应用环境 ， 都是 一个 请求 一个 请求 顺序 。 一个 请求 ， push ， 完 ， pop 。 是很 简单 模式 。   应用环境 存储 做 优化 ， top 的和 存储 None ， 到时候 ， 调用   current _ app   来取 。   取的 采用 代码 一种 惰性 动态 代理 机制 ：   request   session 生存期 请求 期 ， 。 g 变量 还 讨论 下 。 第一个 g 最小 粒度 在线 程这 ， 线程 之间 g 不相干 。 在线 程 内部 接受 请求 ， 都是 引用 默认 上下文 环境 ， g 多个 请求 公用 。 讨论 ， 线程 之间 g 不 通用 ， 就算 线程 内部 ， 应付 多个 请求 ， 多个 情况 来说 g 是和 上下文 绑定 ， 请求 不 公用 g 。   flask 推荐 请求 之间 记住 值 ， 推荐 数据库 session 变量 ， session 是挂 请求 上下文 中的 ， 请求 上下文 创建 其是 接受 session 参数 ：   session 传递 还 ， werkzeug 。   flask 推荐 g 一种 方式 ， 管理 数据库 连接 ， g 会为 空 ， ， 确保 引用 ， 检查 即可 ：   五   情况 回事   参考   篇 文章   讨论   ， flask 支持 编码 风格 ：   单 一线 程 接受 请求 ， 请求 app 负责 ， 请求 app 负责 ， 上下文 环境 栈是 支持 情况 。   教程 都会 提到 上下文 环境 用于 单元 测试 ：   六   session 到底 是个 东西   提到 flask 创建 请求 上下文 session 参数 是不 传 进来 ， flask session 到底 是个 东西 ？   说下 背景 知识 ： 服务器 响应 内容 设置 响应 头 ：   Set - Cookie   ， flask ：   客服 端 client 或者说 浏览器 接收 响应 ， 下次 目标 服务器 请求 会在 请求 头上 加上 Cookie 。   图所 示 ：   ：   第二次 刷新 ， 浏览器 无 痕 模式 测试 ， 第一次 request 请求 头 Cookie 。   在上 图的 Cookie 中   session   字段 ， 内容 含义 不明 。 flask session ：   flask 加密 。",
            "tags":"web_server",
            "url":"articles/flask-context-faq.html"
        },
        {
            "title":"flask模块",
            "text":"前言   django 一种 构建 大型 商务 网站 解决 方案 ， 贵 公司 技术 栈是 架构 django 之上 ， 性质 小 项目 ， 刚刚 新的 项目 ， 推荐 flask 多于 django 。 flask tornado 之间 选择 上 ， 更 多的 是在 python 异步 一块 理解 上 ， 懂 python 异步 ， 要做 api 并发 速度 都有 很 高的 ， 选择 tornado ， 选择 flask 。   爱好 去 搭建 小 网站 api 服务 ， 选择 flask 是很 适合 。 本文 作者 鼓捣 小 网站 慢慢 积累 东西 。   更新 日志   2020 年 10 月 本文 更新 ， 是将 重点 关注 后台 API 编写 这块 ， 编写 出更 精简 基础 知识 介绍 一章 ， 内容 组织 一章 。   NOTICE :   本文 只 关注 通用 意义 上的 后台 API ， 不 RESTful 风格 api ， 实际上 RESTful   api 一个 编程 风格 上的 建议 ， 场景 下并 不 合适 。   flask 基础   最 简单 例子   编写 脚本 ， 运行 ， 一个 最 简单 flask 后台 api 服务 。   启动 方式   flask 官方 文档 推荐 启动 方式 是不 运行 . py 脚本 ， 运行 ：     启动 flask 。 【 方式 很 适合 开发 测试 ， 部署 WSGI   server 】   执行 命令 ， 设置 好 环境 变量 ， 最   FLASK _ APP   变量 ：   windows   linux   推荐 工作 目录 下 加上   . env   文件 ， 定义 ：   环境 变量 ， 运行   flask   命令 会 自动 加载 环境 变量 。 【 加载 针对 flask 命令 ， load _ dotenv   模块 该做 要做 ， 不 受 影响 。 】   FLASK _ DEBUG   设置 1 开启 flask 调试 模式 ：   重载 器   源码 文件 变动 自动 重启 服务器   调试 器   异常 浏览器 中 显示 异常 信息   生产 环境 要把 调试 模式 关闭 ！   pycharm 启动   pycharm flask 启动 支持 ， 采用 上 描述 启动 方式 ， 会 接近 服务器 部署 环境 。   选择 启动 python 脚本 ， 选择   Module     ，   python   - m   flask   命令 效果 ， 加上 参数   run   ， 环境 变量 如上 示 ， 不用 再 特别 调配 ， 工作 目录 设置 下 即可 。   类似 还 再 加上 一个   python   - m   flask   shell   命令 。   url 分发   url 分发 web   server 很 核心 一个 功能 。 flask 最 简单 url 分发 编写 app . route 封装 函数 ：   一个 动态 路由 ， 假设 用户 请求   / users / 1   ， 函数 传递 一个 id 参数 进去 ， id 参数 类型 int 型 ， 数值 1 。 再 来看 例子 ：   假设 用户 请求   / users / zhangsan   ，   函数 username 有值   zhangsan ， 一个 字符串 类型 ， 默认 不 加 类型 字符串 类型 。 动态 路由 还 支持 类型 ：   float   path   字符串 类型 ， 接受   /   符号 。   uuid   蓝图 管理 项目   项目 结构 管理 很多 规范 ， ， 推荐 蓝图 管理 flask 项目 一点 一点 。 实际上 项目 是最 早期 那种   world 临时 测试 性质 ， 建议 马上 转成 蓝图 组织 结构 。   推荐 编写 一个   create _ app   函数 ， 一块 配置 上的 优化 ， 还 很 紧要 选项 ， 暂时 略过 ：   蓝图 比如说 errors . py 内容 ：   main . py 内容 ：   蓝图 中 注册 写法 ：   蓝图 错误 页面   app _ errorhandler   注册 全局 错误 ，   errorhandler   则只 负责 蓝图 内的 错误 。   蓝图 内 注册 视图函数 ，   url _   获取   main . index   形式 ， 蓝图 名 加上 视图函数 名 。   url _   url _ 是很 好 用的 一个 查询 flask   app 内部 url 链接 函数 ， ：   名字 ：   默认 名字 格式   蓝图 名 . 视图函数 名   ，   . 视图函数 名   写法 蓝图 。   送入 参数 进去   _ external   路径   ， 路径 即可 ， 浏览器 之外 链接 路径   JSON   api   一个 后台 api 都 推荐 JSON 风格 ， 返回 内容 字典 值 ， 实际上 推荐 返回 内容 字典 值 ， flask 会 自动   jsonify   函数 返回 内容 ， jsonify 函数 返回 flask   response 对象 ， 加上   application / json   mime   type 头字 段 信息 ， 还 封装 json dumps 方法 。   字典 值 ， jsonify 函数 返回 内容 。   技巧   flask   shell 命令 定制   运行 ：   db 变量 。   cmd 配置 好 环境 变量   export   FLASK _ APP = . py   错误 页面   蓝图 ， 要有 全局 效果 ，   app _ errorhandler   ：   查看 url 分发 情况     app . url _ map   查看 flask app url 分发 情况 。   flash 消息   flash 消息 用户 信息 。 flash 函数 。 模板 文件 上 加上 ：   静态 文件   flask 默认 路由 ：     引用 static 文件夹 静态 文件 。   flask 进阶 参考   flask 框架 内部 工作 原理 ， 读者 参看 写的   flask 上下文 释疑 篇 文章   ， 再 下 flask API 细节 即可 。 列出 可做 核心 参考 。   请求 对象   request 请求 对象 ：   form   dict   存储 请求 表 单字 段   args   dict   存储 URL 上 传递 参数   values   form args 合集   cookies   dict   存储 请求 cookies   headers   dict   存储 http headers   files   dict   存储 请求 上传 文件   _ data   返回 请求 主体 缓冲 数据   _ json   return   dict   包含 解析 请求 主题 后 json   blueprint   请求 Flask 蓝本   endpoint   请求 Flask 端点 名称   method   HTTP 请求 方法   scheme   http https   _ secure   HTTPS 发送 请求 返回 True   host   请求 主机 名   path   请求 URL 路径   query _ string   URL 查询 字符串   full _ path   URL   路径 查询 字符串   url   完整 URL   base _ url   url 查询 字符串   remote _ addr   远程 IP 地址   environ   dict   请求 原始 WSGI 环境   请求 钩子   请求 钩子 装饰 器来 ， flask 四种 钩子 ：   _ request   请求 执行   _ _ request   只 第一次 请求 前 执行   _ request   每次 请求 后 执行   程序 抛 出 异常   teardown _ request   每次 请求 执行 ， 抛 出 异常   请求 钩子 视图函数 之间 变量 互通 上下文 全局 变量   g   ，   _ request   设置   g . user   登录 用户 ， 视图函数 调用   g . user   得知 登录 用户 。   响应 对象   响应 对象 属性 方法 ：   status _ code   headers   set _ cookies   设置 cookies   delete _ cookies   删除 一个 cookies   content _ length   内容 长度   content _ type   响应 主体 媒体 类型   set _ data   _ data   响应 ：   重 定向 响应   状态 码   302   Location 写上 目标 URL   flask 提供   redirect 函数 快速 生成 重 定向 响应 对象 。   abort 函数   返回 状态 码 404   是抛 出 异常   第三方 插件   第三方 插件 请 读者 选择 。   flask - migrate   flask - migrate   基于 sqlalchemy     alembic   ， 做 额外 工作 。   提供 便捷 命令 行 接口 ， 熟悉 sqlalchemy alembic 。   一个 简要 例子 ：   新 项目 运行 ：   alembic   alembic   init   命令 ， 其将 创建   migrations   文件夹 ， 文件 alembic ， migrations 文件夹 推荐 源代码 版本 控制 。   简单 alembic ， 新建   env . py   优化 ， flask 配置 环境 里 配置   SQLALCHEMY _ DATABASE _ URI   变量 ， alembic 正确 找到 数据库 。   ：   工作 流程 ：   修改 数据库 模型 或者说 数据库 模型 发生 变动   flask   db   migrate   创建 迁移 脚本   检查 自动 生成 脚本 ， 改正 不 正确 地方   flask   db   upgrade   改动 数据库   删除 无用 迁移 脚本   alembic 自动 生成 脚本 万能 ， 人工 审核 。 就算 没 迁移 脚本 ， 毫无 意义 ， 版本 迁移 脚本 删除 。   零 迁移 脚本   alembic 官方 文档 ， 很 有用 。   flask 下 加上 两个 命令 ， 负责 最 创建 数据库 代码 生成 表格 工作 。   表格 生成 成功 都用 flask - migrate   或者说   alembic 管理 ， 测试 models . py   新加 一列 ， 利用   flask   db   migrate   自动 检测 新 一列 ， 自动 生成 代码 会 精准 。   flask - moment   Moment   JS   送入 UTC 时间 会 自动 转换 本地 时间 ， 服务器 时间 戳 记录 UTC 时间 。 用户 本地 时间 。   模板 上 ：   格式 请 参看   MomentJs   官网   。   flask - wtf   这块 初 接触 理解 上是 困难 ， flask - wtf 提供 是对 WTForms 模块 集成 支持 ， 功能   wtf . quick _ form ( form )     flask - bootstrap     WTForms 额外 支持 。 理解 上的 关键 在于 理解   WTForms   模块 到底 干什么 事情 。   WTForms 模块   简单 来说 WTForms 模块 做的 工作 模板 引擎 上 jinja2 模块 引擎 上 快速 创建 输入 表单 相关 验证 事宜 。   定义 一个 Form 类 ：   Form 类 Field 类 ， Field 类 一个 列表 定义 一系列 Validators   验证 器 。 Field 都有 一个 Widget   ， Widget 负责 HTML 渲染 工作 。   form 类 值得 ：   form 对象 ，   form . username . data   获取 表单 中的 值 。   定义 form 对象 定义   validate _ < field _ >   函数 ， 函数 会 针对 特定 field _ 调用 。 验证 失败 ， 则抛 出   ValidationError   异常 ， 异常 信息 错误 信息 。   Form 类在 python 中的 代码 ：     flask - wtf   下的 代码 ：   flask - wtf   定义 Form 类在 上 提供 便利 ：   会 自动   request . form     request . files   塞 进去 。     validate _ _ submit   方法 即可 ， 集成   request . method   判断 — —   POST   PUT   PATCH   DELETE   都是 。   WTForms   初始化 接收 值 ， 第一个 值   request . form   ， 还 支持 对接 model   对象 ， 还 跟上 关键词 参数 ：   WTForms 提供 很多 内置 验证 器 支持 ， 还 定义 验证 器 。 验证 器   validate   方法 中 ， 。   WTForms 渲染   提到 form 类 实例 中的 Field 调用 str ( )   一段 HTML 代码 ：   模板 引擎 渲染 时 ， jinja2 ， 会 接受 form 实例 。 一个 表单 渲染 ：   python 代码 ， form Field 接受 额外 关键词 参数 ， 其将 属性 传入 input 标签 属性 。   csrf _ token 相关   WTForms   有了   csrf _ token   支持 功能 ：   这块 细节 请 参看 WTForms csrf _ token 相关 章节 ， 不 深究 ， 一个 csrf _ token 校验 。     flask - wtf   推荐 写法 ：   hidden _ tag   方法 flask - wtf 提供 ， 隐藏 html   field   渲染 ，   flask - wtf   默认 会 加上   csrf _ token   支持 ， 语句 ：   一个 hidden 标签 ， 会 渲染 。   flask - bootstrap 提供 额外 支持   flask - bootstrap 提供 额外 支持 ， 简单 来说 编写 jinja2 宏 。   quick _ form   宏 ：   大体 输出 语句 ：   说 大体 ， quick _ form   宏 参数 调配 。 默认 参数 输出 情况 。     form _ errors   宏     form _ field   宏也 都   flask - bootstrap   宏 文件 定义 。 刚 表单 显示 特别 ，   quick _ form   宏 很 好 用的 。   特别 ， 深究 flask - bootstrap   宏 定义 情况 ， 退化 写法 ， 再稍 作 定制 。   flask - wtf   最 原始 写法 ， 再 调配 下 即可 。   WTForms 支持 Field   BooleanField   复选 框   DateField   文本 字段     datetime . date   DateTimeField   文本 字段     datetime . datetime   DecimalField   文本 字段     decimal . Decimal   FileField   文件 上传 字段   HiddenField   隐藏 文本 字段   FieldList   一组 指定 类型 字段   FloatField   文本 字段     float   FormField   一个 表单 字段 嵌入 一个 表单   IntegerField   文本 字段     integer   PasswordField   密码 文本 字段   RadioField   单选 按钮   SelectField   下 拉 列表   SelectmultipleField   下拉多选 列表   SubmitField   表单 提交 按钮   StringField   文本 字段   TextAreaField   多行 文本 字段   WTForms 提供 Validator   DataRequired   确保 类型 转换 后字 段有 数据   Email   验证 电子 邮箱   EqualTo   两个 字 段的 值   常用 两次 密码 输入   InputRequired   确保 类型 转换 前字 段有 数据   IPAddress   验证 IPv4 地址   Length   长度 验证   MacAddress   验证 MAC 地址   NumberRange   数字 校验   Optional   字段 输入 ， 将跳 校验 函数   Regexp   正则表达式 校验   URL   URL 校验   UUID   UUID 校验   AnyOf   输入 值在 任一 值中   NoneOf   输入 值不 一组 值中   flask - login   flask - login 引入 进来   jinja2 模块 都 支持   current _ user   变量 。   提供   login _ required   来对 url 权限 控制 。   flask - login 请 参看 官方 文档 ， 重点 讲 flask - login 都做 事情 ， 参考 资料 1 说的 很 好 。   login _ user   函数 用于 登录 用户 ， 核心 用户 id 写入 flask session 。 类似   logout _ user   id session 中 删除 。   渲染 jinja2 模板 ， 会   flask - login     current _ user   变量 请求 。 调用 flask - login     _ _ user   函数 。   _ _ user   检查 session 中 有没有 用户 id ， 返回   AnonymousUser   ， 有则 调用   user _ loader   装饰 器 注册 函数 。 【 值得 额外 一提 ， python 代码 引用   current _ user   返回 数据库 User 对象 ， 数据库 对象   current _ user ._ _ current _ object ( )   】   login _ required   是对   current _ user     _ authenticated   方法 调用 ， True   ， False 拒绝 。   参考 资料   Flask   Web   开发 第二 版   米格尔 · 格林 贝格 著   安 道译",
            "tags":"web_server",
            "url":"articles/flask-module.html"
        },
        {
            "title":"jinja2模板引擎",
            "text":"前言   jinja2 模板 引擎 flask pelican 中都 ， django 框架 中 ， 模版 语法 大体 类似 ， jinja2 模板 引擎 很 值得 学的 。   jinja2 模板 引擎 python 模块 简单 所示 ：   render 函数 参数 变量 渲染 进去 ， 目标 文本 内容 。   本文 接下来 简要 讨论 下 flask pelican 中 编写 模板 文件 ， 更 详细 内容 请 参见   官方 文档 模板 设计者 文档 一章   。   注释   注释 写法 所示 ， 放在 最 是因为 模板 引擎 注释 很 有用 ， 很 不同于 编程 语言 注释 写法 。   变量   所示 ， 包含 变量 ， jinja2 渲染 模板 会 解析 变量 。     object . a   dot 法 引用 ，   object [ ' a ' ]   写法 ， 调用 实例 方法   object . func ( )   ， 方法 返回 字符串 。   debug 变量 是如 上将 变量 值 显示 。   语句   条件 分支 用于 条件 显示 内容 。   elif 语句 支持 ：   语句   语句 结构 所示 :   循环 区块 中 还 变量 ：   loop . index   循环 记数 ， 1   loop . index0   循环 记数 ， 0   loop .   是否是 第一次 迭代   loop .   是否是 迭代   不 赘述 ， 请 参看 官方 文档 For 语句 。   过滤器   变量 进一步 加上 过滤器 进一步 。 过滤器 类似 linux 系统 管道 作业 风格 ， 多个 过滤器 叠加 ， ：   { {   var  |  striptags  |  title   } }   。   列出 过滤器 功能 ， 更 过滤器 参见 官方 文档 内置 过滤器 清单 小节 。   safe   渲染 值不 转义   capitalize   值首 字母 大写   字母 小写   lower   字母 都 小写   upper   字母 都 大写   title   值 单词 首 字母 大写   trim   值 首尾 空格 去除   striptags   渲染 HTML 标签 去掉   safe 过滤器 请 参看 讨论 符号 。   html 符号   变量 html 符号 :   jinja2 模板 系统 默认 是不 做 ， ：   上 输出 html 中是 html 效果 ，   escape   过滤器 转义 符号 :   转义 输出 html 中 单纯 显示   <   >   符号 ， 不 html 效果 。   flask 设置 全局 auto   escape   ， 需求 。 确实 html 标签 希望 html 标签 形式 显示 ， 而不 escape ， 采用   safe   过滤器   1   。   escape   过滤器 模板 作者 会更 喜欢 别名 缩写 ， 一个 小写 字母   e   。   模板 文件 继承 机制   jinja2 模板 文件 一种 继承 机制 ， 基于 模板 文件 建构 出 一个 模板 文件 。 是在 父 模板 （ 模板 文件 模板 文件 ） 构建 block 区块 ， 所示 :   构建 一个 title 区块 。   子 模板 继承 父 模板 内容 :   定制 ， 比如说 title ， 做成 block ， 子 模板 文件 定义 title   block :   子 模块 block 重载 ， 还   加载 父 模块 block 中的 定义 。   模板 块还 重复 打印 ：   宏   宏和 python 函数 类似 ， 即将 展开 。   外部 宏 文件   引入   import   模板 传递 上下文 ， 上下文 传递 引入 进来 模板 ：   include   宏 文件 推荐 import ， 模板 文件 继承 机制 ， include 语句 用呢 ？   模板 代码 片段 反复 推荐 include 语句 ， 模板 代码 片段 默认 访问 外围 上下文 ：   包含 上下文 不 包含 上下文 都是 ：   技巧   列表 排序   参考   网页   ：   移除 块 空白   空白 指   空格 ， 制表 符 ， 换行符 ， jinja2 这块 全局 配置 选项 。 手工 配置 ， 大体 加上   -   跟上 一个   trim _ blocks   操作 。   Footnotes :   1   参考   网页   。",
            "tags":"python_companion",
            "url":"articles/jinja2-template-engine.html"
        },
        {
            "title":"tornado模块",
            "text":"WARNING   警告 ， 笔者 专注 flask 模块 ， 本文 归档 ， 缺少 新的 内容 ， 旧的 内容 错误 。 【 2019 】   。   简介   tornado python 异步 网络 框架 模块 ， tornado 应对 高 并发 请求 上 性能 很 好 。   安装   第一个 例子   一个 同步 webapp 框架 ， 会 用的 较少 ， tornado 编写 webapp 结构 :   开启 tornado 事件 驱动 循环 :   大体 类似 asyncio :   tornado5.0 ， tornado 自动 asyncio 集成 ， 集成 指的 ： tornado 事件 驱动 自动 挂载 asyncio 主 事件 驱动 循环 之上 。   make   a   app   创建 一个 Application 对象 ， Application 对象 再 详细 讨论 :   代码 ， URL 分发 Handler ， 类似 flask URL 视图函数 分发 过程 。   MainHandler   看作 一个 视图 类 。   编写 视图 类 :   视图 类 很多 细节 再 详细 讨论 。   一个 简单 异步 例子   实际上 异步 函数 写成 asyncio 协程 形式 即可 ， 接触 tornado 老 版本 ， 不得不 承认 tornado 很大 ， asyncio 集成 代码 简洁 。   tornado . gen . coroutine     asyncio . coroutine   请 参看 官方 文档     ， 实际上 试了 ，   @ gen . coroutine   替换   @ asyncio . coroutine   webapp 运行 。   官方 文档 所说 ， 兼容性 ， Tornado coroutine   runner 更 通用 ， 框架 ， asyncio coroutine   runner 不 接受 框架 corotine 。 推荐 tornado 提供 装饰 器   @ gen . coroutine   。   tornado 全局 变量   tornado 代码 只 希望 运行 ， 目标 对象 全局 变量 ， Handler 级别 全局 变量 ， 全局 变量 申请 放在 Handler 类 。   想 变量 多个 Handler 之间 共用 ， 全局 变量 Application 级别 ，   网页   提供 解决 方案 。   大致 Hanlder 接收 字典 参数 ，   initialize   方法 初始化 时将 变量 赋值 ：   正确 关闭 tornado 进程   定制 tornado 关闭 动作 ， supervisor 配合 会 端口 释放 ， 加上 希望 tornado 温和 关闭 重启 而不 杀死 动作 保证 数据 完整 ， 网上 很多 人 提及 ， 一番 搜索 ， 感觉 github 仓库 下的   issue   【 20190606 还 open 着的 】 描述 更 值得 细看 。   一个 背景 知识 ， server . stop ( )   是只 停止 接收 新的 请求 ， keepalive 请求 无效 。   supervisor 默认 发送 信号   signal . SIGTERM   ， 关闭 信号   signal . SIGINT   。   也许 关闭 动作 休眠 时间   gen . sleep   。 有待 进一步 观察 。   Application 对象   url 分发   handlers 参数 url 分发 工作 ， 其是 一个 列表 ，   URLSpec   对象 :   pattern 一个 匹配 url 分发 正则表达式   handler   RequestHandler   子类 ， 定义 url 分发 做 些 。   kwargs ， 字典 值 ， 值将 传递 handler   initialize   方法 ， 。   ， 确切 来说 是给 url 分发 规则 取个 名字 ， 等下   Application . reverse _ url ( , * args )   解析 出 url ， 大体 类似 flask   url _     endpoint 概念 。   pattern 正则表达式 圆括号 包围 group 概念 ， :   group 匹配 到的 参数 ， 入口 参数传递   RequestHandler   对象   HTTP   method ，     post   。     Application . reverse _ url ( , * args )   其后 接受 参数 正则表达式 匹配 ， 反向 解析 url 匹配 子 group 替换 操作 。   kwargs 字典 值 ， 传递   initialize   方法 大致 所示 :   配置   settings   收集 一系列 Application 配置 信息 ， 很多 ， 不一而足 ， 列出 :   debug :   开启 debug 模式   template _ path :   定义 模板 文件夹 所在 位置   static _ path :   定义 静态 文件夹 所在 位置   listen 方法   application 开启 一个 HTTP   Server ， 指定 监听 端口 。   RequestHandler 对象   一个 请求 都将 创建 一个   RequestHandler   对象 ， 其将 执行   initialize   方法 ； 其将 执行   prepare   方法 ， prepare 方法 HTTP 协议 方法 无关 ； 其将 执行 HTTP 协议 方法 ，     post   put   ， url 正则表达式 匹配 子 group 参数 传 进去 ， 提及 ； 其将 执行   _ finish   方法 。   单元 测试   tornado 单元 测试 样 下 :     api . py   文件 :     test _ api . py   文件 :   请 参看   网页   ， 讲到   . fetch   方法 默认 会   . _ url   操作 。   tornado 异常 输出 json 风格 化   tornado   app   发生 异常 ， 其会 调用   RequestHandler     write _ error   方法 ， 定义 方法 ， 使 返回   json   格式 信息 。 更 信息 请 参看   网页   。   附录   参考 资料   官方 文档   ， 中文 翻译 版本 过时 。   tornado 简介 书",
            "tags":"web_server",
            "url":"articles/tornado-module.html"
        },
        {
            "title":"理解web服务器",
            "text":"前言   本文 是对   500lines   项目 篇 文章 学习 讨论 ， 篇 文章 写 得是 极好 ， 编码 很 借鉴 参考 价值 ， 还 能让 读者 http   web   server   做的 事情 有了 一个 。 篇 文章 弄 ， django flask 在做 事 ， 就很 胸有成竹 ， 包括 nginx 服务器 在做 事也 一个 大致 。   计算机网络 HTTP 相关 不 本文 讨论 ， 笔者 自觉 一块 时间 还 再 补一 补 。   web 服务器 要做 工作 ：   占 端口 等着 HTTP   请求 包发   HTTP 请求 包有 格式 ， 信息 parse 操作   请求 要做 点 （ 分发 GET   POST ）   程序 做 点   返回 数据 格式 ， html 。   返回 数据 传 回去   步骤 前 两步 一步 python   HTTPServer   帮 自动 做 ， 更 不用说 django flask 框架 ， 早就 帮 做好 。 只 关注 ， 请求 GET POST ， 程序 总 要干 点 事 ， 要送 回去 数据 整理 好 ， 再 并发 即可 。   更 高级 web   server   flask ， 会 提供 很多 额外 支持 ， 请求 参数 ， 请求 头等 信息 整理 ， 希望 restful 风格 api ， 只 返回 一个 字典 值 ， 响应 头 封装 帮 做好 ， 返回 数据 上 ， html 会 引入 jinja2 模块 引擎 ， 都是 很 好 理解 。 web   server 干的 事 。   第一个 例子   针对 python3 版本 代码 稍 作 修改 。     _ GET   方法 内部 作用 原理 ：     . command   http 协议 请求 头传 GET POST ，   handler 类会 去 找 方法 ， 找到 再 操作 。   函数 名来 分发 编程 模式 ， 很 值得 ， web   server 都 需求 。 url   server _   虚拟 server 分发 ， path   method   函数 分发 ， 再到 高级 参数 验证 valide _   等也 类似 分发 需求 。   简单 模板 输出 方案   就不 码 代码 ， 简单 python 字符串 format 方法 ， 更 jinja2 模板 系统 生成 html 内容 ， 是后 话了 。   挂载 静态 文件   静态 文件 找到 文件 ， 返回 。   index . html   文件 特别 。   500lines 该文 提到 一种 有趣 编码 写法 ：   针对 多种 情况 ， 分发 ， switch 语句 更 python 风格 更 优美 写法 。   简单 cgi 接口   接下来 cgi 接口 代码 是很 简单 ：   核心 针对 python 脚本 文件 ， 启动 cgi 协议 接口 ， 简单 来说 启动 一个 python 解释器 运行 目标 脚本 文件 ， 获取 返回 内容 ， web   server 返回 内容 返回 即可 。   下 cgi 协议 ， CGI 协议 ， 全称 （ Common   Gateway   Interface ） 通用 网关 接口 ， 说 得再 确切 一点 ， cgi 程序 web   server 之间 接口 标准 ， 说 得再 简单 粗糙 点 ， 一个 web   server ， apache     nginx   会把 讨论 返回 静态 文件 做好 ， 请 读者 进一步 参看   篇 文章   。   请求 ， 请求 讨论 CGI 协议 ， nginx web   server ， 例子 中的 大部分 代码 扮演 角色 ， cgi 程序 ， 实际上 python 脚本 ， python 框架 ， 会 讨论 。   路径 上 挂载 参数 环境 变量 传递 进来 ， 工作 ， CGI 协议 定义 内容 。 讲到 cgi 协议 ， 到了 python ， 不 不 提到 pep3333 wsgi 标准 。   WSGI   PEP3333   定义   Python   Web   Server   Gateway   Interface   ， python   web   server   网关 协议 ， 简称 WSGI 协议 。 名字 ， python 世界 里 ， 推荐 WSGI 协议 。 猜到 WSGI 好 ， 路径 path 挂载 参数 ， 送入 环境 变量 。 还 服务器 信息 ， 客户端 信息 ， 本次 请求 信息 都 存入 environ 变量 中 ， WSGI   application （ python 程序 框架 提供 ） ， 是可 调用 ， 规范 。   WSGI   middleware   层 ， django flask （ Werkzeug   ） ， 都将 接触   Middleware   类的 概念 。   nginx   扮演 web   server 服务 静态 文件 角色 ， wsgi 请求 发给 gunicorn ： gunicorn 官方 介绍 ：   Gunicorn   ' Green   Unicorn '     a   Python   WSGI   HTTP   Server     UNIX .   简单 来说 WSGI 协议 扮演 web   server 角色 ， gunicorn 挂载 ， django flask 框架 提供 wsgi 脚本 app ， 或者说 application 对象 所在 。   编码 框架 人 来说 ， 不用 太 在意 ， 记得 调用 path ， path 挂载 参数 ， 写 ， 返回 内容 。 框架 编写 人员 ， 就要 详细 研究 WSGI 协议 。",
            "tags":"web_server",
            "url":"articles/understanding-web-server.html"
        },
        {
            "title":"emacs学习笔记",
            "text":"WARNING   警告 ， 笔者 不怎么 emacs ， 文档 归档 ， 缺少 新的 内容 ， 旧的 内容 错误 ， 放在 权做 参考 。 【 2018 】   前言   打开 emacs 输入 文本 一刻起 ， 入门 。 emacs 说到底 一个 功能 特别 强大 文本 编辑器 ， 角色 文本 编辑器 ， 都是 围绕 展开 。   术语   frame :   emacs 图形 界面 终端 界面   menu :   frame 上方 菜单 栏   tool :   菜单 栏 工具 栏   echo :   主 编辑 窗口 响应 信息 ， minibuffer 显示 。   window :   tool echo 主 区域 window 区域 ， emacs 分出 很多 window ， 指的 window 选中 window ， emacs 很多 buffer ， 选中 window buffer current   buffer 。   buffer :   一个 window 编辑 一个 buffer   scroll   bar :   window 一个 scroll   bar   mode   line :   window 一行 mode   line   格式 :   point :   window 下 cursor 位置 point ， emacs 光标 覆盖 frob o 上 ， point 位置 是在 r o 之间 。   快捷 键 操作   快捷 键用 最 多的 C M 两个 字母 ， C Control 键 ， M Alt 键吧 。   C - w   下 Control 键和 w 字母 。   C - x   C - c   有个 空格 ， 先按 Ctrl + 字母 x ， 再 停顿 ， 再 Ctrl + 字母 c — — 退出 emacs 命令 。   S Shift 键 ， 小写 s Super 键 下 ，   C - x   0   关闭 窗口 ，   C - x   1   只 留 一个 窗口 ，   C - x   2   新开 一个 窗口 ，   C - x   3   右边 新开 一个 窗口 。   M + x   执行 emacs   lisp 内部 命令 ，   C - g   取消 minibuff 中 输入 ， 都是 很 ， 读者 请 记住 。   M + x   shell   shell ， shell 输入 命令 。   文件 操作   C - x   C - f   新建 一个 文件   C - x   C - s   保存 文件   . emacs 文件 放在   利用 新建 文件 保存 文件 操作 大概 揣测 到你 emacs 系统 【   Portacle   emacs 配置 文件 】 ， 新建 一个   ~ / test . txt   即可 。   buffer 操作   C - x   k   关闭 buffer   查找 替换   查找 替换 操作 用到 ， 快捷 键 记住 。 向后 查找 按键   C - s   ， 看 快捷 键 简短 ， 一个 很 快捷 键 。 向前 查找   C - r   。 向前 向后 查找   C - s     C - r   。   替换 操作 按键   M -%   , 先要 输入 匹配 字符串 ， 输入 替换 ， 接下来   按键   y   替换 ， 按键   n   不 替换 ， 按键   !   替换 。   lisp 语法 简介   接下来 讨论 ， 先 简单 介绍 下 lisp 语法 ， 要让 读者 学会 lisp 语言 ， 接下来 接触 最 emacs   lisp 语法 感到 恐惧 。   例子 读者 兴趣 elisp 交互 环境 试验 ， 按键 ：   lisp 语言 一大 特色 程序 数据 都是 列表 ，   形式 。   引号 很 关键 ， 输入 lisp 字符串 都 会被 eval ， 加个 引号 ， 东西 eval 就成 ( 1 ,   2 ,   3 ) 形式 （ 去掉 引号 ） ， 列表 数据 。   ？   x 送入 eval ， 将会 发生 寻址 操作 ， 成 变量 ； 第二个 x 加上 引号 ， eval ， 去掉 引号 ， x 形式 ， x 看作 字符串 ， 要将 送入 eval ， x 字符串 变量 。   lisp 中 程序 结构 一系列 数学 结构 类似 括号 ， 学过 数学 括号 结构 都 ， 先算 再 算 外面 … … . ， 最终 算成 形式   lisp 实际上 类似 运算 ， ( +   1   1 ) 送入 lisp 运算 就会 2 。 lisp 结构 一个 原则 ， 总 括号 第一个 元素 一个 函数 ， ， 将会 发生 错误 。 东西 都是 一系列 管他 参数 。   再来 讲讲 设置 变量 定义 函数 。   设置 变量   设置 变量 两个 方法 ， setq 。   set setq 区别 就在 引号 ， setq 不 加上 引号 ， 第一个 元素 字符 形式 总 视作 变量 。   定义 函数   最 简单 形式 所示 ：   定义 一个 add 函数 ， ( add   x   y ) 实际上 执行 ( +   x   y   ) 。   最 简单 lisp 语法 简介 多了 ， 还 会 接触 ， 内容 还 很 ， 够 探索 。   配置 简介     . emacs   elisp 语句 emacs 配置 。   protacle   配置 推荐   C : \\ Users \\ wz - game \\ portacle \\ config \\ user . el   配置 。   set - default - font :   设置 默认 字体   set - frame - attribute :   设置 默认 字体 大小   两个 命令 放入 . emacs 文件 中 ， 配置 全局 配置 。   窗口 最大化   toggle - frame - maximized :   窗口 最大化   . emacs 文件 emacs 打开 窗口 最大化 。   命令 只 emacs24.4 + 版本 。   emacs24.4 版本 想 启动 窗口 最大化 ， 参考   网站   ， emacs 初始化 脚本 上 加上 一句 即可 ：   复制 粘贴 快捷 键   复制 粘贴 快捷 键 改成 常见   Ctrl + C     Ctrl + V   快捷 键 ：   更 信息 参见 emacs   CUA 模式   。   global - visual - line - mode :   显示 段落 自动 换行   . emacs 文件 中 emacs 显示 文件 段落 会 自动 换行 。   - - tutorial :   默认 按键 \" C - h   t \" ， 打开 新手 教程   describe - key :   默认 按键 \" C - h   k \" ， 描述 按键   describe - function :   默认 按键 \" C - h   f \" ，   描述 函数   describe - variable :   默认 按键 \" C - h   v \" ， 描述 变量   三个 函数 学习 emacs   lisp 很多 内部 知识 ， 一条 不错 获取 信息 来源   1   。   \" C - x   1 \" 按键 命令 ：   delete - - windows :   默认 按键 \" C - x   1 \" ， 关闭 窗口   split - window - :   默认 按键 \" C - x   2 \" ， 新开 一个 窗口   split - window - :   默认 按键 \" C - x   3 \" ， 右边 新开 一个 窗口   delete - window :   默认 按键 \" C - x   0 \" ， 删除 窗口   global - linum - mode :   左侧 显示 行号   【 portacle 不 推荐 】   . emacs 文件 中 emacs 左侧 永远 显示 行号 ， 参考   网页   。   定义 命令   几个 命令 很 常用 ， 定义 简短 一点 命令   kill - buffer :   默认 按键 \" C - x   k \" ， 关闭 buffer 。   switch - - buffer :   默认 按键 \" C - x   b \" ， 切换 buffer 。   find - file :   默认 按键 \" C - x   C - f \" ， 打开 文件   save - buffer :   默认 按键 \" C - x   C - s \" ， 保存 buffer ， 或者说 意义 上的 保存 文件 。   save - - buffers :   默认 按键 \" C - x   s \" ， 保存 buffer ， 或者说 保存 文件 。   save - buffers - kill - terminal :   默认 按键 \" C - x   C - c \" ， 退出 emacs 。   defun 定义 新的 函数 ， 采用 一种 简单 机制 defalias 来给 原 函数 取 一个 新的 名字 ：   再 emacs ， 发现 smex 多了 一个 open 命令 ， ， 原有 find - file 命令 还 。   CLISP 开发 环境 搭建   推荐   protacle   。   利用 quicklisp 安装 cl - project   slime - repl 输入 ：   一个 快速 创建 lisp 项目 模板 项目 ， 参考 即可 。   quicklisp   大概 操作 ：   加载 编写 项目   新建 项目   protacle   安装 目录   projects 文件夹 下 ， 调用 ：   加载 还 东西 都 ， package . lisp   下如 加上 内容 ：   函数 加到   wanze _ clisp _ project . lisp   文件 去 。   slime   repr   做 ：   一种 做法 ， 还 emacs 打开 文件 ， 编写 函数 slime   repr 测试 。   slime   repr 加载 目标 项目 ， 运行 ：   slime   repr 运行 ：   打开 主 lisp 文件 编写 函数 ， 光标 放在 函数 ， 执行   Ctrl + c   Ctrl + c   ， 编译 函数 。   再到 slime   repr   运行   会 发现 函数 新的 修改 立马 生效 。   读者 情况 阅读 。   smex 插件   smex 插件 用处 ， 打开 emacs ， 下 M - x ， 会 很多 选项 ， 正是 smex 插件 功能 ， 输入法 ， 很 有用 。   common - lisp 流行 集成 开发 环境   protacle   emacs 有了 命令 行 提示 功能 ， 不 安装 smex 插件 ， 讨论 参考 学习 价值 。   smex 官方 github 站在     , 看了 介绍 大致 差不多 。   git   clone ， 很小 一个 文件 ， 单独 下载 smex . el 文件 ， 文件 放在 一个 喜欢 地方 上 ， 放在 \" ~ / 工作 空间 / emacs / \" 。   . emacs 文件 中 代码 ：   详细 讲解 。   add - - list   一个 函数 ， 接受 一个 列表 变量 ， 一个 元素 列表 中 。   请看 例子 ，   nil   一个 空 列表 ：     load - path   变量 放着 emacs 加载 插件 时的 搜索 路径 ， 一个 新的 smex 插件 所在 路径 加 进来 ， 路径 放着 目标 el 文件 。   加载 新的 插件 \" \" ， 大致 类似 配置 语句 ：   . el 放入 emacs 文件夹 里的 文件夹 即可 。   接下来 加载 插件 ：   require   函数 跟着 插件 名字 ， smex . el 文件 。   定义 按键 配置   接下来 进一步 按键 配置 ：   定义 按键 配置 方式 用来 随意 配置 学到 命令 。   global - set - key   函数 跟着   kbd   函数 按键 字符 封装 ， 第一个 元素 看作 按键 ， 第二个 元素 看作 调用 命令 。   第一个 命令 ， 下了 Alt + x 按键 ， 将会 触发 smex 命令 。 谈及 Alt + x 命令 实际上   execute - extended - command   ， 配置 ， 按键 才能 激活 ， 等于 打入冷宫 。   tab 都 自动 换成 space   参考 网页 ：   NoTabs   . emacs 文件 里 代码 ：   80 列 规则   控制 代码 不 超过 80 列是 一个 习惯 ， 起到 控制 写出 缩进 过于 代码 冲动 ， 写 代码 复制 粘贴 能很 好地 网页 pdf 文档 上 显示 。   配置 文件 ：   该宏 包的 github 地址     ， 该宏 包的 emacswiki 地址     。 代码 第五 行是 设置 列宽 80 ， 第六 行是 设置 竖线 颜色 。   第三 行 第四 行 配置 模式 下都 会 显示 竖线 ， 看 作业 文档 ， python 脚本 编程 语言 ， 设置 没什么 不妥 。 作业 文档 是非 编程 语言 org 模式 ， 推荐 单独 设置 。   python 模式   python 模式 推荐   python - mode   宏包 内置   python . el   。 宏 包的 下载     ， 简单 设置   C - c   C - c   运行 python 文件 交互 模式 ， 很 。 这次 默认 python3 ， 很 满意 。 不 python 文件 第一行   # ! / usr / bin / env   python3   python - mode . el 猜 到了 ， 简单 默认 调用 python3 。 设置 设置 python2 ， 该宏 包的 github 地址     ， 再 网络 搜索 找寻 答案 。   分 窗口 控制   参考   网页   ， 希望 运行   C - c   C - c   ， 弹出 窗口 平行 模式 ， 模式 ， 设置 :   效果 图所 示 :   快速 启动 emacs   先用   命令 启动 一个 后台 服务器 ， 命令 . bashrc 文件 中 每次 启动 自动 运行 。   系统 desktop 文件 （   / usr / share / applications   找到 ， 用户 主 文件夹   . local / share / applications   再 新建 一个 。   ） 修改 :   本来   emacs   % F   ， 改为 emacsclient ，   - c   参数 启动 图形 界面 。 - a 参数 设置 为空 字符串 ， 建立 一个 emacs 后台 服务器 ， 其也 会 自动 创建 一个 。 双 击 emacs 关联 文件 自动 快速 emacsclient 打开 。 读者 尝试 ， emacs 打开 文件 确实 很快 ， 带来 。   关闭 frame   emacs   daemon 一个 后台 进程 ，   ps   aux  | grep   emacs   查看 ， emacsclient 建立 frame 窗口 都 关闭 ， emacs 后台 daemon 。   emacsclient 编辑 一个 文件 ， 保存 提示 关闭 ， 没什么 ， emacsclient 打开 buffer 都 在的 ， 编辑 内容 丢失 ， 很 不 符合 用户 习惯 。   查看 进程 号 kill emacs   daemon 进程 做法 ， emacs 输入 命令   kill - emacs   关闭 emacs 后台 服务 进程 ， 方法 。 手工 kill   emacs 后台 服务 进程 操作 ， 调试 ， 就用   emacs   test . org   方式 启动 一个 meacs 进程 调试 。   接下来 不 emacs ， 正确 关闭 emacs 做法 快捷 键   C - x   C - c   ， 函数   save - buffers - kill - terminal   ， 快捷 键 接触 过了 ， 一个 完整 emacs 进程 中 ， 退出 emacs 命令 ， 其将 确保 buffer 都 保存 ， 退出 。 值得一提的是 函数 关闭 emacs 后台 服务 进程 ， 实际上 熟悉 emacsclient 操作 ， 去管 emacs   daemon 概念 ，   C - x   C - c   退出 emacs 命令 即可 。   关闭 buffer 操作 ， 简单 点击 窗口 关闭 图标 ， 关闭 frame ， buffer 。 编辑 完 想要 关闭 buffer ， 执行   kill - buffer   即可 ， 文档 保存 其会 提示 ， 还 会 提示 关闭 frame 。   字体   emacs   daemon 启动 图形 界面 ， 字体 设置 失效 ， 设置   2   :   思路 frame 加载 再 加载 字体 配置 。   左侧 文件 树 面板   IDE 一个 特色 左侧 一个 文件 树 面板 ， 快速 切换 文件 ， emacs 下的 neotree 宏包 类似 功能 。 项目 github 地址     。   很 简单 ， 常规 加载 :   下 F8 快速 切换 文件 树 面板 。   pdf 文件 打开 卡住   emacs docview 功能 看 pdf 文件 ， 会 带来 很大 便利 ， 打开 pdf 文件 卡 ，   doc - view - continuous   设置 nil 稍微 缓和 。     neotree 项目 看得出 很多 地方 进一步 完善 ， 比如说 emacsclient 模式 下 根 目录 读取 。   多个 窗口 之间 编号 切换   window - numbering 宏包 不错 ， github 项目 地址     。 该宏 包 窗口 编号 ，   M - 1   快速 切换 窗口 焦点 。   官方 推荐 一个 配置 所示 :   还 加上 一句 :   开启 编号 模式 ， 效果 图所 示 :   更 窗口 操作 知识 请 参看   网页   ， 介绍 挺 。   markdown 模式   markdown - mode 宏包 emacs markdown 渲染 ， 类似 org 模式 折叠 功能 。 github 项目 地址     。   简单 配置 即可 :   用法 Tab 折叠 功能 外 ， 再 慢慢 ， 会用 不到 ， 介绍 重头戏 ， markdowon 实时 预览 功能 。   markdown 实时 预览   emacs - livedown 宏包 利用 nodejs livedown 模块 功能 ， markdown 文档 实时 显示 网页 端 。 github 项目 地址     。   安装 npm ， npm 安装 livedown 。   做 配置 :   emacs 双 击 一个 md 文件 ， 网页 端就 显示 渲染 网页 ， livedown 本身 支持 实时 md 文件 实时 更新 。 上 图片 :   emacsclient 下 开启 一个 frame 还 执行 命令   livedown : preview   网页 才会 切换 md 预览 。   文字 模式 下的 emacs 操作   ssh 远程 主机 上用 emacs 编辑 文件 ， 文字 模块 下 操作 emacs ， 带来 新的 。   光标   参考   网页   。   键盘 上的 方向 键 辅助 搜索 跳 转 很快 ， 不知 方向 键 会出 。 只好 借助 快捷 键了 。   切换 窗口 焦点   提 过了 ， 一个 ， 再次 。   C - x   o   切换 窗口 操作 。   Footnotes :   1   参考   mastering - emacs - - - year - guide   2   参考   网页   。",
            "tags":"editor",
            "url":"articles/emacs-learning-notes.html"
        },
        {
            "title":"emacs的org模式学习笔记",
            "text":"WARNING   警告 ， 笔者 不怎么 emacs ， 文档 归档 ， 缺少 新的 内容 ， 旧的 内容 错误 ， 放在 权做 参考 。 【 2018 】   org 转 tex 初步 配置   . emacs 文件 加上 一句 ，   org - latex - default - packages - alist   列表 存储 着从 org 文件 生成 tex 文件 默认 加载 宏包 。 列表 是由 一系列 三个 元素 列表 ， 第一个 元素 是要 加载 宏 包的 选项 ， 第二个 参数 是要 加载 宏 包的 名字 ， 第三个 选项 设置 t nil ， 即要 加载 不 加载 。 简单   org - latex - export - - latex   命令 默认 加载 一系列 宏包 都 清空 ， 宏包 会和 接下来 用的 xelatex 不 匹配 ， 学习 有了 文档 配置 ， 简单 文档 配置 加 进来 即可 。   org 文档   #+ LATEX _ CLASS   用来 设置 目标 tex 文档 documentclass ，   #+ LATEX _ CLASS _ OPTIONS   documentclass 命令 选项 ， 目标 代码 ：     tex 文档 代码 ：   article . sty 文件 正是 文档 配置 。   xelatex 命令 生成 tex 文档 ， 会 发现 配置 文件 都刷 ， 页面 布局 ， 字体 都是 ， 生成 pdf 很 美观 。 面对 ， 第一个 org 输入 模式 latex ， 第二个 好自 建 命令 自建 环境 。   title 命令   默认 title 命令 填的 org 文件 文件名 ， title ：   配置 。   类似 AUTHOR ， DATE tex 文档 author date 命令 ， 命令 org 文档 生成 html 兼容性 很 好 。   设置 目录 深度   org 文档 上 OPTIONS 配置 ：   此即 相当于 tex 文档 上 代码 ：   org 模式 latex 命令 详解   emacs 编辑器 ， 打开 org 后缀 文件 emacs org 模式 ， 不 额外 配置 。 更 多的 信息 请 参阅   org 模式 官网   。   ， org 文档 定义 latex class article ， 一个 星号 section ， 两个 星号 subsection ， 三个 星 subsubsection 。 latex class book ， 一个 星号 latex 命令 part ， 接下来 依次 chapter section 。   四个 星的 情况 默认 转 成了 列表 形式 ， 想要 。 org 文件 上 设置   article 支持 subsubsection ， book 支持 subsection ， 四级 结构 命令 。   ，   org - export - headline - levels   设置 一个 很大 数字 ， 5 级 结构 ， 五颗 星够 用了 ， article subparagraph ， book subsubsection 。   . emacs 文件 生效   好吧 ， 修改 . emacs 插件 ， 启动 emacs 来使 生效 厌倦 。   org 文件 基本操作   org 文件 基本操作 很 简单 ， 视图 控制 ， 光标 落在 一个 标题 上 ， 下 Tab 键 试试 ， 一个 按键   Shift + Tab   ， 不 光标 落在 标题 上 ， 全局 性质 展开 折叠 。 按键 操作 emacs 按键 操作 先 暂时 不予 ， 就用 鼠标 操作 。   org latex 基础   编写 最 简单 带有 文档 结构 org 文件 ， 写上 一段 文字 ， 会 发现 ， 标记 语言 之间 内部 相似性 ， org 上的 一段 文字 tex 文档 上的 一段 文字 ， html 文档 上   包围 一部分 一个 段落 ， org 文档 上多 空格 空行 都会 保留 目标 tex 文档 html 文档 上 ， 如同 往常 ， 多余 空行 视作 一个 空行 ， 多余 空格 视作 一个 空格 可行 （ html 文档 多个 空格 只 视作 一个 空格 ） 。 恩 ， ， 很 满意 。   页面 布局 控制 ， 利用 定义 article . sty book . sty 加载 geometry 宏包 设置 ， 都 工作 得很 好 ， html 文档 生成 干扰 ， 很 好 。   想要 xelatex 引擎 ， 生成 tex 文档 sty 配置 文件 ， 所说 设置 好 字体 配置 ， xelatex ， 中文 显示 解决 ， 都很 好 。   ， 目标 tex 文档 中 ， 额外 命令 环境 ， 利用 宏包 sty 文件 上 配置 ， ， 都 工作 得很 好   。   接下来 一个 很 紧要 ： tex 文档 符号 。   符号 （ org 模式 中 ）   利用 org 文档 生成 目标 tex 文档 html 文档 ， 三个 文档 内部 原生 语义 癖好 ， 符号 显示 个大 。   第一个 # 符号 ， 接触 类似   #+ TITLE   配置 写法 ， 符号 org 文档 中是 注释 ， 不尽然 。 一行 开头 # 符号 ， 内容 不 加 额外 空格 ， # 符号 内容 都会 顺利 显示 （ 包括 html 文档 中 ） ， 唯一 一行 开头 # 符号 ， 跟着 空格 ， 整 行都 会被 视作 org 文档 内的 注释 内容 ， 整 行都 生成 目标 tex 文档 html 文档 中 。   接下来 tex 文档 中的 符号 org 文档 中都 写上 ， 输出 时都 会 所示 转换 ：   转换 空格 很 理想 ， \\ 符号   \\ textbackslash { }   命令 （ 字体 ） ， 条 线路 跟来 更 多的 关注 内容 ， 小 细节 且先 略过 。   值得一提的是 符号 显示 生成 目标 html 会有 方案 ， 显示 得很 好 。   字号   tex 文档 中 一个 两个 字号 生成 pdf 时会 字符 ， 不 担心 ， 测试 ， org 文档 一个 两个 三个 字号 原样 保留 在了 tex 文档 中 ， html 文档 中 unicode 符号 ， 谈论 pdf 显示 效果 。   更 多的 符号 中 文化   sty 配置 文件 中 设置 好 即可 ， 输入法 输入 ， 没什么 好 担心 。 中 文化 sty 配置 文件 中 配置 好 ， 不用 操心 。   \\ 符号   \\ 符号 还 讨论 ， 希望 输入 单独 符号 输入 即可 ， \\ 符号 紧跟着 字符 符号 ， 类似 tex 文档 中 命令 形式 ：   代码 将会 原样 送入 tex 文档 中 ， \\ 符号 发生 （ \\ 符号 跟着 中文 字符 不 讨论 情况 中 ， \\ 符号 。 ） 。   很 ， org 文档 无缝 对接 tex 文档 ， html 上就 会多了 很多 奇怪   \\ test   命令 ， org 文档 ， 还 tex 文档 第一 编辑 代码 源呢 。 上 tex 文档 命令 环境 org 文档 中都 不 推荐 （ 还 会 详细 讨论 定义 命令 对接 ） ， 一个 情况 是个 例外 ， 请 数学 环境 。   数学 环境   接下来 要讲 意义 上和 org 模式 关系 不 大了 ， org 文档 中 添加 原生 数学 环境   大多   原样 存放 在了 目标 tex 文档 目标 html 文档 上了 ， tex 文档 不用说 ， 目标 html 文档 正确 显示 数学 环境 tex 代码 是因为 org 生成 html 目标 文档 配置   mathjax   工具 。   mathjax 支持 数学 环境 tex 代码 原 latex tex 代码 细微 差异 ， 命令 环境 支持 ：     \\ [   \\ ]   环境 支持 ， displaymath 不 支持 ， 古怪 ， 估计 org 生成 配置 还 没 优化 好和 mathjax 工具 无关 。   来自 amsmath 宏 包的 equation equation * 环境 支持 ， equation 显示 编号 ， 估计 mathjax 配置 关系 。   多行 数学 环境 ，   \\ \\   换行 多行 数学 环境 ， gather gather * align align * 都 支持 ， 编号 正确 显示 ， 估计 org 生成 目标 html 文档 mathjax 配置 。   数学 环境 命令 可用 命令 用那 不好 一一 讨论 ， 常用 tex 原生 数学 命令 amsmath 宏包 数学 命令 （ 数学 环境 ） 都是 支持 。   换行 命令   \\ \\   命令 html 会被 转换   < br   / >   命令 ， org 文档 中 自如 加上 换行   \\ \\   命令 。   \\ \\ [ 10pt ]   命令 用了 ， html 上也 概念 。 换行 命令 算是 一个 tex 命令 org 中的 特例 。   插入 列表   插入 列表 org 模式 解决 完美 ， 无序 列表 项以 ' - ' 、 ' + ' ' * ' 开头 ， latex itemize 环境 ； 有序 列表 则以 ' 1 . ' ' 1 ) ' 开头 ， latex enumerate 环境 ，   description 环境 org 生成 html 文档 css 额外 ， org 上 简单 输入 即可 ：   进一步 深度 定义 推荐 都在 sty 文件 定制 。   插入 引用   org 模式 上 插入 引用 是很 ， label 命令 格式 ：   其将 ：   引用 目标 地点 语法 ：   targetname 定义 地点 名字 ， shownname 页面 显示 链接 文本 ， 第一种 形式 不 设置 shownname ， 生成 tex 代码 ref 命令 ， 形式 ：   加上 shownname hyperref 宏包 提供 hyperref 命令 ， ：   提醒 读者 ：   targetname 中文   ， shownname 中文 。   外部 链接 类似 语法 ：   tex 代码 ：   形式 ：   格式 ， 讨论 略过 。 链接 颜色 hyperref 宏 包的 配置 ， 请在 sty 文件 上 。   生成 html 文档 代码 很 好 ， 无需 多言 。   插入 脚注   pdf html 显示 风格 ， 实际上 脚注 好 协调 ， html 上 脚 注更 确切 不 脚注 尾注 。 org 模式 提供 两种 插入 脚注 语法 ：   两种 写法 html 上 显示 稍微 区别 ， 无关紧要 。 更 推荐 第一种 写法 ， 脚 注 内容 写 进去 不用 命名 编号 细节 ， 第二种 写法 还要 花 心思 去 脚注 名字 ， 浪费 脑力 ， 选择 org 模式 不 重视 内容 快速 写作 ， 第二种 脚注 写法 分散 写作者 注意力 嫌疑 。   文字 环境   粗 体   粗 体斜 体等 要起 作用 ， 字符 空 一个 空格 。   两个 星号 包围 字体 将被 加粗 ， 生成 tex 代码 ：   生成 html 代码 ：   斜 体和 emph 命令   org 模式 下 ， 两个 / 符号 包围 字符 信息   输出 html 文档 上将 ：   两个 / 符号 包围 环境 称作 斜体 环境 ， tex 代码 则是 ：   tex 原始 代码 确实 emph 内的 字体 将用 italic 字形 ， 命令 换成 形式 ， ulem 会将 换成 下划线 ， 喜欢 换成 红色 ， 更 效果 。 html i 环境 稍 作 调整 效果 ， ：   简单 理解 两个 / 符号 包围 字符 文字 功能 。   下划线   一段 时间 ulem 宏 包了 ， 除开 花里胡哨 命令 ， uline uwave 命令 用的 最 多的 。 uwave 命令 去 ， uline 命令 org 模式 很 支持 。   org 文档 中的   将会 tex 文档 中的 代码 ：   html 代码 所示 ：   underline   class ， org 生成 html 定义 好了 ， 文字 加上 下划线 效果 。   短 代码 环境   org 文档   输出 html 文档 都 会被 code 标签 包围 ， 即短 代码 环境 。 而在 tex 文档 下 差异 。   第一种 情况 ttfamily 字族 情况 ：   第二种 情况 verb 命令 ：   不得不 承认 \\ ~ { } 符号 选得 很 好了 ， 代码 内 干扰 。 更 多的 细节 参见 插入 代码 小节 讨论 。   verse 诗歌 环境   诗歌 环境 org 模式 很 好 ， 会 自动 一行 加上   \\ \\   换行 。 只 输入 ：   生成 tex 代码 ：   更进一步 定制 sty 文件 配置 verse 环境 即可 。   HTML 代码 ：   p . verse   class 自动 生成 html 文档 很 粗糙 定义 好了 — — 简单 缩进 了下 ， 满意 。   quote 引用 环境   类似 quote 语录 环境 ：   tex 代码 quote 环境 ， 改动 。 html 代码 一个 特定 代码 ：   blockquote 标签 第一次 简单 ， html 文档 做 配置 ， 标签 环境 默认 有了 缩进 举动 ， 一点 引用 环境 。   居中 环境   讨论 情况 类似 ， 不 赘述 。   插入 横线   如上 示 ， org 文档 中 连接 号 大于 等于 5 ， 其将 输出 横线 ， tex 代码 ：   html 代码 熟悉 hr 标签 。   插入 图片   插入 图片 用的 谈及 插入 引用 语法 ， 最 简单 形式 所示 ：   生成 tex 代码 ：   到其 figure 环境 ， html 代码 ：   引入 figure   class 。   ：   插入 图片 形式 ：   其将 讨论 插入 引用 形式 ， tex 文档 href 命令 ， html a 标签 。   加上 标题   图片 加上 标题 所示 ：   生成 tex 代码 形式 ， 引入 figure 环境 ：   加上 标签   生成 tex 代码 所示 ：   遗憾 ， 同在 插入 引用 小节 提及 ， label 中文名 标签 不 支持 ， 只好 随便 取 一个 名字 。   值得一提的是 ：   #+ NAME :   CAPTION ， 单独 — — CAPTION 命令 。   简单 优化   网页 情况 居中 尺寸 控制 ， 推荐 css 设置 即可 ：     max - width   控制 图片 尺寸 ，   figure 设置 是让 图片 居中 。   LaTeX 图片 控制 图片 尺寸 概念 ， 参考 [ 代写 ， 引用 缺失 ， 下次 翻 到补 上 ] 网站 ， 给出 解决 方案 。   定义 fig 环境 读者 写 LaTeX 文档 时 快速 输入 图片 。 核心 设置 第一行 引入 adjustbox 宏包 ， 选项 export 。 还   . emacs   上 加上 设置 ：   代码 第一行 includegraphics 命令 默认 选项 ，   max   width   关键 ， 控制 图片 不 超过 行宽 0.95 倍 ， 图片 原始 图片 显示 ， 超过 ， 图片 宽度 行宽 0.95 倍 。   第二行 情况 原 width 设置 ， 不 做 ， 设置 都会 失效 ， 第三 行是 设置 浮动 H ， float 宏包 控制 。   设置 图片 显示 大致 差不多 ， css sty 样式 优化 读者 随意 。   上标 下标   上标 下标 org 文档 中就 ：   敢 是因为 html 文档 中 标签 即能 很 好地 解决 上标 下标 ， 生成 tex 代码 ：   自动 加上 数学 环境 。 推荐 读者 . emacs 上把 选项 加 进去   1   ：   org 上 自如 书写 a &# 94 ; b a _ b ，   a &# 94 ; { b }   a _ { b }   标 模式 。   插入 表格   接下来 插入 表格 插入 代码 ， 就最 简单 内容 ， 单独 提出 一章 ， 是因为 org 模式 emacs 编辑器 下 ， 表格 ， 生成 表格 ， 运算 ， 代码 ， 运算 代码 ， 加载 文件 运算 生成 表格 ， 加载 文件 代码 内容 。 这部分 内容 算是 高级 东西 ， 就拖 单独 一章 。   最  |  开头 ， 表格 开头 元素 ，  |  分开 ，   Tab   键 ， 填充 会 自动 跟进 。   首行 标题 开头 元素 内容 之间 加上  | --+-- |  形式 分开 ， 只 开头 写上  | -     Tab   键 即可 。   LaTeX 情况   表格 显示 这一下 反倒 LaTeX 简单 些了 ， 只 . emacs 上 设置 ：   启用 booktabs 宏包 模式 ， 生成 很 漂亮 三线 表了 。 表格 环境 还 支持 额外 插入 属性 设置 ， 用的 最 多的 对齐 属性 ， booktabs 模式 下 tabular 环境 对齐 设置 。   例子 ：   将会 生成 LaTeX 代码 ：   （ 推荐 读者 网页 布局 中央 核心 区域 宽度 生成 pdf 中央 核心 区域 宽度 相差 很 远 。 ）   网页 情况   网页 情况 实际上 css 设置 ， 对此 很 熟 ， 给出 摸索 一种 三线 表 样式 ：   实在 想 加上 竖线 ， 额外 表格 前 加上   table rules 属性 。 说是 html5 ， 不 推荐 做 ， 推荐 css 调整 。 三线 表 样式 ， 表格 特别 长了 ， 临时 加上 rules 属性 ， rows 。   长 表格   网页 下倒 表格 过长 显示 ， pdf 分 页 。   #+ ATTR _ LATEX :     : environment   tabular 环境 换成 longtable 环境 ， 加载 longtable 宏包 ， 对齐 参数 推荐 一个 新的 参数   x   ， 既有 p 参数 控制 宽度 对齐 。 是由 设置 引入 （ [ 参考 网站 ， 引用   代写   ] ） ：   ， 例子 ：   生成 LaTeX 代码 ：   显示 效果 很 好了 。   表格 数据 导出   org 模式 下对 表格 数据 做 很多 运算 ， 比如说 光标 停留 表格 中的 一列 ， 输入   M - x   ， 输入   org - table - sum   ， minibuffer 下会 显示 一列 总和 。 很多 功能 ， 都不 感兴趣 ， 最 感兴趣 表格 数据 导出 ， 导出 脚本 程序 ， 作图 。 输入   M - x   ， 输入   org - table - export   ， 会 提示 。   org 转 html tex 协调   org 转 html tex 文档 协调 很 好 解决 ，   一行 内容 ， 只 原样 输入 进 tex 文档 中 ， 不 html 文档 中 。 类似 命令 ：   类似   选择 org 模式 ， 不 过多的 添加 tex 原始 代码 。 html tex 代码 越多 org 文档 越 （ 最 糟糕 情况 等于 编写 两边 文档 ） ， 用的 ， 推荐   一行 修正 。   命令 基于 tex 文档 结构 ， 加 进去 ， 加 进去 反而 更好 提醒 写作者 此处 写 些 。   mainmatter 命令 放在 文档 内容 ， appendix 放在 附录 标题 ， backmatter 放在 参考 文献 标题 。 内容 照旧 ， html 页码 自然 不用 。   命令 都是 针对 book 类的   。   参考 文献 协调性 太多 简单 列表 表达 即可 。   原有 环境 命令 属性 修正   只 表格 ， 图片 ， 列表 ， 源代码 区块 。   文档 内非 定义 命令   基于 简单 原则 ， sty 配置 文件 引入 额外 定义 命令 环境 ， 实在 不得不 定义 命令 环境 ， 内容 html pdf 都 共享 （ 正是 org 模式 本身 ） ， 接下来 工作 就会 变得 很多 ， 讨论 。   讨论 情况 中 ， org 模式 针对 tex 代码 html 代码 特定 环境 命令 class ， 推荐 进一步 定制 环境 命令 class 即可 。 讨论 情况 除开 特定 环境 命令 class ， 环境 命令 class ， org 文档 中 ，   都将 输出 tex 文档 格式 ：   html 文档 代码 ：   读者 tex 文档 环境 （ sty 文件 中 ） 配置 好和 html   class （ css 文件 中 ） 配置 好 即可 。   插入 代码   小 代码 讲 过了 ， 两个 等号 两个 波浪 号 包围 tex 文档 中 一个 ttfamily 字体 ， 一个 verb 命令 。   简单 代码   简单 代码 所示 ， tex 文档 verbatim 环境 。   不 华丽 表现 不 染色 简单 代码 推荐 EXAMPLE 环境 ， verbatim 环境 不 太 满意 ， 分割 直线 ， 代码 文本 清晰 分开 。 fancyvrb Verbatim 环境 ， org 模式 EXAMPLE 环境 输出 Verbatim 环境 ？   本来 会很 简单 ， 效果 还 麻烦 ， （ 2015 - 01 - 22 ） org 模式 EXAMPLE 选项 打开 ， 参考   网站   情况 下 ， 大致 一个 解决 方案 ：   手工 编译 emacs ， [ lisp ] → [ org ] 文件夹 里 找到 ox - latex . el 文件 ， 文件 里   org - latex - - block   函数 ， format ， 明白 默认 输出 verbatim 环境 。 两行 删除 ， 改动 ：   简单 % s 类似 编程 语言 字符串 方式 即可 ， 环境 改为   org - latex - verbatim - env   定义 。 编译 emacs 。   编译 emacs ， 方式 ， 提及 更新 org 宏 包的 方式 。   . emacs 文件 代码 ：   为你 emacs 宏包 管理 提供 更 多的 可用 宏包 ， 宏包 melpa 提供 。 打开 emacs ， 打开 options 宏 包 管理 ， 更 多的 宏 包 选项 ， 最新 org ， 安装 即可 。 宏包 都 放在 主 文件夹   . emacs . d   文件夹 。   顺便 提 宏包 管理 插件 删除 安装 宏 包 ， 光标 到你 想 删除 宏 包 名字 ， 字母   d   键 ， 有个 标记 D ， 光标 位置 ， 下   x   键你 会 minibuffer 提示   2   。   . emacs . d 文件夹 elpa 文件夹 ， 会 org 宏包 相关 文件夹 ， 打开 找到 ox - latex . el 文件 ， 类似 谈及 做出 修改 ， 更新 elc 文件 。 就用 emacs 打开 文件 ， emacs - lisp byte - compile     file 选项 。   接下来 修改 . emacs 文件 ， 修改 接口   org - latex - verbatim - env   变量 定义 好 ：   ( setq   org - latex - verbatim - env   \" Verbatim \" )   好了 ， 测试 效果 。   更 华丽 代码   org 模式 还 提供 SRC 环境 ， latex 更 华丽 代码 环境 ：   输出 调成 listings 环境 ：   不 太 喜欢 listings 环境 ， 其对 minted 环境 输出 支持 很 好 （ 将要 谈到 选项 支持 ） ：   minted 环境 有个 ， 加上 背景 色 分页会有 ， 介绍 xelatex 基础 语法 中的 插入 代码 小节 里 谈到 定义 命令 tcbpython tcbbash 引入 进来 ， tcolorbox minted 显示 代码 一块 很 完美 人 满意 。   . emacs 文件 里 设置 ：   ， SRC 环境 跟着 bash ，   就会 输入 tex 代码 ：   类似 还 定义 python tcbpython ， 会 成 tcbpython 环境 。 定义 语言 ， 设置 minted 默认 引擎 ，   情况 ：   生成 tex 代码 ：   很 好了 。 html 情况 ， 代码 都能 显示 ， 染色 ， 安装 emacs htmlize 宏包 某种 染色 效果 。 。 真的 好 丑陋 ， 情况 还 不 太 熟悉 ， 略过 不 做 讨论 。   SRC 环境 选项   SRC 环境 跟着 程序 语言 种类 还 很多 选项 ， 选项 很 ， 设置 很 底层 。 兴趣 慢慢 研究 手册 。   暂时 介绍 一个 选项   - n   ：   SRC 环境 选择 minted 环境 输出 ， 参数 会 设置 进去 ：   listings 环境 会 支持 很 好 ， 谈及 定义 tcbpython 环境 tcbbash 环境 ， 代码 一行 都将 加上 数字 ：   很 美观 ， 更好 做法 ， 喜欢 加上 数字 ， sty 配置 文件 tcbpython （ 定义 名字 ） 定义 里 加上 ：   即可 。   假设 定义 python 环境 没 ， 反正 不 涉及 html ， sty 文件 配置 好 环境 即可 。   无 参数 环境 形式 。   插入 代码 文件   废话 不 多说 ， 插入 代码 文件 格式 ：   是不 形式 ， INCLUDE 命令 放在 SRC 环境 ， 执行 而被 视作 代码 。 插入 代码 文件 只能 形式 ， 跟着 src ， 可能性 ， 接下来 程序 语言 ， 提及 SRC 环境 选项 加上 去的 。   项目管理   emacs org 模式 项目管理 都是   org - publish - project - alist   参数 配置 。 很多 花 俏的 参数 配置 ， 给出 一种 简单 解决 方案 。 心目 中的 理想 方案 是要 输出 html 输出 pdf 之间 协调 ， 一个 书籍 都有 一个 独立 文件夹 ， 内部 图片 文件 环境 ， 引用 逻辑 会很 简单 。   下 ， emacs 只 做 简单 配置 ：   website 项目 名字   ， 等下 要在   org - mode   下   运行 命令   org - publish - project   ， 输入 名字 ， org 项目 pulish 操作 。   base - directory   参数 org 文件 放置 根 目录 ，   exclude   排除 templates 文件夹 （ 文件夹 会 放置 项目 都会 模板 文件 图片 文件 。 ） 。   recursive   参数 设置   t   ， 很 关键 ， 其和   base - directory   ， 再 加上 递归 支持 ， 就会 保留 原 项目 文件目录 系统 ， 简单 来说 文件夹 文件夹 下的 org 文件 ， 会在 原地 输出 html 文件 ， 正是 喜欢 效果 。     publishing - function   设置 publish 执行 函数 动作 ， 只 加上 输出 html 文件 动作 。 tex 一块 还 很 不 完美 ， （ minted 宏包 代码 路径 管理 ， 提交 一个 bug 说最 新版 修复 ubuntu texlive 还 没 发布 。 ） ， pdf 制作 放在 做成 完美 形式 合情合理 ， 就不 加 进去 。   项目 文档 强制 刷 一遍   参考   网页   。   不 org 模式 ， M - x ， 输入   ielm   elisp 交互 环境 ， 输入 命令 即可 。 t 都 强制 刷 ， project _ 设置 项目 名字 。   org 模式 额外 特性   快速 输入   emacs 深度 定制 开发 出 很多 快速 输入 技术 ， org 模式 自带 快速 输入 方法 ， 很 好 用了 。 快速 输入 EXAMPLE 环境 ， 先 输入 一个   <   符号 ， 再 输入 一个 小写 字母   e   ， 下 Tab 键 ， 快速 输入 EXAMPLE 环境 ， 类似 ：   c :   CENTER 环境   e :   EXAMPLE 环境   h :   HTML 环境   H :   HTML 单行 命令 ，   #+ HTML :   I :   INCLUDE 单行 命令 ，   #+ INCLUDE :   l :   LATEX 环境   L :   LATEX 单行 命令 ，   #+ LATEX :   q :   QUOTE 环境   s :   SRC 环境   v :   VERSE 环境   定义 快速 输入   小节 参考   网页   。   提及 快速 输入 之外 ， 还 定义 快速 输入 方法 。     org - structure - template - alist   列表 值 添加 内容 :   add - - list 函数 来将 元素 添加 目标 列表 值中 去 ， 元素 一个 元组 ， 第一个 快速 输入 字母 ， 第二个 输入 字符 。 第二个 例子 ，   \\ n   换行 ，     是等 下 光标 停留 地方 。   org 输出 markdown 文档   pandoc 不 支持 org 输出 markdown 文档 ， markdown 输出 org 文档 ， 看 不 ， 都 懂得 ， emacs org 模式 强大 ， 快乐 模式 下 编辑 工作 ， 还 markdown 文档 输出 org 文档 ？   希望 走 条 路线 ， org 文档 输出 markdown 文档 ， markdown 文档 放入 静态 动态 网站 框架 下 ， 既有 内容 层和 表现 层的 分离 灵活 ， emacs org 模式 强大 内容 编辑 能力 。 org 是有 支持 输出 markdown 文档 后台 ， 输出 命令   org - md - export - - markdown   。 即可 ， 不 配置 。   ？ 不 太 ， 配置 文件 加上 一句 :   输出 markdown 文档 src 区块 区块 都 输出 缩进 代码 形式 ， 推荐 安装   ox - gfm   宏包 生成 github 更 友好 markdown 文档 ， 其将 src 区块 三个 斜点   ` ` `   符号 封装 环境 ， 加上 语言 标明 。   github 项目 地址     。 常规 装上 :     org - gfm - export - - markdown   命令 生成 结构 更好 一点 markdown 文档 。   Footnotes :   1   参考 网站   2   参考   网站",
            "tags":"editor",
            "url":"articles/emacs-orgmode-learning-notes.html"
        },
        {
            "title":"odoo学习笔记",
            "text":"WARNING   警告 ， 文档 归档 ， 年久失修 ， 内容 已 过于 陈旧 ， 放在 权做 读者 参考 。 【 2018 】   历史   Odoo 前身   Tiny   ERP ， 最初 是由 比利时 Fabien   Pinckaers   创建 。   2009 年的 ， 发布 5 版 ， 公司 风投 ， 盈利 增长 ， 软件 更名 OpenERP 。 OpenERP 名字 最为 熟知 ， 软件 包含 几百个 模块 ， 财务 管理 、 采购 / 销售 管理 、 库存 管理 人力 资源管理 、 销售点 管理 、 项目管理 都有 。   2014 年 9 月 ， 软件 发布 8 版 ， 版本 优化 web   client 一块 基础 上 ， 大 功能 。 有了 Website   builder 模块 ， 公司 快速 架构 出 网站 ； e - commerce 模块 公司 快速 搭建 销售 平台 ； business   intelligence 模块 ， 辅助 生成 高质量 演示 用的 图形 。 OpenERP 名字 很 好地 软件 雄心壮志 ， 软件 更名   Odoo   名字 。   2017 年 10 月份 odoo 发布 最新 稳定 版 ， odoo11 版 ， 本文 基于 odoo11 版来 讨论 。   软件 架构 基于 web   client / server 模型 ， 公司 内部 涉及 到的 信息流 都 整合 ， 包括 实施 层面 ， 包括 分析 决策 层面 。 预见 将来 Odoo 开发 快速 公司 构建 出 一个 生态 :   商业 智能化   信息 时代 到来 ， 商业 不可避免 走向 信息化 ， 智能化 。 最新 ERP Ⅱ 概念 包含 内容 所示 :   Business   Intelligence   商业智能 ， 关注 分析 数据 ， 数据 知识 过程 。   e - Commerce   电子商务 ， 关注 对外 战略 。   Enterprise   asset   management   企业 资产 管理 ， 持续 管理 公司 资产 生命 周期 ， 强有力 分析 工具 提高 资产 使用率 削减 成本 。   Procurement ( SRM )   采购 ， 最大化 节约 成本 支持 终端 终端 采购 ， 物流 过程 。   Production ( PLM )   生产 ， 管理 优化 生产能力 物料 资源 。 MRP 升级 版 。 （ MRP ERP 前身 ， 美国 生产 企业 解决 物料 需求 提出 来的 ， 是要 解决 :   生成 产品 ， ABC 物料 ？ ） 谈论 PLM 解决 物料 需求 ， 解决 生产 时间 ， 优化 生产能力 目的 。   Distribution ( SCM )   配送 ， 控制 仓库 流程 ， 使 补给 需求 更改 做出 快速 。   Accounting   会计 ， 自动化 财务 管理 ， 确保 管理 便捷 绩效 做出 实时 。   Human   Resource   人资 ， 维护 一个 完整 雇员 数据库 ， 更好 雇员 。   Corporate   performance     governance   公司 表现 监管 ， 公司 部门 更 高的 控制 ， 目标 流水线 作业 。   Customer   services ( CRM )   客服 ， 获取 维护 客户 关系 ， 利用 客户 体验 知识 管理 评估 。 （ 其和 BI 模块 很 紧密 ）   Sales   销售 ， 定单 确认 ， 下单 ， 货运 开发 票等 。   Odoo 框架 简介   一副 图 很 好地 Odoo 技术 框架 :   PostgreSQL 数据库   Object   Relation   Mapping   熟知 SQL   ORM 包装 层 。 Odoo   psycopg2   接口 之外 ， ORM 层是 Odoo 写的 。   Base   Module   Distribution   官方 模块   Report   Engine   负责 生成 报表 。 支持 报表 格式   PDF , OpenOffice , HTML   三种 。   Workflow   Engine   工作 流 引擎 。 支持 任意 复杂度 工作 流 。   WebService   提供 网络 调用 接口 。 支持   Net - RPC 、 XML - RPC   两种 。 Odoo flask Werkzeug WSGI 层的 包装 ， jinja2 模板 工具 。 剩下 框架 Odoo 写的 。   python 版本   python3 ，   .   安装 配置   odoo git 仓库 大了 ， 推荐 下载 odoo 发布 压缩 包 文件 源码 。 讨论 是从 源码 安装 过程 。 数据库 相关 配置 是个 难点 ， 会再 详细 讨论 。 本文 叙述 更 多的 偏向 centos7 ， 源码 安装 本身 基于 linux 系统 大 环境 ， linux 发行 版 安装 包的 支持 差异 外 ， 差别 太 大了 。     PostgreSQL 数据库   PostgreSQL 是很 有名 一个 开源 数据库 ， 最初 加州 大学 伯克利分校 计算机系 开发 ， 其和 sqlite3 区别 采用 client / server 模型 ， Odoo 搭建 PostgreSQL 基础 之上 ， 继承 client / server 模型 。 Odoo PostgreSQL 数据库 版本号 很 ， 最新 。   最 安装 先 暂时 ， 数据库 配置 再进一步 讨论 。   Postgresql 数据库 学习 ， 读者 简单 参考 写的   postgresql 数据库   一文 。   python 虚拟 环境 等的 配置   一块 odoo 关系 太大 ， 请 读者 自行 调配 。   安装 odoo 依赖   常规 pip 安装 即可 ， 系统 依赖 ， 请 确保 安装 大 环境   python3     python3 - dev   ， 内容 ：   centos   centos 统一 描述 ， 请 确保 软件包 都 安装 上了 ：   ubuntu   python - ldap   模块 安装 参考   网页   ， 请 确保 两个 软件包 都 安装 （ 会 提示 找 不到 lber . h 错误 ） :   psycopg2 模块 请 确保 软件包 安装 :   几个 软件包 确保 安装 ， libxml2 lxml 模块 。   pillow 模块 安装 软件包 :   nodejs   centos 只 简单 yum 命令 安装 ， 安装 npm 工具 自动 装上 。   安装 odoo   odoo 源码 addon 生态 较大 ， 推荐 不   python   setup . py   install   方式 安装 ， odoo 源码 运行 脚本 启动 。 推荐 方式 ， setup 文件夹 odoo 文件 重 命名   odoo - bin   移到 项目 主 目录 上 ， 运行 ：   调试 修改 都 。   数据库 配置   数据库 创建 一个 系统 登录 用户 同名 用户 ， 要有 创建 数据库 权限 ， 数据库 权限 。 odoo 默认 用户 来和 postgresql 数据库 交互 （ 参考   网页   ） 。 postgres 用户名 ， root 用户名 都是 不 。   用户 不 ， PostgreSQL 会报 错 :   Odoo 框架 用户 还 创建 数据库 权限 。 去做 :   用户 有了 创建 数据库 权限 ， 这块 内容 参考   网页   。   系统 提示   . psql _ history   文件 ， 简单 touch 即可 。   pg _ hba . conf   postgresql 很多 连接 配置 出了 都是   pg _ hba . conf   文件 没 配置 好 ， 更 细节 请 参看 写的   postgresql 数据库   一文 。   默认 配置 ：     文章   说 两项 改成   md5   ，   postgresql   docker 版   默认 配置 改成 md5 ， 刚 改成 md5 好了 ， odoo 运行 后我 改 回 ident 发现 能行 。   记住 odoo 是用 系统 用户名 登录 postgresql ， 数据库 一个 系统 内 ， 用的 两行 连接 配置 ， 推荐 改成   md5   。   重启 PostgreSQL 服务器 :   初步 启动   运行   python   odoo - bin     会 很多 选项 ， 简单 熟悉 。   - c   CONFIG ,   config = CONFIG   读取 配置 文件 ， 很 常见   - s     save   ， 保存 运行 命令 行 配置 ， 下次 简单   python   odoo - bin   运行 。 配置 文件 用户 家 目录 下的   . odoorc     . openerp _ serverrc   文件   。   pidfile = PIDFILE   指定 进程 pid 文件 ， 很 常见 。   addons - path = ADDONS _ PATH   用户 定义 addons 时 有用   设置 插件 addons 路径 ， 默认 会把 源码 addons 文件夹 加上 去 ， 会 出错 。 设置 源码 addons 文件夹 。 设置 多个 addons 路径 语法 :   addons - path = addons ,   myaddons   ， 用于 加载 定义 模块 。   http - interface = HTTP _ INTERFACE   指定 http 端口 ， 默认 0.0 . 0.0 ， 设置 localhost   - p   PORT ,   http - port = PORT   http 服务 默认 端口号   8069   。   logfile = LOGFILE   日志 文件 保存 ， 日志 打印 很多 选项 ， 时间 再 研究 。   - u   UPDATE ,   update = UPDATE   升级 模块   - D   DATA _ DIR ,   data - dir = DATA _ DIR   设置 odoo data 存放   db - filter = REGEXP   正则表达式 过滤 web   UI 可用 数据库   - d   DB _ NAME ,   database = DB _ NAME   odoo 数据库   - r   DB _ USER ,   db _ user = DB _ USER   odoo 连接 数据库 用户名   - w   DB _ PASSWORD ,   db _ password = DB _ PASSWORD   odoo 连接 数据库 密码   windows 下从 源码 安装   windows 下有 exe 安装 包 ， 其会 开启 一个 odoo 后台 常驻 服务 ， windows 下 早期 开发 工作 ， 本地 网络 调试 都会 便利 。 源码 启动 odoo 经验 说 ：   exe 安装 postgresql 数据库 还 ， 数据库 配置 都在 ， 一块 忽略 。   nodejs 安装 npm 安装 不 多说 。   odoo python 包 依赖 安装 ， 安装 官方 文档 介绍 ， 官方 文档 ：   加上 pypiwin32 包   原 requirements . txt   包 尝试 ， 几个 包 pip 安装 成功 ， 推荐     安装 包 ， 版本 稍微 高 一点点 没事 ：   ` ` `   greenlet   lxml   MarkupSafe   Pillow   pyldap   reportlab   ` ` `   官方 文档 说的   psutils     psycopg2   pip 安装 成功 。 下载 whl 包 安装 即可 ：   ` ` `   pip   install   . whl   ` ` `   所述 ， setup 文件夹   odoo   文件 重 命名   odoo - bin   运行   python   odoo - bin   即可 。   说 过的   save   选项 会在 当前目录 输出 一个   odoo . conf   文件 ， 读者 配置 好 数据库 设置 ， 几个   ：   ` ` `   pg _ path   =   安装 postgresql bin 目录   db _ host   =   localhost   db _   =   False   db _ password   =   openpgpwd   db _ port   =   5432   db _ sslmode   =   prefer   db _ user   =   openpg   ` ` `   odoo . conf   数据库 相关   db _ user   数据库 连接 时的 用户名 ，   db _ password   数据库 连接 时 密码   db _ host   数据库 host   db _ port   数据库 端口号   默认   5432   db - filter   正则表达式 过滤 ， 不 匹配 数据库 会被 隐藏 （   % h   hostname   % d   domain     ( i ) % d   ( i )   忽略 大小写 ，   % d   匹配 域名 名 ， 比如说   odoo .   匹配 数据库   odoo     Odoo   。 ）   db _ template   默认   template1   网络 相关   日志 相关   翻译 相关   邮箱 相关   email _   odoo 发送 邮件 时的 显示 邮箱 地址   默认   False   smtp _ server   smtp 服务 地址   smtp _ port   smtp 服务 端口号   smtp _ ssl   smtp 服务 开启   ssl   smtp _ user   登录 smtp 服务 用户名   smtp _ password   登录 smtp 服务 密码   初入 odoo   章节 浅显 地讲 刚 odoo 界面 熟悉 ， 更 多用户 操作 开发者 知识 等都 再 慢慢 讨论 。   数据库 管理 界面   数据库 管理 界面   / web / database / manager   ， 新建 数据库 （ create ） ； 复制 数据库 （ duplicate ） ； 删除 数据库 （ drop ） ； 备份 数据库 （ backup ） ； 恢复 数据库 （ restore ） 。   注销 Administor 账户 ， 就会 一个 登录 界面 。   登录 界面   登录 界面   / web / login   ， 数据库 管理 操作 。   Administrator 首 选项   右上角 Administrator → 首 选项 设置 网站 语言 ， 时 区 ， 管理员 头像 ， 管理员 邮箱 个性 签名 。   导入 一个 翻译   左侧 翻译 一栏 ， 点击 导入 一个 翻译 即可 加载 一个 翻译 。   新的 Demo 用户   左侧 用户 一栏 ， 点击 创建 一个 新 用户 ， 创建 一个 新 用户 界面 。 新建 用户 先 手工 设置 密码 ， 模块 安装 会给 用户 设置 权限 ， 网页 导航 条 用户 。 比如说 新的 Demo 用户 管理员 权限 ， 设置 选项 。   模块 管理   模块 是可 安装 模块 ， 模块   __ manifest __. py   设置   ' application ' :   True   ， 模块 一个 。   模块   安装 ， 更新 ， 卸载 操作 。 卸载 模块 ， 会把 数据库 关联 数据 清空 掉 ， 卸载 模块 前 建议 先 备份 数据库 ， 花 不了 时间 。   修改 公司 信息   最 左上角 ， 鼠标 划过 会 编辑 公司 数据 信息 ， 点击 修改 公司 信息 界面 :   设置 公司 Logo ， 名字 ， 地址 ， 网站 。 设置 选单 还 设置 币种 ， 币种 设置 会 影响 会计 模块 默认 币种 。 信息 设置 填 上的 都填 上 。   进销 存和 财务 系统 抽象 讨论   进销 存和 财务 软件系统 大多 融为一体 。 进销 存 块 最 软件 仓库 管理 软件 ， 采购 销售 慢慢 加上 去的 。 理解 很 ， 仓库 管理 看作 最底层 模块 ， 采购 销售 是于 之上 模块 ， 采购 销售 财务 很多 信息 交流 。 图所 示 :   简单 来说 采购 销售 一笔 成交 订单 都 两个 信息流 ， 一个 是仓 ； 一个 财务 。 信息流 过程 是由 系统 自动化 。 采购 部门 例子 系统 内部 信息流 自动化 过程 。   采购 部门 例   采购 部门 职能 接受 部门 采购 ， 定期 汇总 做成 采购 计划 ； 采购 计划 会对 供应商 询价 、 议价 ； 下 采购 单 ； 跟踪 供货商 发货 ； 货到 后 验货 、 入库 。 供应商 换货 、 退货 。   看 采购 计划 ， 公司 部门 都 采购 部门 发送 采购 需求 ， 部门 模块 会 情况 自动 发送 采购 需求 功能 ， 仓 管的 最小 库存 原则 ， 再 销售 部门 紧急 需求 （ 原则上 部门 不 紧急 需求 发送 仓管 ， 仓管 最小 库存 原则 发送 采购 需求 ， 部门 特别 紧急 需求 采购 部门 发送 采购 需求 。 还 公司 部门 情况 种类 繁多 库存 小的 情况 ， 采购 部门 发送 需求 ） 。 信息 采购 需求 发送 机制 公司 情况 优化 。   采购 需求 ， 系统 具备 自动 整理 功能 ， 供应商 分类 ， 紧急 程度 插队 机制 。 采购 人员 初步 整理 采购 需求 ， 信息 自动 生成   询价 单   ， 系统 提供 电邮 ， 打印 询价 单的 功能 ， 供应商 洽谈 视频 功能 。 询价 结束 对方 同意 采购员 点击 信息 发送 采购 部门 经理 ， 经理 确认 ，   采购 单   自动 生成 。   采购 单 确认 ， 讲的 信息流 分成 仓 管和 财务 两边 。 看 仓管 ， 货物 还 没 送到 ， 仓管 将要 到的 货物 ， 预先 仓库 整理 ， 快速 存放 工作 。 货物 送到 采购员 验收 ， 验收 确认 采购 单上 单击   收货   ， 点击   入库   操作 ， 货物 正式 入库 ， 仓管 产品 ， 单价 ， 重量 体积 都 自动 存放 软件系统 仓管 栏了 。   财务 ， 采购 单 ， 财务   接受 发票   ， 点击   确认 生效   ， 信息 送到 财务 去了 。 财务 付款 事宜 。 财务 付款 完 采购员 就会 采购 单 。   谈论 采购 部门 例的 流程 ， 流程 死的 ， 不 是最 优 。 公司 情况 功能 需求 底层 信息 流程 做出 调整 优化 。   创建 addon   开发 前   Odoo 开发 一条 黄金 准则 修改 现有 模块 ， 特别 官方 内置 模块 。 做 会让 原始 模块 代码 修改 混为一谈 ， 很 难对 软件 升级 管理 。 创建 新的 模块 （ 原有 模块 基础 之上 ） 修改 扩展 功能 目的 。 Odoo 提供 一种 继承 机制 ， 第三方 模块 扩展 现有 模块 ， 官方 来自 社区 ， 继承 修改 任意 层次 ， 数据 模型 业务 逻辑 用户界面 。   快速 生成 模块 骨架   快速 生成 一个 模块 骨架 :   位置 新建 一个 myaddons 文件夹 ， myaddons 文件夹 下 创建 一个 名字 mymodule 模块 骨架 。 创建 好了 读者 翻 。 官方 推荐 模块 结构 所示 ：   一个 泛泛 而论 情况 ， 文件夹 文件 是不 。 内容 进一步 。   推荐 模型 定义 python 文件 都 放入 models 文件夹 中 ， 简要 介绍 ：   demo 文件夹   ， 放着 demo . xml   controllers 文件夹 ， http 路径 控制   views 文件夹 ， 网页 视图 模板   static 文件夹 ， 网页 资源 ， 子 文件夹 : css ， js ， img ， lib 。   Odoo 模块 文件   模块 Odoo 框架 模块 还 新建 一个   __ manifest __. py   文件 。   scaffold 自动 创建   __ manifests __. py   文件 大致 内容 :   depends   模块 依赖 关系 ， 是指 模块 Odoo 框架 内 模块 依赖 。 模块 实在 没什么 依赖 ，   base   模块 填 。   data   模块 加载 数据 文件 ， 别看 数据 文件 ， 不怎么 ， Odoo 视图 ， 动作 ， 工作 流 ， 模型 对象 大部分 内容 都是 数据 文件 定义 。 xml csv 文件 放置 再 讲 。   demo   定义 数据 文件 情况 下 加载 ， demonstration 模式 下才 会 加载 ， 新建 数据库 是勾 选上 加载 演示 数据 选项 。   大体 类似 pypi 包 常见 setup . py   文件 内容 ：     模块 名字   summary   简短 介绍   description   详细 介绍   author   模块 作者   website   模块 网站   category   模块 分类   version   模块 版本号   license   模块 版权 信息 ， 默认 AGPL - 3   installabel   默认 True ， 设为 False 禁用 模块   auto _ install   默认 False ， 设为 True ， 依赖 模块 ， 依赖 模块 都 安装 ， 模块 自动 安装 ， 模块 胶合 ( glue ) 模块 。   application   默认 False ， 设为 True ， 模块 一个 。 模块 建议 设置 True ， Odoo 后 点击 本地 模块 ， 默认 搜索 过滤     ， 主 模块 会 显示 。   安装 定义 模块   说了 设置   addons - path = addons ,   myaddons   ， 加载 定义 模块 。 安装 就和 安装 模块 两样 ， 清除 搜索 栏 输入 搜索 关键词 ， 模块 面板 。 模块 第一次 安装 ，   激活 开发者 模式   ，   更新 列表   ， 找到 想要 模块 。   定义 模块 简单 内容 修改 ， 重启 odoo 即可 当即 生效 ， 模块 数据库 模型 定义 改动 额外 文件 添加 ， 还 更新 模块 。   第一个 模块   controllers   修改 controllers   controllers . py   文件 ：   请 读者 安装 所说 安装 更新 定义 模块 （ 激活 开发者 模式 ， 更新 模块 列表 ， 安装 模块 ） 。   先   / / /   来看 效果 。 controllers 文件 大体 类似 于的 django views . py 文件 ， 定义 视图函数 。   ， 一行   world 文字 ， 祝你 好运 。   views   views 文件夹 内容 更 类似 django 模板 文件 ， odoo 定义 QWeb 模板 语法 ， 会 详细 讨论 。 先 修改   __ manifest __. py   文件 中 data 属性 ， 好把 目标 模板 文件 加载 进来 （ 最新 scaffold   命令 写 好了 ） ：   templates . xml 文件 内容 ：   Qweb 模板 语言 ， 提及 简单 下 :   输出 :     < t   t - esc = \" i \" / >   是先 计算   i   值 ， 打印 。   controllers main . py 文件 ， 模板 文件 。   调用   http . request . render   函数 ， 猜到 一个 网页 模板 渲染 输出 函数 。 这次 运行 加上   - u     update   目标 模块 。   models   熟悉 django 同学 models 东西 ， odoo 写的 ORM 接口 ， 废话 少说 ， 看 代码 写法 ：   security   security 文件夹 一个   ir . model . access . csv   文件 ， 对模型 访问 权限 管理 ， 加上 记录 ：   group _ id : id   留空 ， 用户 模型 读的 权限 。     __ manifest __. py   文件 挂上 ：   demo     demo . xml   上 加上 演示 数据 ， 测试 写得 模块 。   定义 数据 方式 对接 模型 定义 ，   model   ，   field   = \" \"   值 记录 值 。     controllers . py   改成 :     templates . xml   改成 样子 :   读者 重 启动 odoo   server 来看 显示 效果 （ 请 创建 一个 新的 数据库 开启 演示 模式 ） 。   美化 网页   odoo 内置 模块   website   ， 利用 进一步 开发 出和 原 odoo 网页 统一 风格 网页 界面 。     __ manifest __. py     \" depends \"   属性 改为 :   controllers 加上   website = True   设置 。   模块 文件 修改 :   重启 odoo   server ， 升级 模块 看 （ 更新 manifest template ） 。   网站 左边   HTML 编辑 主题 选择 ， 顶上 右边 编辑 模型 。   ：   HTML 编辑 功能 实验 升级 模块 后会 丢失 。   url   route 参数   东西 django 很 类似 ， 先 略过 ， 再 详细 查阅 讨论 ， 定制   odoo   自带 商业 系统 弄 。   data 文件   odoo 视图 xml 数据 文件 ， 一块 较为 陌生 ， 再 熟悉 。   odoo 标签 下的 数据 送给 odoo 数据 。   其后   operation   ：   record   数据库 数据 更新 新增 操作   model   操作 模型   id   （ external   id ， external   id   存储   ir . model . data   字符串 ， 用于 快速 引用 条 记录 。 ）   field   用来 record 定义 字段 数据   delete   用来 数据库 删除 数据   function   模型 上 调用 方法   快捷 标签   menuitem   快速 定义 一个   ir . ui . menu   记录 ， 一个 菜单 。   template   快速 创建 一个   QWeb   视图 ， 继承 视图 修改 操作 推荐 template 。   id   ( external   id   或者说   xml   id )   inherit _ id   （ 继承 ， external   id ）   report   快速 创建 一个   ir . actions . report   记录 。   定制 odoo   本文 讨论 深度 定制 odoo 现有 商业 体系 。   一个 菜单 （ 菜单 有子 菜单 ） ， 菜单 模型 记录 。 菜单 odoo 框架 中是 生成 ？ 谈到 odoo 模型 对象 实际上 SQL 表格 一条 记录 ， odoo 框架 显示 菜单 一个 odoo 中的 一个 模型 对象 ， 表格   ir _ ui _ menu   （ 模型 名   IrUiMenu   ，   _     ir . ui . menu   ） ， 其在 xml 中的 声明   menuitem   标签 ， 细节 等下 再 讲 。 菜单 连接 一个 动作 ， 用户 点击 菜单 ， 动作 将会 触发 。   动作 对象 存放   ir _ act _ window   （ 模型 名是   IrActionsActWindow   _     ir . actions . act _ window   ） 表格 中的 。 动作 触发 接下来 是要 视图 。   视图 变动 ， 视图 都是 存放   ir _ ui _ view   （ 模型 名是   View   _     ir . ui . view   ） 表格 中的 ， 找到 视图 模型 视图 类型 来的 ， 视图 类型 默认 列表 ， 表单 ， kanban 。 视图 解析 过程 查找 目标 视图   primary   视图   arch   内容 ， 目标 视图 parent ， parent 视图 解析 ， 目标 视图 parent ， arch 内容 ， 子 视图 展开 。   ：   就会 找到   res . company   相关 视图 ， 显示 目标 类型 动作   view _ mode   字 段来 最 优先 显示 方案 。   研究 对象 模型 ， 视图 ， 菜单 ， 动作 ， 实际上 都是 odoo 模型 ， 对象 值是 存放 SQL 表格 里的 ， 程序 一系列 索引 ， 取值 操作 ， 最终 生成 显示 ， 大概 odoo 框架 发生 故事 概貌 。   定制 菜单   修改   views / views . xml   文件 定义 菜单 对象 ：   菜单   动作   menuitem     菜单 视图 中 显示 名字 。   sequence   显示 排序 。   parent   是本 菜单 父 菜单 。 是子 菜单 指定 ， 顶级 菜单 不 指定 。   action   指定 菜单 连接 动作 。 连接 动作 属性 不用 指定 ， 系统 会 引用 动作 属性 。 菜单 动作 关联 。 ， 子 菜单 数据 模型 关联 。   act _ window     act _ window 动作 UI 中 显示 名字 （ 类似 QT 中 动作 菜单 中的 项目 情况 ） 。   res _ model   act _ window 动作 数据 模型 （ 动作 数据 模型 关联 ）   view _ mode   act _ window 动作 打开 后 支持 视图 模式 。   定制 视图   用的 视图 定义 动作 设置 ：   设置   view _ mode   ， 定义 视图 声明 好 模型 名 即可 。   表单 视图   tree 视图   定义 模型   _   定义 模型 SQL 表格 名字 ，     odoo 模型 还 一个 字段 ， 很多 显示 搜索 都 依赖 于它 。   required   设置 True 则该 字 段为 必 填 项   string   不 写 第一个 参数 ， 字 段在 用户界面 显示 文字   default   默认 值   Char   定义 一个 字符串 输入 字段 ， Char ( )   函数 接受 可选 参数 ，   string   模型 用户 名字 ；   required   ；     用户 UI 界面 下的 信息 ；   index   布尔 值 ， 默认 False ， True 数据库 中为 列 创建 一个 索引 ( index ) 。   Boolean   布尔 值   Integer   整数 值   Float   浮点 数值   Text   大段 文本 输入   Selection   几个 值的 选择   Html   Date   Datetime   Many2one   关系         字段   One2many   关系       字段   pgadmin3 介绍 中也 ， 创建 表 头字 段 :   id   表格 中 一条 记录 独特 id   create _ date   创建 日期   create _ uid   创建   write _ date   修改 日期   write _ uid   修改   odoo8 推出 新的 ORM   api 语法 ， 详细 讨论 。 这块 内容 参考   odoo     api   guideline   项目 。   Recordset   新的 API 引入 一个 核心 概念   Recordset   ， Recordset 是个 东西 ？ 讲的 一个 模型 （ 类 ） 对象 （ 实例 ） 集合 一个 Recordset 对象 。 — — recordset 情况 ， 一个 限定 条件 其内 元素 必定 模型 ， 集合 情况 删除 过滤 掉 元素 （ 记录 ） recordset 对象 。   官方 文档 描述 ， 一个 Recordset 对象 排序 了的 模型 对象 集合 。 还 指出 还 存放 重复 元素 ， 会变 。 名字 猜到 Recordset 对象 支持 集合 操作 ， 事实 确实 。   Recordset 支持 运算 :   操作   +   还 保留 次序 ， recordset 排序 ， 次序 :   次序 集合 set 是不 ？ 进一步 讨论 。   @ api . multi   默认 ， 返回 一个   RecordSet ， 返回 RecordSet ， 额外 操作 。   @ api .   加上 装饰 器 ， 方法     模型   RecordSet   一条 记录 （ multi 装饰 器的 基础 上 ， 装饰 器 ， 自动 循环 条 记录 ） 。   domain 语法   小节 参考   网页   。   Odoo domain 语法 ， 其就 好像 一个 过滤器 ， SQL SELECT 语句 。 最 语句 形式   [ ( ' field _ ' ,   ' operator ' ,   ) ]   field _   目标 模型 field 名字 。   operator   一个 字符串 ， 可用 值有 :   =   ! =   >   > =   <   < =     ilike   ,   \" \" ,   \"   \" ,   \" parent _ left \" ,   \" child _ \" ,   \" parent _ \" 。 parent chind 某种 记录 关系 ， 先 暂时 略过 。 意义 都是 很 。     是和 field _ 类型 值 。   圆括号 包围 语句 几个 逻辑 运算 符 连接 :   &  |  !   ，   &   默认 逻辑 运算 连接 符 ， 两个 圆括号 表达式 逻辑 运算 连接 符 ， 则要 视作 其间   &   。 形式 大概 类似 :   多个 逻辑 运算 符的 情况 ，   !   先 解析 ， 只 作用 第一个 元素 ；   &    |  作用 两个 元素 。 一个 简单 解析 步骤 是先   !   解析 进去 ， 解析 ， 再将  |  解析 进去 ， 相当于 一个 并联 电路 接 进来 ， 过滤 条件 一个 大的 串联 过滤 线路 。 表达式 解析 :   domain :   解析 :   search 方法   一个 recordset 对象 调用 search 方法 返回 一个 recordset 对象 。   search 方法 接受 一个 参数 ， 参数 谈论 基于 odoo   domain 语法 过滤器 表达式 。   表达式 :   含义 调用   res . users   表格 或者说 recordset ， 执行 search 方法 ， 选中 record login 字段 等于 admin 。   接下来 执行 search 方法 ， 返回 _ recs 一个 recordset 对象 ， recordset 对象 执行   write   方法 ， 接受 一个 字典 值 ， 更改 SQL 表格 表头 （ 属性 ） ， 改为 值 。 值得一提的是 ， recordset 调用 write 方法 会将 recordset 内 record 都 修改 操作 。   讲到   super ( )   继承 修改 原 模型 方法 ， 请看 例子 :     @ api .   自动 遍历 目标 recordset ， 方法 一个 record 。 程序 逻辑 很 简单 ， 用户名 登录 用户 （ todo   task 管理 管理 计划 ） ， 会报 错 。 调用 方法 。   write 方法     api .   方法 下 ， 属性 修改 都将 Record write :   推荐   write   操作 ：   . env   . env . user   用户   . env . lang   语言   . env [ ' res . users ' ]   获取 模型 对象   . env . cr . execute   执行 sql 语句   继承 修改 odoo   扩展 现有 模块   现有 模块 ， 推荐 做法 新建 一个 模块 扩展 修改 现有 模块 目的 。 方法 python 中的 类   _ inherit   属性 。 标识 将要 扩展 模块 。 新的 模型 继承 父 模型 特性 ， 只 声明 想要 修改 行了 。 继承 机制 修改 模型 视图 业务 逻辑 等对 原 模块 全方位 修改 。   实际上 ， Odoo 模型 定义 模型 之外 ， 都在 注册 中心 注册 了的 ， 全局 环境 一部分 ，   . env [ model   ]   引用 。 引用   res . partner   模型 ， 写作   . env [ ' res . partner ' ]   。   模块 增加 field   代码   _ inherit   继承 原 模块 ， 再 增加 field :     res . users     res . partner   雇员 合作 伙伴 ， 再摸 ， 先 简单 看作 一个 SQL 表格 ， Many2one 讲 过了 给定 SQL 表格 生成 一个 下拉选 单 ， 引用 SQL 表格 表头 属性 ， 一个 细节 讨论 。   说 ， 新建 一个 模块   todo _ user   ， 描述 模块 设置 配置 好 ， 原 模块   todo _ app   todo . task 模型 增加 新的 两个 field ， 两个 新的 表 头了 。   修改 已有 field   继承 机制 ， 上 类似 ， 只 修改 希望 更改 field 属性 即可 。 :   原 模型 namefield 额外 增加 信息 。   重载 原 模型 方法   读者 想到 ， 类似 继承 机制 下 ， 重写 原 模型 方法 重载 方法 。 事实上 确实 做 ， 要讲 一种 优雅 继承 原 模型 方法 ，   super ( )   调用 父 类的 方法 。   例子 :   视图 继承 修改   小节 参考   篇 文章   ， 一个 简单 例子 所示 ：   大体 分为 三步 ：   推荐   template   标签 创建 一个   QWeb   对象     inherit _ id   描述 继承 关系   修改 ， 修改 三种 方法 ， 描述 。   xpath + expr   xpath   expr   xpath 语法 定位 ， 找到 第一个 用于 修改 操作 。   field +   field       过滤 属性 ， 找到 第一个 field 操作     第一个 元素 属性 操作   position   position   选中 节点 操作   inside   默认 ， 附加 选中 节点 上   replace   替换     选中 节点 兄弟 节点 附加 进来     选中 节点 兄弟 节点 插入   attributes   attributes   修改 选中 节点 属性 值   跟着   < attribute >   标签 。   定制 odoo 实战   寻根 问底 第一 谈   res . company   模型     settings   - >   4   ， ：     User   &   Company     id     7   ，   找到   Company   子 菜单   id   54 ， action   \" ir . actions . act _ window , 44 \"   ，       44   号   动作 ， ：   动作   模型   res . company   。 启动   view _ mode   定义 显示 方案 。 视图   就会 找到   res . company   相关 视图 。   假设 定义 res . company   视图 ， 激活 开发者 模式 ， 目标 视图 ， 点击   Fields   View   Get   ，   form   开头 ， 表单 视图 。 ：   视图 名字 描述 记忆 用的 ， xml 引用 external   id ， priority 字 段也 定义 继承 关系 顺序 。   第一个 视图 内容 ：   内容 还 定义 完 ， 短 ， 要在 xml 查找 定义 ， 查找 xml 。 两个 xml ：   对照   Fields   View   Get   看 ， 大体 内容 。 再来 分析 第二个 xml 视图 继承 修改 动作 。 去 ，   < field   = \" currency _ id \"   插入 内容 。   pruchase 模块 研究   删除 询价 单子 菜单   创建 采购 单 即可 ， 不 询价 单 ， 询价 单子 菜单 去除 。 找到 采购 子 菜单 id   号是   265 ， ：   目标 子子 菜单 ：   子子 菜单 menuitem 记录 删除 掉 ， 查询 到的 xml 语句 ：   ：   采购 订单 生成 采购 单   发现 点击 生成 询价 单 ， 希望 编辑 采购 单 ， 取消 询价 单 功能 。   376   动作 采购 单 。 采购 订单 试图 还 进一步 研究 ， 研究 模型   purchase . order   。   先 查看 视图 情况 ：   深感 自如 定制 ， 还 欠缺 一点 火候 ， 学习 odoo 内部 视图 模型 机制 ， 再 回到 。   学习 odoo 内部 机制   controller     http . request . env   获取 模型 对象 ， 调用   search   方法 获取 记录 。     http . route   装饰 器来 指定 url 分发 规则 ， auth 指定 认证 规则 ， website QWeb 模版 。     http . request . render   模版 渲染 网页 ， 第一个 参数 是本 模块 名字 加上 template   id 选定 模版 ， 字典 值来 返回 参数 供 网页 模版 调用 。   url 接受 参数 类型 限定 ，   指定 odoo 内部 模型 ：   security   id 名字 都 特别 限定 死 ， 关键   model _ id : id   字段 ， 名字   model _ < model _ >     model _     request . env   定义 模型   . env   引用 都是 ，   model _   点号 换成 下划线 。   template   QWeb 学习 ， QWeb 原 html 标签 写上 ， 区别   t -   开头   QWeb   属性 ，   t   标签 条件 渲染 中 渲染 ：   t -   条件 符合 ， 输出 ：   ：   输出 ：   t - call   调用 子 模板 ，   循环 渲染   参数 递归 ， 递归 值由   t -   指定 ， 获取 数值 。   t - esc   接受 一个 表达式 ， 估值 打印 出其 内容 。   t - attf - *   渲染 属性 ， 值是 字符串   format   语句 。   库存 管理   创建 供应商   创建 产品 ：   库存 产品 ， 消耗 产品 ， 服务 类 产品   供应链   制造 ：   内部 制造 内部 服务 ； 购买 ， 采购 订单 供应商 处 购买 ； MTS   仓库 足够 货物 客户 ，   在手 产品 ， 可用 产品   初始 库存   创建 一个 库存 调整 ， 点击 盘点   销售 流程 集成 ， 选择 一个 客户 ， 创建 一个 报价单 ， 添加 产品 ， 确认 销售 ， 点击 交货   库存 产品 供应链 可用 ， 显示 调拨 单 ， 手工 检查 可用 ， 产品 ， 数量 ， 验证 交货   确认   采购 流程 集成 ， 采购 ， 创建 询价 ， 确认 订单 ， 询价 单 采购 单 调拨 单也 生成 ， 点击 发货 。 库存 ， 查找 入库 送货 ， 点击 产品 ， 扫描 枪 扫描 odoo 确认 验证 收 货单 。   确立 订货 规则 ， 一个 仓管 系统 会让 货物 存量 太 低也 太高 ， odoo 订货 规则 ， 。 库存 产品 中 输入 最小 数量   采购   WARNING   历史   商业 智能化   Odoo 框架 简介   python 版本   安装 配置     PostgreSQL 数据库   python 虚拟 环境 等的 配置   安装 odoo 依赖   centos   ubuntu   nodejs   安装 odoo   数据库 配置   pg _ hba . conf   初步 启动   windows 下从 源码 安装   odoo . conf   数据库 相关   网络 相关   日志 相关   翻译 相关   邮箱 相关   初入 odoo   数据库 管理 界面   登录 界面   Administrator 首 选项   导入 一个 翻译   新的 Demo 用户   模块 管理   修改 公司 信息   进销 存和 财务 系统 抽象 讨论   采购 部门 例   创建 addon   开发 前   快速 生成 模块 骨架   Odoo 模块 文件   安装 定义 模块   第一个 模块   controllers   views   models   security   demo   美化 网页   url   route 参数   data 文件   快捷 标签   menuitem   template   report   定制 odoo   定制 菜单   菜单   动作   menuitem   act _ window   定制 视图   表单 视图   tree 视图   定义 模型   Recordset   @ api . multi   @ api .   domain 语法   search 方法   write 方法   . env   继承 修改 odoo   扩展 现有 模块   模块 增加 field   修改 已有 field   重载 原 模型 方法   视图 继承 修改   xpath + expr   field +     position   定制 odoo 实战   寻根 问底 第一 谈   pruchase 模块 研究   删除 询价 单子 菜单   采购 订单 生成 采购 单   学习 odoo 内部 机制   controller   security   template   t -   t - call   循环 渲染   t - attf - *   库存 管理   采购   激活 产品 变体 特性   采购   会计   会计学 入门   财务 报表   原始 凭证   账户   资产 类 账户   负债 类 账户   所有者 权益 账户   分类 帐   会计 科目 表   报告 期间   用户 角色 权限   客户 流程   转账 付款   支票 付款   客户 催 款   供应商 流程   登记 账单   账单 付款   核销 银行 账单   附录   模型 表格 清单   页   base . language . install   res . company   purchase . order   res . users   参考 资料   采购 一个 采购 单 （ Purchase   Order ） ， 是由 询价 单 采购 招标 自动 生成 。   销项 税   销售额 * 税率   进项 税   购买 货物 支付 税额   应 缴税   =   销项 税   -   进项 税   条形码   barcode   产品 模版   野马 牌 T 恤衫 ，   S   蓝色   产品 变量   尺寸 颜色 属性 ， 一个 产品 变量 都 一个 barcode 条形码   一个 产品 变量 都有 price   价格 ，   price   =   template   price   +   variant   price   存货 （ Inventory ）   Picture   （ 产品 变量 绑定 ）   Other   Field   大部分 field 产品 模版 关联 ， 改变 ， 相关 产品 变量 都将 改变   激活 产品 变体 特性   销售 -   设置 -   产品 变体   添加 产品   -   采购   创建 询价 单   -   保存   -   确认 询价 单   -   创建 采购 订单   保存   接受 产品 点击   接受 产品   （ 确认 送货 ）   供应商 账单   （ 登记 付款 ）   会计   会计学 入门   会计 系统 企业 两个 :   欠 别人 。 资产 ( assert ) 企业 拥有 控制 企业 带来 未来 经济效益 资源 。 :   现金 ， 物料 ， 设备 土地 。 负债 ( liabilities ) 企业 欠非 所有者 （ 债权人 ） 债务 ， 未来 现金 、 产品 服务 偿还 。 权益 ( equity ) 是指 企业 所有人 企业 资产 享有 求偿 权 。   :   负债 放在 所有者 权益 ， 负债 先被 。 一个 扩展 会计 公式 :   收入 减去 费用 便是 净利润 ( net   income ) ， 费用 大于 收入 ， 则会 净 损失 ( net   loss ) 。   常见 经济 业务 :   所有者 投资   成立 一家 公司 ， 公司 名义 存了 钱 ， 创始人 这笔 钱 所有者 投资 ， 所有者 权益 中的 所有者 名下 资本 。   现金 采购 物料   是将 公司 现金 资产 一种 资产 ( 物料 ) ， 这项 经济 业务 仅仅 改变 资产 形式 。   现金 购买 设备   类似 ， 仅仅 改变 资产 形式 ， 公司 资本 总 数量 没 变 。   赊购 物料   公司 资产 增加 ， 赊 钱 公司 负债 。   提供 服务 赚取 现金   资产 现金 增加 ， 右边 收入 增加 。   现金 支付 费用   资产 现金 减少 ， 右边 费用 增加 ， 减去 。   赊销 方式 提供 服务 出租 设备   左边 资产 应收款 项 增加 ， 右边 收入 增加 。   应收 账款 变现   左边 资产 应收款 变为 现金 ， 右边 变化 。   支付 应付 款项   应付 款项 左边 现金 减少 ， 右边 负债 减少 。   所有者 提取 现金   左边 资产 现金 减少 ， 右边 所有者 权益 减少 。   财务 报表   利润表   所有者 权益 表   资产 负债表   现金 流量表   原始 凭证   原始 凭证 纸质 电子版 ， :   销售 发票 ， 支票 ， 订货 单 ， 供货商 签发 账单 ， 员工 收入 记录 ， 银行 账单 。   账户   资产 类 账户   =   负债 类 账户   +   所有者 权益 账户   资产 类 账户   资产 是指 企业 拥有 控制 预计 未来 企业 带来 经济效益 资源 。 会计 系统 都 包含 账户 :   现金 账户 ( cash )   企业 现金 金额 ， 现金 增减 变动 情况 都要 记录 现金 账户 中 。   应收款 项 ( account   receivable )   是指 卖方 持有 买房 卖方 付款 承诺 。   应收 票据 ( note   receivable )   称为 期票 ， 一种 书面 承诺 ， 承诺 未来 特定 时间 还款 。   预付 款项 ( prepaid   accounts )   代表 提前 支付 未来 费用 。   物料 ( supplies )   在被 完 资产 ， 完 成本 将被 记入 费用 账户 。   设备 ( equipment )   一项 资产 ， 设备 耗费 ， 成本 一点点 列为 费用 ， 费用 折旧 。   建筑物 ( buildings )   土地 ( land )   负债 类 账户   常见 负债 类 账户 :   应付 款项 ( account   payable )   口头 暗含 付款 承诺 。   应付 票据 ( note   payable )   较为 正式 未来 付款 承诺 。   预收 账款 ( unearned   revenues )   未来 企业 提供 产品 劳务 才能 清偿 负债 。   应计 负债 ( accrued   liabilities )   企业 欠的 尚未 偿还 负债 。   所有者 权益 账户   提及 扩展 会计 公式 ， 所有者 权益 账户 分为 :   所有者 名下 资本 ， 所有者 提取 ， 收入 费用 。   分类 帐   信息系统 中 账户 集合 分类 帐 。   会计 科目 表   企业 账户 名称 编号 列表 会计 科目 表 。   编号 中的 科目 号有 国标 ， 子目 号有 省市 ， 内定 。     \\ href { http : / / blog . sina . . cn / s / blog _ 60dc73f50100kq6l . html } { 网页 }   介绍 ， 资产 类 编号 首位 科目 号是 1 ， 负债 2 ， 所有者 权益 3 。   报告 期间   年度 财务 报表 ， 报告期 一年 会计 报告 ， 一个月 ， 一季度 中期 财务 报告 。   设置 公司 信息   设置 银行 账户   （ 科目 编号 翻译 应 改为 银行 帐号 ）   银行 识别码 实际上 银行 swift   code   称之为   BIC   bank   identifier   code   科目 表   安装 中国 科目 表   税   创建 税项 ， 设置 销售 采购 默认 税项 ， 公司 开发 票的 ， 系统 会 自动 税项 。   币种 支持 ， 暂时 不用   一项 新的 业务 ， 创建 客户 供应商   公司 运营 实物 服务 称之为 产品 ， 创建 公司 产品   用户 角色 权限   专员   访问 级别 ， 开单   经理   访问 ， 会计 权限 ，   主管   高级 访问 ， 记录 发票 ， 管理 银行 费用 ， 核销 日 记账 分录   客户 流程   转账 付款   创建 一个 客户 发票   登记 银行 账单   核销 银行 账单   支票 付款   创建 一个 客户 发票   发票 界面 登记 付款   创建 存款单   登记 银行 账单   已有 交易 核销   客户 催 款   核销 银行 账单   查看 未 付款 发票   发催 款信   供应商 流程   登记 账单   创建 账单   现金 交易   审核 账单   账单 付款   标记 账单 为待 付款   打印 支票 生成 付款 单   核销 银行 账单   自动 核销 银行 账单   附录   模型 表格 清单   页   子 标题 模型   . env [ ]   调用 名字 ， 代码 演示 模型 代码 定义 模型 名 写上 表格 名 。   base . language . install   res . company   purchase . order   res . users   res .   网页 视图 下 菜单 :   设置 → 用户 。   表格 （ 说 模型 ） 存储 登录 用户 信息 ， 用户名 密码 。   参考 资料   wiki 商业智能   wiki   ERP   ERP 不 花钱 ,   作者 :   老 肖 （ OSCG ） ,   版本 :   1.0   Odoo   Development   Essentials   ,   author :   Daniel   Reis   ,   date :   April   2015   OdooV10   官方 文档   Odoo     API   guideline   Documentation   ,   author :   Nicolas   Bessi   ,   date :   April   13 ,   2015   .   会计学 原理   19 版   作者 :   John   J . Wild   ,   Ken   W .   Shaw   .   崔 学刚 译 ,   中国人民大学出版社 .",
            "tags":"software",
            "url":"articles/odoo-learning-notes.html"
        }
    ]
}